
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000742  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008c0  00800200  00800200  00000742  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000742  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000774  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000007b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b3  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000337  00000000  00000000  0000100b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000593  00000000  00000000  00001342  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  000018d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037e  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000653  00000000  00000000  00001d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000023d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	27 c3       	rjmp	.+1614   	; 0x694 <__vector_17>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	2a e0       	ldi	r18, 0x0A	; 10
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a0 3c       	cpi	r26, 0xC0	; 192
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	d1 d2       	rcall	.+1442   	; 0x6a8 <main>
 106:	e1 c2       	rjmp	.+1474   	; 0x6ca <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
 10a:	0f 92       	push	r0
 10c:	1f 92       	push	r1
 10e:	2f 92       	push	r2
 110:	3f 92       	push	r3
 112:	4f 92       	push	r4
 114:	5f 92       	push	r5
 116:	6f 92       	push	r6
 118:	7f 92       	push	r7
 11a:	8f 92       	push	r8
 11c:	9f 92       	push	r9
 11e:	af 92       	push	r10
 120:	bf 92       	push	r11
 122:	cf 92       	push	r12
 124:	df 92       	push	r13
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
 14a:	0c b7       	in	r16, 0x3c	; 60
 14c:	0f 93       	push	r16
 14e:	ff b7       	in	r31, 0x3f	; 63
 150:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
 152:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 154:	fe b7       	in	r31, 0x3e	; 62
		  in   r16, EIND
 156:	0c b7       	in	r16, 0x3c	; 60
        sts  KernelSp, r30
 158:	e0 93 be 0a 	sts	0x0ABE, r30
        sts  KernelSp+1, r31
 15c:	f0 93 bf 0a 	sts	0x0ABF, r31

        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
 160:	e0 91 bc 0a 	lds	r30, 0x0ABC
        lds  r31, CurrentSp+1
 164:	f0 91 bd 0a 	lds	r31, 0x0ABD
        out  SPL, r30
 168:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 16a:	fe bf       	out	0x3e, r31	; 62
		  out  EIND, r16
 16c:	0c bf       	out	0x3c, r16	; 60
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
 16e:	ff 91       	pop	r31
 170:	ff bf       	out	0x3f, r31	; 63
 172:	0f 91       	pop	r16
 174:	0c bf       	out	0x3c, r16	; 60
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	df 90       	pop	r13
 19c:	cf 90       	pop	r12
 19e:	bf 90       	pop	r11
 1a0:	af 90       	pop	r10
 1a2:	9f 90       	pop	r9
 1a4:	8f 90       	pop	r8
 1a6:	7f 90       	pop	r7
 1a8:	6f 90       	pop	r6
 1aa:	5f 90       	pop	r5
 1ac:	4f 90       	pop	r4
 1ae:	3f 90       	pop	r3
 1b0:	2f 90       	pop	r2
 1b2:	1f 90       	pop	r1
 1b4:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
 1b6:	18 95       	reti

000001b8 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
 1b8:	0f 92       	push	r0
 1ba:	1f 92       	push	r1
 1bc:	2f 92       	push	r2
 1be:	3f 92       	push	r3
 1c0:	4f 92       	push	r4
 1c2:	5f 92       	push	r5
 1c4:	6f 92       	push	r6
 1c6:	7f 92       	push	r7
 1c8:	8f 92       	push	r8
 1ca:	9f 92       	push	r9
 1cc:	af 92       	push	r10
 1ce:	bf 92       	push	r11
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
 1f8:	0c b7       	in	r16, 0x3c	; 60
 1fa:	0f 93       	push	r16
 1fc:	ff b7       	in	r31, 0x3f	; 63
 1fe:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
 200:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 202:	fe b7       	in	r31, 0x3e	; 62
		  in   r16, EIND
 204:	0c b7       	in	r16, 0x3c	; 60
        sts  CurrentSp, r30
 206:	e0 93 bc 0a 	sts	0x0ABC, r30
        sts  CurrentSp+1, r31
 20a:	f0 93 bd 0a 	sts	0x0ABD, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
 20e:	e0 91 be 0a 	lds	r30, 0x0ABE
        lds  r31, KernelSp+1
 212:	f0 91 bf 0a 	lds	r31, 0x0ABF
        out  SPL, r30
 216:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 218:	fe bf       	out	0x3e, r31	; 62
		  out  EIND, r16
 21a:	0c bf       	out	0x3c, r16	; 60
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
 21c:	ff 91       	pop	r31
 21e:	ff bf       	out	0x3f, r31	; 63
 220:	0f 91       	pop	r16
 222:	0c bf       	out	0x3c, r16	; 60
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	bf 91       	pop	r27
 22e:	af 91       	pop	r26
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	7f 91       	pop	r23
 236:	6f 91       	pop	r22
 238:	5f 91       	pop	r21
 23a:	4f 91       	pop	r20
 23c:	3f 91       	pop	r19
 23e:	2f 91       	pop	r18
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	bf 90       	pop	r11
 24e:	af 90       	pop	r10
 250:	9f 90       	pop	r9
 252:	8f 90       	pop	r8
 254:	7f 90       	pop	r7
 256:	6f 90       	pop	r6
 258:	5f 90       	pop	r5
 25a:	4f 90       	pop	r4
 25c:	3f 90       	pop	r3
 25e:	2f 90       	pop	r2
 260:	1f 90       	pop	r1
 262:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
 264:	08 95       	ret

00000266 <Dispatch>:
/**
  * This internal kernel function is a part of the "scheduler". It chooses the 
  * next task to run, i.e., Cp.
  */
static void Dispatch()
{
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	ec e0       	ldi	r30, 0x0C	; 12
 26c:	f2 e0       	ldi	r31, 0x02	; 2
   /*while(Process[NextP].state != READY) {
      NextP = (NextP + 1) % MAXPROCESS;
   }*/
	int i;
	
	for (i=0;i<10;i++){
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
		if (ready_queue[i].head!=NULL){
 272:	a0 81       	ld	r26, Z
 274:	b1 81       	ldd	r27, Z+1	; 0x01
 276:	10 97       	sbiw	r26, 0x00	; 0
 278:	11 f1       	breq	.+68     	; 0x2be <Dispatch+0x58>
 */
static PD* dequeue(queue_t* queue_ptr)
{
    PD* task_ptr = queue_ptr->head;

    if(queue_ptr->head != NULL)
 27a:	81 f0       	breq	.+32     	; 0x29c <Dispatch+0x36>
    {
        queue_ptr->head = queue_ptr->head->next;
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	fc 01       	movw	r30, r24
 286:	e4 5f       	subi	r30, 0xF4	; 244
 288:	fd 4f       	sbci	r31, 0xFD	; 253
 28a:	ed 01       	movw	r28, r26
 28c:	c1 5f       	subi	r28, 0xF1	; 241
 28e:	de 4f       	sbci	r29, 0xFE	; 254
 290:	88 81       	ld	r24, Y
 292:	99 81       	ldd	r25, Y+1	; 0x01
 294:	91 83       	std	Z+1, r25	; 0x01
 296:	80 83       	st	Z, r24
        task_ptr->next = NULL;
 298:	19 82       	std	Y+1, r1	; 0x01
 29a:	18 82       	st	Y, r1
   }*/
	int i;
	
	for (i=0;i<10;i++){
		if (ready_queue[i].head!=NULL){
			Cp=dequeue(&ready_queue[i]);
 29c:	b0 93 07 02 	sts	0x0207, r27
 2a0:	a0 93 06 02 	sts	0x0206, r26
			CurrentSp = Cp->sp;
 2a4:	8d 91       	ld	r24, X+
 2a6:	9c 91       	ld	r25, X
 2a8:	11 97       	sbiw	r26, 0x01	; 1
 2aa:	90 93 bd 0a 	sts	0x0ABD, r25
 2ae:	80 93 bc 0a 	sts	0x0ABC, r24
			Cp->state = RUNNING;
 2b2:	ae 5f       	subi	r26, 0xFE	; 254
 2b4:	be 4f       	sbci	r27, 0xFE	; 254
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	8c 93       	st	X, r24
			Enable_Interrupt();
 2ba:	78 94       	sei
			break;
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <Dispatch+0x62>
   /*while(Process[NextP].state != READY) {
      NextP = (NextP + 1) % MAXPROCESS;
   }*/
	int i;
	
	for (i=0;i<10;i++){
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	34 96       	adiw	r30, 0x04	; 4
 2c2:	8a 30       	cpi	r24, 0x0A	; 10
 2c4:	91 05       	cpc	r25, r1
 2c6:	a9 f6       	brne	.-86     	; 0x272 <Dispatch+0xc>
			break;
		}
	}
	

}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <Task_Terminate>:
/**
  * The calling task terminates itself.
  */
void Task_Terminate() 
{
   if (KernelActive) {
 2ce:	80 91 02 02 	lds	r24, 0x0202
 2d2:	90 91 03 02 	lds	r25, 0x0203
 2d6:	89 2b       	or	r24, r25
 2d8:	51 f0       	breq	.+20     	; 0x2ee <Task_Terminate+0x20>
      Disable_Interrupt();
 2da:	f8 94       	cli
      Cp-> request = TERMINATE;
 2dc:	e0 91 06 02 	lds	r30, 0x0206
 2e0:	f0 91 07 02 	lds	r31, 0x0207
 2e4:	eb 5f       	subi	r30, 0xFB	; 251
 2e6:	fe 4f       	sbci	r31, 0xFE	; 254
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	80 83       	st	Z, r24
      Enter_Kernel();
 2ec:	65 cf       	rjmp	.-310    	; 0x1b8 <Enter_Kernel>
 2ee:	08 95       	ret

000002f0 <Kernel_Create_Task_At>:
 * it has called "Enter_Kernel()"; so that when we switch to it later, we
 * can just restore its execution context on its stack.
 * (See file "cswitch.S" for details.)
 */
void Kernel_Create_Task_At( PD *p, voidfuncptr f , PRIORITY py, int arg) 
{   
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29

   /*----BEGIN of NEW CODE----*/
   //Initialize the workspace (i.e., stack) and PD here!

   //Clear the contents of the workspace
   memset(&(p->workSpace),0,WORKSPACE);
 2f8:	fc 01       	movw	r30, r24
 2fa:	32 96       	adiw	r30, 0x02	; 2
 2fc:	a0 e0       	ldi	r26, 0x00	; 0
 2fe:	b1 e0       	ldi	r27, 0x01	; 1
 300:	ef 01       	movw	r28, r30
 302:	8d 01       	movw	r16, r26
 304:	19 92       	st	Y+, r1
 306:	01 50       	subi	r16, 0x01	; 1
 308:	10 40       	sbci	r17, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <Kernel_Create_Task_At+0x14>
   //by most significant).  This is because the "return" assembly instructions 
   //(rtn and rti) pop addresses off in BIG ENDIAN (most sig. first, least sig. 
   //second), even though the AT90 is LITTLE ENDIAN machine.

   //Store terminate at the bottom of stack to protect against stack underrun.
   *(unsigned char *)sp-- = ((unsigned int)Task_Terminate) & 0xff;
 30c:	dc 01       	movw	r26, r24
 30e:	af 5f       	subi	r26, 0xFF	; 255
 310:	be 4f       	sbci	r27, 0xFE	; 254
 312:	e7 e6       	ldi	r30, 0x67	; 103
 314:	f1 e0       	ldi	r31, 0x01	; 1
 316:	ec 93       	st	X, r30
   *(unsigned char *)sp-- = (((unsigned int)Task_Terminate) >> 8) & 0xff;
 318:	11 97       	sbiw	r26, 0x01	; 1
 31a:	fc 93       	st	X, r31
	*(unsigned char *)sp-- = 0x00;
 31c:	fc 01       	movw	r30, r24
 31e:	e1 50       	subi	r30, 0x01	; 1
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	10 82       	st	Z, r1

   //Place return address of function at bottom of stack
   *(unsigned char *)sp-- = ((unsigned int)f) & 0xff;
 324:	31 97       	sbiw	r30, 0x01	; 1
 326:	60 83       	st	Z, r22
   *(unsigned char *)sp-- = (((unsigned int)f) >> 8) & 0xff;
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	70 83       	st	Z, r23
	*(unsigned char *)sp-- = 0x00;
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	10 82       	st	Z, r1

	sp = sp - 34;
 330:	b3 97       	sbiw	r30, 0x23	; 35
   p->sp = sp;		/* stack pointer into the "workSpace" */
 332:	dc 01       	movw	r26, r24
 334:	ed 93       	st	X+, r30
 336:	fc 93       	st	X, r31
   p->code = f;		/* function to be executed as a task */
 338:	ba 96       	adiw	r30, 0x2a	; 42
 33a:	60 83       	st	Z, r22
 33c:	71 83       	std	Z+1, r23	; 0x01
   p->request = NONE;
 33e:	32 96       	adiw	r30, 0x02	; 2
 340:	10 82       	st	Z, r1
	p->arg= arg;
 342:	36 96       	adiw	r30, 0x06	; 6
 344:	31 83       	std	Z+1, r19	; 0x01
 346:	20 83       	st	Z, r18
	p->priority=py;
 348:	33 97       	sbiw	r30, 0x03	; 3
 34a:	40 83       	st	Z, r20
   /*----END of NEW CODE----*/
   p->state = READY;
 34c:	36 97       	sbiw	r30, 0x06	; 6
 34e:	21 e0       	ldi	r18, 0x01	; 1
 350:	20 83       	st	Z, r18
	enqueue(&ready_queue[p->priority],p);
 352:	50 e0       	ldi	r21, 0x00	; 0



static void enqueue(queue_t* queue_ptr, PD* task_to_add)
{
    task_to_add->next = NULL;
 354:	3d 96       	adiw	r30, 0x0d	; 13
 356:	11 82       	std	Z+1, r1	; 0x01
 358:	10 82       	st	Z, r1

    if(queue_ptr->head == NULL)
 35a:	fa 01       	movw	r30, r20
 35c:	ee 0f       	add	r30, r30
 35e:	ff 1f       	adc	r31, r31
 360:	ee 0f       	add	r30, r30
 362:	ff 1f       	adc	r31, r31
 364:	e4 5f       	subi	r30, 0xF4	; 244
 366:	fd 4f       	sbci	r31, 0xFD	; 253
 368:	20 81       	ld	r18, Z
 36a:	31 81       	ldd	r19, Z+1	; 0x01
 36c:	23 2b       	or	r18, r19
 36e:	61 f4       	brne	.+24     	; 0x388 <Kernel_Create_Task_At+0x98>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
 370:	44 0f       	add	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	44 0f       	add	r20, r20
 376:	55 1f       	adc	r21, r21
 378:	fa 01       	movw	r30, r20
 37a:	e4 5f       	subi	r30, 0xF4	; 244
 37c:	fd 4f       	sbci	r31, 0xFD	; 253
 37e:	91 83       	std	Z+1, r25	; 0x01
 380:	80 83       	st	Z, r24
        queue_ptr->tail = task_to_add;
 382:	93 83       	std	Z+3, r25	; 0x03
 384:	82 83       	std	Z+2, r24	; 0x02
 386:	0f c0       	rjmp	.+30     	; 0x3a6 <Kernel_Create_Task_At+0xb6>
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
 388:	44 0f       	add	r20, r20
 38a:	55 1f       	adc	r21, r21
 38c:	44 0f       	add	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	fa 01       	movw	r30, r20
 392:	e4 5f       	subi	r30, 0xF4	; 244
 394:	fd 4f       	sbci	r31, 0xFD	; 253
 396:	a2 81       	ldd	r26, Z+2	; 0x02
 398:	b3 81       	ldd	r27, Z+3	; 0x03
 39a:	a1 5f       	subi	r26, 0xF1	; 241
 39c:	be 4f       	sbci	r27, 0xFE	; 254
 39e:	8d 93       	st	X+, r24
 3a0:	9c 93       	st	X, r25
        queue_ptr->tail = task_to_add;
 3a2:	93 83       	std	Z+3, r25	; 0x03
 3a4:	82 83       	std	Z+2, r24	; 0x02
	p->arg= arg;
	p->priority=py;
   /*----END of NEW CODE----*/
   p->state = READY;
	enqueue(&ready_queue[p->priority],p);
}
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	08 95       	ret

000003b0 <Kernel_Create_Task>:

/**
  *  Create a new task
  */
static void Kernel_Create_Task( voidfuncptr f , PRIORITY py, int arg) 
{
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	ec 01       	movw	r28, r24
   int x;

   if (Tasks == MAXPROCESS) return;  /* Too many task! */
 3b6:	80 91 00 02 	lds	r24, 0x0200
 3ba:	90 91 01 02 	lds	r25, 0x0201
 3be:	08 97       	sbiw	r24, 0x08	; 8
 3c0:	61 f1       	breq	.+88     	; 0x41a <Kernel_Create_Task+0x6a>

   /* find a DEAD PD that we can use  */
   for (x = 0; x < MAXPROCESS; x++) {
       if (Process[x].state == DEAD) break;
 3c2:	80 91 36 03 	lds	r24, 0x0336
 3c6:	88 23       	and	r24, r24
 3c8:	71 f0       	breq	.+28     	; 0x3e6 <Kernel_Create_Task+0x36>
 3ca:	a7 e4       	ldi	r26, 0x47	; 71
 3cc:	b4 e0       	ldi	r27, 0x04	; 4
   int x;

   if (Tasks == MAXPROCESS) return;  /* Too many task! */

   /* find a DEAD PD that we can use  */
   for (x = 0; x < MAXPROCESS; x++) {
 3ce:	e1 e0       	ldi	r30, 0x01	; 1
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
       if (Process[x].state == DEAD) break;
 3d2:	9c 91       	ld	r25, X
 3d4:	99 23       	and	r25, r25
 3d6:	49 f0       	breq	.+18     	; 0x3ea <Kernel_Create_Task+0x3a>
   int x;

   if (Tasks == MAXPROCESS) return;  /* Too many task! */

   /* find a DEAD PD that we can use  */
   for (x = 0; x < MAXPROCESS; x++) {
 3d8:	31 96       	adiw	r30, 0x01	; 1
 3da:	af 5e       	subi	r26, 0xEF	; 239
 3dc:	be 4f       	sbci	r27, 0xFE	; 254
 3de:	e8 30       	cpi	r30, 0x08	; 8
 3e0:	f1 05       	cpc	r31, r1
 3e2:	b9 f7       	brne	.-18     	; 0x3d2 <Kernel_Create_Task+0x22>
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <Kernel_Create_Task+0x3a>
       if (Process[x].state == DEAD) break;
 3e6:	e0 e0       	ldi	r30, 0x00	; 0
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	9a 01       	movw	r18, r20
 3ec:	46 2f       	mov	r20, r22
 3ee:	be 01       	movw	r22, r28
   }

   ++Tasks;
 3f0:	80 91 00 02 	lds	r24, 0x0200
 3f4:	90 91 01 02 	lds	r25, 0x0201
 3f8:	01 96       	adiw	r24, 0x01	; 1
 3fa:	90 93 01 02 	sts	0x0201, r25
 3fe:	80 93 00 02 	sts	0x0200, r24
   Kernel_Create_Task_At( &(Process[x]), f ,py, arg);
 402:	a1 e1       	ldi	r26, 0x11	; 17
 404:	b1 e0       	ldi	r27, 0x01	; 1
 406:	ea 9f       	mul	r30, r26
 408:	c0 01       	movw	r24, r0
 40a:	eb 9f       	mul	r30, r27
 40c:	90 0d       	add	r25, r0
 40e:	fa 9f       	mul	r31, r26
 410:	90 0d       	add	r25, r0
 412:	11 24       	eor	r1, r1
 414:	8c 5c       	subi	r24, 0xCC	; 204
 416:	9d 4f       	sbci	r25, 0xFD	; 253
 418:	6b df       	rcall	.-298    	; 0x2f0 <Kernel_Create_Task_At>

}
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <set_timer>:
    } 
}

void set_timer()
{
	TCCR1A = 0;
 420:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;
 424:	e1 e8       	ldi	r30, 0x81	; 129
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	10 82       	st	Z, r1
	//Set to CTC (mode 4)
	TCCR1B |= (1<<WGM32);
 42a:	80 81       	ld	r24, Z
 42c:	88 60       	ori	r24, 0x08	; 8
 42e:	80 83       	st	Z, r24
	
	//Set prescaler /8
	TCCR1B |= (1<<CS31);
 430:	80 81       	ld	r24, Z
 432:	82 60       	ori	r24, 0x02	; 2
 434:	80 83       	st	Z, r24
	
	//Set TOP value (0.01 seconds)
	OCR1A = 20000;
 436:	80 e2       	ldi	r24, 0x20	; 32
 438:	9e e4       	ldi	r25, 0x4E	; 78
 43a:	90 93 89 00 	sts	0x0089, r25
 43e:	80 93 88 00 	sts	0x0088, r24
	
	//Enable interupt A for timer 3.
	TIMSK1 |= (1<<OCIE1A);
 442:	ef e6       	ldi	r30, 0x6F	; 111
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	82 60       	ori	r24, 0x02	; 2
 44a:	80 83       	st	Z, r24
 44c:	08 95       	ret

0000044e <OS_Init>:
/**
  * This function initializes the RTOS and must be called before any other
  * system calls.
  */
void OS_Init() 
{
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29

	DDRA= (1<<PA0);
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	81 b9       	out	0x01, r24	; 1
	DDRA = (1<<PA1);
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	81 b9       	out	0x01, r24	; 1
	PORTA &= ~(1<<PA0);
 45a:	10 98       	cbi	0x02, 0	; 2
	PORTA &= ~(1<<PA1);
 45c:	11 98       	cbi	0x02, 1	; 2
	
	
	set_timer();
 45e:	e0 df       	rcall	.-64     	; 0x420 <set_timer>
	
   int x;

   Tasks = 0;
 460:	10 92 01 02 	sts	0x0201, r1
 464:	10 92 00 02 	sts	0x0200, r1
   KernelActive = 0;
 468:	10 92 03 02 	sts	0x0203, r1
 46c:	10 92 02 02 	sts	0x0202, r1
   NextP = 0;
 470:	10 92 05 02 	sts	0x0205, r1
 474:	10 92 04 02 	sts	0x0204, r1
 478:	e6 e3       	ldi	r30, 0x36	; 54
 47a:	f3 e0       	ldi	r31, 0x03	; 3
 47c:	4d ea       	ldi	r20, 0xAD	; 173
 47e:	5a e0       	ldi	r21, 0x0A	; 10
	//Reminder: Clear the memory for the task on creation.
   for (x = 0; x < MAXPROCESS-1; x++) {
      memset(&(Process[x]),0,sizeof(PD));
 480:	21 e1       	ldi	r18, 0x11	; 17
 482:	31 e0       	ldi	r19, 0x01	; 1
 484:	df 01       	movw	r26, r30
 486:	a2 50       	subi	r26, 0x02	; 2
 488:	b1 40       	sbci	r27, 0x01	; 1
 48a:	ed 01       	movw	r28, r26
 48c:	c9 01       	movw	r24, r18
 48e:	19 92       	st	Y+, r1
 490:	01 97       	sbiw	r24, 0x01	; 1
 492:	e9 f7       	brne	.-6      	; 0x48e <OS_Init+0x40>
      Process[x].state = DEAD;
 494:	10 82       	st	Z, r1
 496:	cf 01       	movw	r24, r30
 498:	0f 96       	adiw	r24, 0x0f	; 15
		Process[x].next=&Process[x+1];
 49a:	96 87       	std	Z+14, r25	; 0x0e
 49c:	85 87       	std	Z+13, r24	; 0x0d
 49e:	ef 5e       	subi	r30, 0xEF	; 239
 4a0:	fe 4f       	sbci	r31, 0xFE	; 254

   Tasks = 0;
   KernelActive = 0;
   NextP = 0;
	//Reminder: Clear the memory for the task on creation.
   for (x = 0; x < MAXPROCESS-1; x++) {
 4a2:	e4 17       	cp	r30, r20
 4a4:	f5 07       	cpc	r31, r21
 4a6:	71 f7       	brne	.-36     	; 0x484 <OS_Init+0x36>
      memset(&(Process[x]),0,sizeof(PD));
      Process[x].state = DEAD;
		Process[x].next=&Process[x+1];
   }
	Process[MAXPROCESS-1].state=DEAD;
 4a8:	10 92 ad 0a 	sts	0x0AAD, r1
	Process[MAXPROCESS-1].next=NULL;
 4ac:	10 92 bb 0a 	sts	0x0ABB, r1
 4b0:	10 92 ba 0a 	sts	0x0ABA, r1
	dead_pool_queue.head = &Process[0];
 4b4:	e8 e0       	ldi	r30, 0x08	; 8
 4b6:	f2 e0       	ldi	r31, 0x02	; 2
 4b8:	84 e3       	ldi	r24, 0x34	; 52
 4ba:	92 e0       	ldi	r25, 0x02	; 2
 4bc:	91 83       	std	Z+1, r25	; 0x01
 4be:	80 83       	st	Z, r24
	dead_pool_queue.tail = &Process[MAXPROCESS - 1];
 4c0:	8b ea       	ldi	r24, 0xAB	; 171
 4c2:	99 e0       	ldi	r25, 0x09	; 9
 4c4:	93 83       	std	Z+3, r25	; 0x03
 4c6:	82 83       	std	Z+2, r24	; 0x02
}
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <OS_Start>:

/**
  * This function starts the RTOS after creating a few tasks.
  */
void OS_Start() 
{   
 4ce:	cf 93       	push	r28
   if ( (! KernelActive) && (Tasks > 0)) {
 4d0:	80 91 02 02 	lds	r24, 0x0202
 4d4:	90 91 03 02 	lds	r25, 0x0203
 4d8:	89 2b       	or	r24, r25
 4da:	09 f0       	breq	.+2      	; 0x4de <OS_Start+0x10>
 4dc:	45 c0       	rjmp	.+138    	; 0x568 <OS_Start+0x9a>
 4de:	80 91 00 02 	lds	r24, 0x0200
 4e2:	90 91 01 02 	lds	r25, 0x0201
 4e6:	89 2b       	or	r24, r25
 4e8:	09 f4       	brne	.+2      	; 0x4ec <OS_Start+0x1e>
 4ea:	3e c0       	rjmp	.+124    	; 0x568 <OS_Start+0x9a>
       Disable_Interrupt();
 4ec:	f8 94       	cli
      /* we may have to initialize the interrupt vector for Enter_Kernel() here. */

      /* here we go...  */
      KernelActive = 1;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	90 93 03 02 	sts	0x0203, r25
 4f6:	80 93 02 02 	sts	0x0202, r24
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() 
{
   Dispatch();  /* select a new task to run */
 4fa:	b5 de       	rcall	.-662    	; 0x266 <Dispatch>
       case CREATE:
           Kernel_Create_Task( Cp->code , Cp->priority, Cp->arg );
           break;
       case NEXT:
		 //Enqueue appropriately
		   Cp->state = READY;
 4fc:	c1 e0       	ldi	r28, 0x01	; 1
   Dispatch();  /* select a new task to run */

   while(1) {

       /* activate this newly selected task */
       CurrentSp = Cp->sp;
 4fe:	e0 91 06 02 	lds	r30, 0x0206
 502:	f0 91 07 02 	lds	r31, 0x0207
 506:	80 81       	ld	r24, Z
 508:	91 81       	ldd	r25, Z+1	; 0x01
 50a:	90 93 bd 0a 	sts	0x0ABD, r25
 50e:	80 93 bc 0a 	sts	0x0ABC, r24
       Exit_Kernel();    /* or CSwitch() */
 512:	fb dd       	rcall	.-1034   	; 0x10a <CSwitch>

       /* if this task makes a system call, it will return to here! */

        /* save the Cp's stack pointer */
       Cp->sp = CurrentSp;
 514:	e0 91 06 02 	lds	r30, 0x0206
 518:	f0 91 07 02 	lds	r31, 0x0207
 51c:	80 91 bc 0a 	lds	r24, 0x0ABC
 520:	90 91 bd 0a 	lds	r25, 0x0ABD
 524:	91 83       	std	Z+1, r25	; 0x01
 526:	80 83       	st	Z, r24

       switch(Cp->request){
 528:	df 01       	movw	r26, r30
 52a:	ab 5f       	subi	r26, 0xFB	; 251
 52c:	be 4f       	sbci	r27, 0xFE	; 254
 52e:	8c 91       	ld	r24, X
 530:	82 30       	cpi	r24, 0x02	; 2
 532:	81 f0       	breq	.+32     	; 0x554 <OS_Start+0x86>
 534:	83 30       	cpi	r24, 0x03	; 3
 536:	99 f0       	breq	.+38     	; 0x55e <OS_Start+0x90>
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	09 f7       	brne	.-62     	; 0x4fe <OS_Start+0x30>
       case CREATE:
           Kernel_Create_Task( Cp->code , Cp->priority, Cp->arg );
 53c:	16 96       	adiw	r26, 0x06	; 6
 53e:	4d 91       	ld	r20, X+
 540:	5c 91       	ld	r21, X
 542:	11 97       	sbiw	r26, 0x01	; 1
 544:	13 97       	sbiw	r26, 0x03	; 3
 546:	6c 91       	ld	r22, X
 548:	ed 5f       	subi	r30, 0xFD	; 253
 54a:	fe 4f       	sbci	r31, 0xFE	; 254
 54c:	80 81       	ld	r24, Z
 54e:	91 81       	ldd	r25, Z+1	; 0x01
 550:	2f df       	rcall	.-418    	; 0x3b0 <Kernel_Create_Task>
 552:	d5 cf       	rjmp	.-86     	; 0x4fe <OS_Start+0x30>
           break;
       case NEXT:
		 //Enqueue appropriately
		   Cp->state = READY;
 554:	ee 5f       	subi	r30, 0xFE	; 254
 556:	fe 4f       	sbci	r31, 0xFE	; 254
 558:	c0 83       	st	Z, r28
			Dispatch();
 55a:	85 de       	rcall	.-758    	; 0x266 <Dispatch>
 55c:	d0 cf       	rjmp	.-96     	; 0x4fe <OS_Start+0x30>
	   case NONE:
	//shouldn't happen
          break;
       case TERMINATE:
          /* deallocate all resources used by this task */
          Cp->state = DEAD;
 55e:	ee 5f       	subi	r30, 0xFE	; 254
 560:	fe 4f       	sbci	r31, 0xFE	; 254
 562:	10 82       	st	Z, r1
          Dispatch();
 564:	80 de       	rcall	.-768    	; 0x266 <Dispatch>
 566:	cb cf       	rjmp	.-106    	; 0x4fe <OS_Start+0x30>
      /* here we go...  */
      KernelActive = 1;
      Next_Kernel_Request();
      /* NEVER RETURNS!!! */
   }
}
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

0000056c <Task_Create>:
  * each task gives up its share of the processor voluntarily by calling
  * Task_Next().
  */
PID Task_Create( voidfuncptr f, PRIORITY py, int arg)
{
   if (KernelActive ) {
 56c:	20 91 02 02 	lds	r18, 0x0202
 570:	30 91 03 02 	lds	r19, 0x0203
 574:	23 2b       	or	r18, r19
 576:	e1 f0       	breq	.+56     	; 0x5b0 <Task_Create+0x44>
     Disable_Interrupt();
 578:	f8 94       	cli
     Cp ->request = CREATE;
 57a:	20 91 06 02 	lds	r18, 0x0206
 57e:	30 91 07 02 	lds	r19, 0x0207
 582:	f9 01       	movw	r30, r18
 584:	eb 5f       	subi	r30, 0xFB	; 251
 586:	fe 4f       	sbci	r31, 0xFE	; 254
 588:	71 e0       	ldi	r23, 0x01	; 1
 58a:	70 83       	st	Z, r23
     Cp->code = f;
 58c:	32 97       	sbiw	r30, 0x02	; 2
 58e:	91 83       	std	Z+1, r25	; 0x01
 590:	80 83       	st	Z, r24
	  Cp->arg=arg;
 592:	38 96       	adiw	r30, 0x08	; 8
 594:	51 83       	std	Z+1, r21	; 0x01
 596:	40 83       	st	Z, r20
	  Cp->priority=py;
 598:	33 97       	sbiw	r30, 0x03	; 3
 59a:	60 83       	st	Z, r22
     Enter_Kernel();
 59c:	0d de       	rcall	.-998    	; 0x1b8 <Enter_Kernel>
	  return Cp->pid;
 59e:	e0 91 06 02 	lds	r30, 0x0206
 5a2:	f0 91 07 02 	lds	r31, 0x0207
 5a6:	e7 5f       	subi	r30, 0xF7	; 247
 5a8:	fe 4f       	sbci	r31, 0xFE	; 254
 5aa:	80 81       	ld	r24, Z
 5ac:	91 81       	ldd	r25, Z+1	; 0x01
 5ae:	08 95       	ret
   } else { 
      /* call the RTOS function directly */
      Kernel_Create_Task( f,py,arg );
 5b0:	ff de       	rcall	.-514    	; 0x3b0 <Kernel_Create_Task>
		return Cp->pid;
 5b2:	e0 91 06 02 	lds	r30, 0x0206
 5b6:	f0 91 07 02 	lds	r31, 0x0207
 5ba:	e7 5f       	subi	r30, 0xF7	; 247
 5bc:	fe 4f       	sbci	r31, 0xFE	; 254
 5be:	80 81       	ld	r24, Z
 5c0:	91 81       	ldd	r25, Z+1	; 0x01
   }
}
 5c2:	08 95       	ret

000005c4 <Task_Next>:
/**
  * The calling task gives up its share of the processor voluntarily.
  */
void Task_Next() 
{
   if (KernelActive) {
 5c4:	80 91 02 02 	lds	r24, 0x0202
 5c8:	90 91 03 02 	lds	r25, 0x0203
 5cc:	89 2b       	or	r24, r25
 5ce:	b9 f1       	breq	.+110    	; 0x63e <Task_Next+0x7a>
     Disable_Interrupt();
 5d0:	f8 94       	cli
     Cp ->request = NEXT;
 5d2:	20 91 06 02 	lds	r18, 0x0206
 5d6:	30 91 07 02 	lds	r19, 0x0207
 5da:	f9 01       	movw	r30, r18
 5dc:	eb 5f       	subi	r30, 0xFB	; 251
 5de:	fe 4f       	sbci	r31, 0xFE	; 254
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	80 83       	st	Z, r24
	  enqueue(&ready_queue[Cp->priority],Cp);
 5e4:	33 96       	adiw	r30, 0x03	; 3
 5e6:	80 81       	ld	r24, Z
 5e8:	90 e0       	ldi	r25, 0x00	; 0



static void enqueue(queue_t* queue_ptr, PD* task_to_add)
{
    task_to_add->next = NULL;
 5ea:	37 96       	adiw	r30, 0x07	; 7
 5ec:	11 82       	std	Z+1, r1	; 0x01
 5ee:	10 82       	st	Z, r1

    if(queue_ptr->head == NULL)
 5f0:	fc 01       	movw	r30, r24
 5f2:	ee 0f       	add	r30, r30
 5f4:	ff 1f       	adc	r31, r31
 5f6:	ee 0f       	add	r30, r30
 5f8:	ff 1f       	adc	r31, r31
 5fa:	e4 5f       	subi	r30, 0xF4	; 244
 5fc:	fd 4f       	sbci	r31, 0xFD	; 253
 5fe:	40 81       	ld	r20, Z
 600:	51 81       	ldd	r21, Z+1	; 0x01
 602:	45 2b       	or	r20, r21
 604:	61 f4       	brne	.+24     	; 0x61e <Task_Next+0x5a>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	fc 01       	movw	r30, r24
 610:	e4 5f       	subi	r30, 0xF4	; 244
 612:	fd 4f       	sbci	r31, 0xFD	; 253
 614:	31 83       	std	Z+1, r19	; 0x01
 616:	20 83       	st	Z, r18
        queue_ptr->tail = task_to_add;
 618:	33 83       	std	Z+3, r19	; 0x03
 61a:	22 83       	std	Z+2, r18	; 0x02
 61c:	0f c0       	rjmp	.+30     	; 0x63c <Task_Next+0x78>
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	fc 01       	movw	r30, r24
 628:	e4 5f       	subi	r30, 0xF4	; 244
 62a:	fd 4f       	sbci	r31, 0xFD	; 253
 62c:	a2 81       	ldd	r26, Z+2	; 0x02
 62e:	b3 81       	ldd	r27, Z+3	; 0x03
 630:	a1 5f       	subi	r26, 0xF1	; 241
 632:	be 4f       	sbci	r27, 0xFE	; 254
 634:	2d 93       	st	X+, r18
 636:	3c 93       	st	X, r19
        queue_ptr->tail = task_to_add;
 638:	33 83       	std	Z+3, r19	; 0x03
 63a:	22 83       	std	Z+2, r18	; 0x02
{
   if (KernelActive) {
     Disable_Interrupt();
     Cp ->request = NEXT;
	  enqueue(&ready_queue[Cp->priority],Cp);
     Enter_Kernel();
 63c:	bd cd       	rjmp	.-1158   	; 0x1b8 <Enter_Kernel>
 63e:	08 95       	ret

00000640 <Ping>:
void Ping() 
{
	int x;
  for(;;){

	PORTA &= ~(1<<PA1);
 640:	d0 e0       	ldi	r29, 0x00	; 0
 642:	cd e7       	ldi	r28, 0x7D	; 125
 644:	11 98       	cbi	0x02, 1	; 2
 646:	8d 2f       	mov	r24, r29
 648:	9c 2f       	mov	r25, r28
 64a:	01 97       	sbiw	r24, 0x01	; 1
	for(x=0;x<32000;x++);
 64c:	f1 f7       	brne	.-4      	; 0x64a <Ping+0xa>
 64e:	8d 2f       	mov	r24, r29
 650:	9c 2f       	mov	r25, r28
 652:	01 97       	sbiw	r24, 0x01	; 1
	for(x=0;x<32000;x++);
 654:	f1 f7       	brne	.-4      	; 0x652 <Ping+0x12>
 656:	8d 2f       	mov	r24, r29
 658:	9c 2f       	mov	r25, r28
 65a:	01 97       	sbiw	r24, 0x01	; 1
	for(x=0;x<32000;x++);
 65c:	f1 f7       	brne	.-4      	; 0x65a <Ping+0x1a>
 65e:	8d 2f       	mov	r24, r29
 660:	9c 2f       	mov	r25, r28
 662:	01 97       	sbiw	r24, 0x01	; 1
	for(x=0;x<32000;x++);
 664:	f1 f7       	brne	.-4      	; 0x662 <Ping+0x22>
	Task_Next();
 666:	ae df       	rcall	.-164    	; 0x5c4 <Task_Next>
  }
 668:	ed cf       	rjmp	.-38     	; 0x644 <Ping+0x4>

0000066a <Pong>:
	int x;
  for(;;) {
	//LED on

	//LED off
	PORTA |= (1<<PA1); 
 66a:	d0 e0       	ldi	r29, 0x00	; 0
 66c:	cd e7       	ldi	r28, 0x7D	; 125
 66e:	11 9a       	sbi	0x02, 1	; 2
 670:	8d 2f       	mov	r24, r29
 672:	9c 2f       	mov	r25, r28
 674:	01 97       	sbiw	r24, 0x01	; 1
		for(x=0;x<32000;x++);
 676:	f1 f7       	brne	.-4      	; 0x674 <Pong+0xa>
 678:	8d 2f       	mov	r24, r29
 67a:	9c 2f       	mov	r25, r28
 67c:	01 97       	sbiw	r24, 0x01	; 1
		for(x=0;x<32000;x++);
 67e:	f1 f7       	brne	.-4      	; 0x67c <Pong+0x12>
 680:	8d 2f       	mov	r24, r29
 682:	9c 2f       	mov	r25, r28
 684:	01 97       	sbiw	r24, 0x01	; 1
		for(x=0;x<32000;x++);
 686:	f1 f7       	brne	.-4      	; 0x684 <Pong+0x1a>
 688:	8d 2f       	mov	r24, r29
 68a:	9c 2f       	mov	r25, r28
 68c:	01 97       	sbiw	r24, 0x01	; 1
		for(x=0;x<32000;x++);
 68e:	f1 f7       	brne	.-4      	; 0x68c <Pong+0x22>
	
	Task_Next();
 690:	99 df       	rcall	.-206    	; 0x5c4 <Task_Next>
  }
 692:	ed cf       	rjmp	.-38     	; 0x66e <Pong+0x4>

00000694 <__vector_17>:
}


ISR(TIMER1_COMPA_vect)
{
 694:	1f 92       	push	r1
 696:	0f 92       	push	r0
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	0f 92       	push	r0
 69c:	11 24       	eor	r1, r1
	//sleep queue handling
}
 69e:	0f 90       	pop	r0
 6a0:	0f be       	out	0x3f, r0	; 63
 6a2:	0f 90       	pop	r0
 6a4:	1f 90       	pop	r1
 6a6:	18 95       	reti

000006a8 <main>:

int main() 
{
   OS_Init();
 6a8:	d2 de       	rcall	.-604    	; 0x44e <OS_Init>
   Task_Create( Pong , 0, 0 );
 6aa:	40 e0       	ldi	r20, 0x00	; 0
 6ac:	50 e0       	ldi	r21, 0x00	; 0
 6ae:	60 e0       	ldi	r22, 0x00	; 0
 6b0:	85 e3       	ldi	r24, 0x35	; 53
 6b2:	93 e0       	ldi	r25, 0x03	; 3
 6b4:	5b df       	rcall	.-330    	; 0x56c <Task_Create>
   Task_Create( Ping , 0, 0 );
 6b6:	40 e0       	ldi	r20, 0x00	; 0
 6b8:	50 e0       	ldi	r21, 0x00	; 0
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	80 e2       	ldi	r24, 0x20	; 32
 6be:	93 e0       	ldi	r25, 0x03	; 3
 6c0:	55 df       	rcall	.-342    	; 0x56c <Task_Create>
   OS_Start();
 6c2:	05 df       	rcall	.-502    	; 0x4ce <OS_Start>
}
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	08 95       	ret

000006ca <_exit>:
 6ca:	f8 94       	cli

000006cc <__stop_program>:
 6cc:	ff cf       	rjmp	.-2      	; 0x6cc <__stop_program>
