
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000005f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000580  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000874  00800200  00800200  000005f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000668  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005fd  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000028e  00000000  00000000  00000d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000493  00000000  00000000  00000f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000340  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e3  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00001b43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	88 c2       	rjmp	.+1296   	; 0x556 <__vector_17>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	2a e0       	ldi	r18, 0x0A	; 10
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 37       	cpi	r26, 0x74	; 116
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	32 d2       	rcall	.+1124   	; 0x56a <main>
 106:	3a c2       	rjmp	.+1140   	; 0x57c <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
 10a:	0f 92       	push	r0
 10c:	1f 92       	push	r1
 10e:	2f 92       	push	r2
 110:	3f 92       	push	r3
 112:	4f 92       	push	r4
 114:	5f 92       	push	r5
 116:	6f 92       	push	r6
 118:	7f 92       	push	r7
 11a:	8f 92       	push	r8
 11c:	9f 92       	push	r9
 11e:	af 92       	push	r10
 120:	bf 92       	push	r11
 122:	cf 92       	push	r12
 124:	df 92       	push	r13
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
 14a:	0c b7       	in	r16, 0x3c	; 60
 14c:	0f 93       	push	r16
 14e:	ff b7       	in	r31, 0x3f	; 63
 150:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
 152:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 154:	fe b7       	in	r31, 0x3e	; 62
		  in   r16, EIND
 156:	0c b7       	in	r16, 0x3c	; 60
        sts  KernelSp, r30
 158:	e0 93 72 0a 	sts	0x0A72, r30
        sts  KernelSp+1, r31
 15c:	f0 93 73 0a 	sts	0x0A73, r31

        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
 160:	e0 91 70 0a 	lds	r30, 0x0A70
        lds  r31, CurrentSp+1
 164:	f0 91 71 0a 	lds	r31, 0x0A71
        out  SPL, r30
 168:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 16a:	fe bf       	out	0x3e, r31	; 62
		  out  EIND, r16
 16c:	0c bf       	out	0x3c, r16	; 60
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
 16e:	ff 91       	pop	r31
 170:	ff bf       	out	0x3f, r31	; 63
 172:	0f 91       	pop	r16
 174:	0c bf       	out	0x3c, r16	; 60
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	df 90       	pop	r13
 19c:	cf 90       	pop	r12
 19e:	bf 90       	pop	r11
 1a0:	af 90       	pop	r10
 1a2:	9f 90       	pop	r9
 1a4:	8f 90       	pop	r8
 1a6:	7f 90       	pop	r7
 1a8:	6f 90       	pop	r6
 1aa:	5f 90       	pop	r5
 1ac:	4f 90       	pop	r4
 1ae:	3f 90       	pop	r3
 1b0:	2f 90       	pop	r2
 1b2:	1f 90       	pop	r1
 1b4:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
 1b6:	18 95       	reti

000001b8 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
 1b8:	0f 92       	push	r0
 1ba:	1f 92       	push	r1
 1bc:	2f 92       	push	r2
 1be:	3f 92       	push	r3
 1c0:	4f 92       	push	r4
 1c2:	5f 92       	push	r5
 1c4:	6f 92       	push	r6
 1c6:	7f 92       	push	r7
 1c8:	8f 92       	push	r8
 1ca:	9f 92       	push	r9
 1cc:	af 92       	push	r10
 1ce:	bf 92       	push	r11
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
 1f8:	0c b7       	in	r16, 0x3c	; 60
 1fa:	0f 93       	push	r16
 1fc:	ff b7       	in	r31, 0x3f	; 63
 1fe:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
 200:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 202:	fe b7       	in	r31, 0x3e	; 62
		  in   r16, EIND
 204:	0c b7       	in	r16, 0x3c	; 60
        sts  CurrentSp, r30
 206:	e0 93 70 0a 	sts	0x0A70, r30
        sts  CurrentSp+1, r31
 20a:	f0 93 71 0a 	sts	0x0A71, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
 20e:	e0 91 72 0a 	lds	r30, 0x0A72
        lds  r31, KernelSp+1
 212:	f0 91 73 0a 	lds	r31, 0x0A73
        out  SPL, r30
 216:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 218:	fe bf       	out	0x3e, r31	; 62
		  out  EIND, r16
 21a:	0c bf       	out	0x3c, r16	; 60
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
 21c:	ff 91       	pop	r31
 21e:	ff bf       	out	0x3f, r31	; 63
 220:	0f 91       	pop	r16
 222:	0c bf       	out	0x3c, r16	; 60
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	bf 91       	pop	r27
 22e:	af 91       	pop	r26
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	7f 91       	pop	r23
 236:	6f 91       	pop	r22
 238:	5f 91       	pop	r21
 23a:	4f 91       	pop	r20
 23c:	3f 91       	pop	r19
 23e:	2f 91       	pop	r18
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	bf 90       	pop	r11
 24e:	af 90       	pop	r10
 250:	9f 90       	pop	r9
 252:	8f 90       	pop	r8
 254:	7f 90       	pop	r7
 256:	6f 90       	pop	r6
 258:	5f 90       	pop	r5
 25a:	4f 90       	pop	r4
 25c:	3f 90       	pop	r3
 25e:	2f 90       	pop	r2
 260:	1f 90       	pop	r1
 262:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
 264:	08 95       	ret

00000266 <Dispatch>:
       */
	  //find a ready task
	  //in 10 ready queues
	  
	  
   while(Process[NextP].state != READY) {
 266:	2d e0       	ldi	r18, 0x0D	; 13
 268:	31 e0       	ldi	r19, 0x01	; 1
 26a:	0b c0       	rjmp	.+22     	; 0x282 <Dispatch+0x1c>
      NextP = (NextP + 1) % MAXPROCESS;
 26c:	80 91 04 02 	lds	r24, 0x0204
 270:	90 91 05 02 	lds	r25, 0x0205
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	87 70       	andi	r24, 0x07	; 7
 278:	99 27       	eor	r25, r25
 27a:	90 93 05 02 	sts	0x0205, r25
 27e:	80 93 04 02 	sts	0x0204, r24
       */
	  //find a ready task
	  //in 10 ready queues
	  
	  
   while(Process[NextP].state != READY) {
 282:	80 91 04 02 	lds	r24, 0x0204
 286:	90 91 05 02 	lds	r25, 0x0205
 28a:	82 9f       	mul	r24, r18
 28c:	f0 01       	movw	r30, r0
 28e:	83 9f       	mul	r24, r19
 290:	f0 0d       	add	r31, r0
 292:	92 9f       	mul	r25, r18
 294:	f0 0d       	add	r31, r0
 296:	11 24       	eor	r1, r1
 298:	e6 5f       	subi	r30, 0xF6	; 246
 29a:	fc 4f       	sbci	r31, 0xFC	; 252
 29c:	80 81       	ld	r24, Z
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	29 f7       	brne	.-54     	; 0x26c <Dispatch+0x6>
      NextP = (NextP + 1) % MAXPROCESS;
   }

   Cp = &(Process[NextP]);
 2a2:	20 91 04 02 	lds	r18, 0x0204
 2a6:	30 91 05 02 	lds	r19, 0x0205
 2aa:	8d e0       	ldi	r24, 0x0D	; 13
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	28 9f       	mul	r18, r24
 2b0:	f0 01       	movw	r30, r0
 2b2:	29 9f       	mul	r18, r25
 2b4:	f0 0d       	add	r31, r0
 2b6:	38 9f       	mul	r19, r24
 2b8:	f0 0d       	add	r31, r0
 2ba:	11 24       	eor	r1, r1
 2bc:	e8 5f       	subi	r30, 0xF8	; 248
 2be:	fd 4f       	sbci	r31, 0xFD	; 253
 2c0:	f0 93 07 02 	sts	0x0207, r31
 2c4:	e0 93 06 02 	sts	0x0206, r30
   CurrentSp = Cp->sp;
 2c8:	80 81       	ld	r24, Z
 2ca:	91 81       	ldd	r25, Z+1	; 0x01
 2cc:	90 93 71 0a 	sts	0x0A71, r25
 2d0:	80 93 70 0a 	sts	0x0A70, r24
   Cp->state = RUNNING;
 2d4:	ee 5f       	subi	r30, 0xFE	; 254
 2d6:	fe 4f       	sbci	r31, 0xFE	; 254
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	80 83       	st	Z, r24

   NextP = (NextP + 1) % MAXPROCESS;
 2dc:	80 91 04 02 	lds	r24, 0x0204
 2e0:	90 91 05 02 	lds	r25, 0x0205
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	87 70       	andi	r24, 0x07	; 7
 2e8:	99 27       	eor	r25, r25
 2ea:	90 93 05 02 	sts	0x0205, r25
 2ee:	80 93 04 02 	sts	0x0204, r24
	Enable_Interrupt();
 2f2:	78 94       	sei
 2f4:	08 95       	ret

000002f6 <Task_Terminate>:
/**
  * The calling task terminates itself.
  */
void Task_Terminate() 
{
   if (KernelActive) {
 2f6:	80 91 02 02 	lds	r24, 0x0202
 2fa:	90 91 03 02 	lds	r25, 0x0203
 2fe:	89 2b       	or	r24, r25
 300:	51 f0       	breq	.+20     	; 0x316 <Task_Terminate+0x20>
      Disable_Interrupt();
 302:	f8 94       	cli
      Cp -> request = TERMINATE;
 304:	e0 91 06 02 	lds	r30, 0x0206
 308:	f0 91 07 02 	lds	r31, 0x0207
 30c:	eb 5f       	subi	r30, 0xFB	; 251
 30e:	fe 4f       	sbci	r31, 0xFE	; 254
 310:	83 e0       	ldi	r24, 0x03	; 3
 312:	80 83       	st	Z, r24
      Enter_Kernel();
 314:	51 cf       	rjmp	.-350    	; 0x1b8 <Enter_Kernel>
 316:	08 95       	ret

00000318 <Kernel_Create_Task_At>:

   /*----BEGIN of NEW CODE----*/
   //Initialize the workspace (i.e., stack) and PD here!

   //Clear the contents of the workspace
   memset(&(p->workSpace),0,WORKSPACE);
 318:	fc 01       	movw	r30, r24
 31a:	32 96       	adiw	r30, 0x02	; 2
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	31 e0       	ldi	r19, 0x01	; 1
 320:	df 01       	movw	r26, r30
 322:	a9 01       	movw	r20, r18
 324:	1d 92       	st	X+, r1
 326:	41 50       	subi	r20, 0x01	; 1
 328:	50 40       	sbci	r21, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <Kernel_Create_Task_At+0xc>
   //by most significant).  This is because the "return" assembly instructions 
   //(rtn and rti) pop addresses off in BIG ENDIAN (most sig. first, least sig. 
   //second), even though the AT90 is LITTLE ENDIAN machine.

   //Store terminate at the bottom of stack to protect against stack underrun.
   *(unsigned char *)sp-- = ((unsigned int)Task_Terminate) & 0xff;
 32c:	e1 50       	subi	r30, 0x01	; 1
 32e:	ff 4f       	sbci	r31, 0xFF	; 255
 330:	2b e7       	ldi	r18, 0x7B	; 123
 332:	31 e0       	ldi	r19, 0x01	; 1
 334:	20 83       	st	Z, r18
   *(unsigned char *)sp-- = (((unsigned int)Task_Terminate) >> 8) & 0xff;
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	30 83       	st	Z, r19
	*(unsigned char *)sp-- = 0x00;
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	10 82       	st	Z, r1

   //Place return address of function at bottom of stack
   *(unsigned char *)sp-- = ((unsigned int)f) & 0xff;
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	60 83       	st	Z, r22
   *(unsigned char *)sp-- = (((unsigned int)f) >> 8) & 0xff;
 342:	31 97       	sbiw	r30, 0x01	; 1
 344:	70 83       	st	Z, r23
	*(unsigned char *)sp-- = 0x00;
 346:	31 97       	sbiw	r30, 0x01	; 1
 348:	10 82       	st	Z, r1

	sp = sp - 34;
 34a:	9c 01       	movw	r18, r24
 34c:	27 52       	subi	r18, 0x27	; 39
 34e:	3f 4f       	sbci	r19, 0xFF	; 255
   p->sp = sp;		/* stack pointer into the "workSpace" */
 350:	dc 01       	movw	r26, r24
 352:	2d 93       	st	X+, r18
 354:	3c 93       	st	X, r19
   p->code = f;		/* function to be executed as a task */
 356:	37 96       	adiw	r30, 0x07	; 7
 358:	60 83       	st	Z, r22
 35a:	71 83       	std	Z+1, r23	; 0x01
   p->request = NONE;
 35c:	32 96       	adiw	r30, 0x02	; 2
 35e:	10 82       	st	Z, r1
   /*----END of NEW CODE----*/
   p->state = READY;
 360:	33 97       	sbiw	r30, 0x03	; 3
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 83       	st	Z, r24
 366:	08 95       	ret

00000368 <Kernel_Create_Task>:

/**
  *  Create a new task
  */
static void Kernel_Create_Task( voidfuncptr f ) 
{
 368:	bc 01       	movw	r22, r24
   int x;

   if (Tasks == MAXPROCESS) return;  /* Too many task! */
 36a:	80 91 00 02 	lds	r24, 0x0200
 36e:	90 91 01 02 	lds	r25, 0x0201
 372:	08 97       	sbiw	r24, 0x08	; 8
 374:	51 f1       	breq	.+84     	; 0x3ca <Kernel_Create_Task+0x62>

   /* find a DEAD PD that we can use  */
   for (x = 0; x < MAXPROCESS; x++) {
       if (Process[x].state == DEAD) break;
 376:	80 91 0a 03 	lds	r24, 0x030A
 37a:	88 23       	and	r24, r24
 37c:	79 f0       	breq	.+30     	; 0x39c <Kernel_Create_Task+0x34>
 37e:	e7 e1       	ldi	r30, 0x17	; 23
 380:	f4 e0       	ldi	r31, 0x04	; 4
   int x;

   if (Tasks == MAXPROCESS) return;  /* Too many task! */

   /* find a DEAD PD that we can use  */
   for (x = 0; x < MAXPROCESS; x++) {
 382:	21 e0       	ldi	r18, 0x01	; 1
 384:	30 e0       	ldi	r19, 0x00	; 0
       if (Process[x].state == DEAD) break;
 386:	90 81       	ld	r25, Z
 388:	99 23       	and	r25, r25
 38a:	51 f0       	breq	.+20     	; 0x3a0 <Kernel_Create_Task+0x38>
   int x;

   if (Tasks == MAXPROCESS) return;  /* Too many task! */

   /* find a DEAD PD that we can use  */
   for (x = 0; x < MAXPROCESS; x++) {
 38c:	2f 5f       	subi	r18, 0xFF	; 255
 38e:	3f 4f       	sbci	r19, 0xFF	; 255
 390:	e3 5f       	subi	r30, 0xF3	; 243
 392:	fe 4f       	sbci	r31, 0xFE	; 254
 394:	28 30       	cpi	r18, 0x08	; 8
 396:	31 05       	cpc	r19, r1
 398:	b1 f7       	brne	.-20     	; 0x386 <Kernel_Create_Task+0x1e>
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <Kernel_Create_Task+0x38>
       if (Process[x].state == DEAD) break;
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
   }

   ++Tasks;
 3a0:	80 91 00 02 	lds	r24, 0x0200
 3a4:	90 91 01 02 	lds	r25, 0x0201
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	90 93 01 02 	sts	0x0201, r25
 3ae:	80 93 00 02 	sts	0x0200, r24
   Kernel_Create_Task_At( &(Process[x]), f );
 3b2:	4d e0       	ldi	r20, 0x0D	; 13
 3b4:	51 e0       	ldi	r21, 0x01	; 1
 3b6:	24 9f       	mul	r18, r20
 3b8:	c0 01       	movw	r24, r0
 3ba:	25 9f       	mul	r18, r21
 3bc:	90 0d       	add	r25, r0
 3be:	34 9f       	mul	r19, r20
 3c0:	90 0d       	add	r25, r0
 3c2:	11 24       	eor	r1, r1
 3c4:	88 5f       	subi	r24, 0xF8	; 248
 3c6:	9d 4f       	sbci	r25, 0xFD	; 253
 3c8:	a7 cf       	rjmp	.-178    	; 0x318 <Kernel_Create_Task_At>
 3ca:	08 95       	ret

000003cc <set_timer>:
    } 
}

void set_timer()
{
	TCCR1A = 0;
 3cc:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;
 3d0:	e1 e8       	ldi	r30, 0x81	; 129
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	10 82       	st	Z, r1
	//Set to CTC (mode 4)
	TCCR1B |= (1<<WGM32);
 3d6:	80 81       	ld	r24, Z
 3d8:	88 60       	ori	r24, 0x08	; 8
 3da:	80 83       	st	Z, r24
	
	//Set prescaler /8
	TCCR1B |= (1<<CS31);
 3dc:	80 81       	ld	r24, Z
 3de:	82 60       	ori	r24, 0x02	; 2
 3e0:	80 83       	st	Z, r24
	
	//Set TOP value (0.01 seconds)
	OCR1A = 20000;
 3e2:	80 e2       	ldi	r24, 0x20	; 32
 3e4:	9e e4       	ldi	r25, 0x4E	; 78
 3e6:	90 93 89 00 	sts	0x0089, r25
 3ea:	80 93 88 00 	sts	0x0088, r24
	
	//Enable interupt A for timer 3.
	TIMSK1 |= (1<<OCIE1A);
 3ee:	ef e6       	ldi	r30, 0x6F	; 111
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	82 60       	ori	r24, 0x02	; 2
 3f6:	80 83       	st	Z, r24
 3f8:	08 95       	ret

000003fa <OS_Init>:
  * system calls.
  */
void OS_Init() 
{

	DDRA= (1<<PA0);
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	81 b9       	out	0x01, r24	; 1
	DDRA = (1<<PA1);
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	81 b9       	out	0x01, r24	; 1
	PORTA &= ~(1<<PA0);
 402:	10 98       	cbi	0x02, 0	; 2
	PORTA &= ~(1<<PA1);
 404:	11 98       	cbi	0x02, 1	; 2
	
	
	set_timer();
 406:	e2 df       	rcall	.-60     	; 0x3cc <set_timer>
	
   int x;

   Tasks = 0;
 408:	10 92 01 02 	sts	0x0201, r1
 40c:	10 92 00 02 	sts	0x0200, r1
   KernelActive = 0;
 410:	10 92 03 02 	sts	0x0203, r1
 414:	10 92 02 02 	sts	0x0202, r1
   NextP = 0;
 418:	10 92 05 02 	sts	0x0205, r1
 41c:	10 92 04 02 	sts	0x0204, r1
 420:	08 95       	ret

00000422 <OS_Start>:

/**
  * This function starts the RTOS after creating a few tasks.
  */
void OS_Start() 
{   
 422:	cf 93       	push	r28
   if ( (! KernelActive) && (Tasks > 0)) {
 424:	80 91 02 02 	lds	r24, 0x0202
 428:	90 91 03 02 	lds	r25, 0x0203
 42c:	89 2b       	or	r24, r25
 42e:	09 f0       	breq	.+2      	; 0x432 <OS_Start+0x10>
 430:	3e c0       	rjmp	.+124    	; 0x4ae <OS_Start+0x8c>
 432:	80 91 00 02 	lds	r24, 0x0200
 436:	90 91 01 02 	lds	r25, 0x0201
 43a:	89 2b       	or	r24, r25
 43c:	c1 f1       	breq	.+112    	; 0x4ae <OS_Start+0x8c>
       Disable_Interrupt();
 43e:	f8 94       	cli
      /* we may have to initialize the interrupt vector for Enter_Kernel() here. */

      /* here we go...  */
      KernelActive = 1;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	90 93 03 02 	sts	0x0203, r25
 448:	80 93 02 02 	sts	0x0202, r24
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() 
{
   Dispatch();  /* select a new task to run */
 44c:	0c df       	rcall	.-488    	; 0x266 <Dispatch>
       case CREATE:
           Kernel_Create_Task( Cp->code );
           break;
       case NEXT:
		 //Enqueue appropriately
		   Cp->state = READY;
 44e:	c1 e0       	ldi	r28, 0x01	; 1
   Dispatch();  /* select a new task to run */

   while(1) {

       /* activate this newly selected task */
       CurrentSp = Cp->sp;
 450:	e0 91 06 02 	lds	r30, 0x0206
 454:	f0 91 07 02 	lds	r31, 0x0207
 458:	80 81       	ld	r24, Z
 45a:	91 81       	ldd	r25, Z+1	; 0x01
 45c:	90 93 71 0a 	sts	0x0A71, r25
 460:	80 93 70 0a 	sts	0x0A70, r24
       Exit_Kernel();    /* or CSwitch() */
 464:	52 de       	rcall	.-860    	; 0x10a <CSwitch>

       /* if this task makes a system call, it will return to here! */

        /* save the Cp's stack pointer */
       Cp->sp = CurrentSp;
 466:	e0 91 06 02 	lds	r30, 0x0206
 46a:	f0 91 07 02 	lds	r31, 0x0207
 46e:	80 91 70 0a 	lds	r24, 0x0A70
 472:	90 91 71 0a 	lds	r25, 0x0A71
 476:	91 83       	std	Z+1, r25	; 0x01
 478:	80 83       	st	Z, r24

       switch(Cp->request){
 47a:	df 01       	movw	r26, r30
 47c:	ab 5f       	subi	r26, 0xFB	; 251
 47e:	be 4f       	sbci	r27, 0xFE	; 254
 480:	8c 91       	ld	r24, X
 482:	82 30       	cpi	r24, 0x02	; 2
 484:	51 f0       	breq	.+20     	; 0x49a <OS_Start+0x78>
 486:	83 30       	cpi	r24, 0x03	; 3
 488:	69 f0       	breq	.+26     	; 0x4a4 <OS_Start+0x82>
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	09 f7       	brne	.-62     	; 0x450 <OS_Start+0x2e>
       case CREATE:
           Kernel_Create_Task( Cp->code );
 48e:	ed 5f       	subi	r30, 0xFD	; 253
 490:	fe 4f       	sbci	r31, 0xFE	; 254
 492:	80 81       	ld	r24, Z
 494:	91 81       	ldd	r25, Z+1	; 0x01
 496:	68 df       	rcall	.-304    	; 0x368 <Kernel_Create_Task>
 498:	db cf       	rjmp	.-74     	; 0x450 <OS_Start+0x2e>
           break;
       case NEXT:
		 //Enqueue appropriately
		   Cp->state = READY;
 49a:	ee 5f       	subi	r30, 0xFE	; 254
 49c:	fe 4f       	sbci	r31, 0xFE	; 254
 49e:	c0 83       	st	Z, r28
			Dispatch();
 4a0:	e2 de       	rcall	.-572    	; 0x266 <Dispatch>
 4a2:	d6 cf       	rjmp	.-84     	; 0x450 <OS_Start+0x2e>
	   case NONE:
	//shouldn't happen
          break;
       case TERMINATE:
          /* deallocate all resources used by this task */
          Cp->state = DEAD;
 4a4:	ee 5f       	subi	r30, 0xFE	; 254
 4a6:	fe 4f       	sbci	r31, 0xFE	; 254
 4a8:	10 82       	st	Z, r1
          Dispatch();
 4aa:	dd de       	rcall	.-582    	; 0x266 <Dispatch>
 4ac:	d1 cf       	rjmp	.-94     	; 0x450 <OS_Start+0x2e>
      /* here we go...  */
      KernelActive = 1;
      Next_Kernel_Request();
      /* NEVER RETURNS!!! */
   }
}
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

000004b2 <Task_Create>:
  * each task gives up its share of the processor voluntarily by calling
  * Task_Next().
  */
void Task_Create( voidfuncptr f)
{
   if (KernelActive ) {
 4b2:	20 91 02 02 	lds	r18, 0x0202
 4b6:	30 91 03 02 	lds	r19, 0x0203
 4ba:	23 2b       	or	r18, r19
 4bc:	79 f0       	breq	.+30     	; 0x4dc <Task_Create+0x2a>
     Disable_Interrupt();
 4be:	f8 94       	cli
     Cp ->request = CREATE;
 4c0:	20 91 06 02 	lds	r18, 0x0206
 4c4:	30 91 07 02 	lds	r19, 0x0207
 4c8:	f9 01       	movw	r30, r18
 4ca:	eb 5f       	subi	r30, 0xFB	; 251
 4cc:	fe 4f       	sbci	r31, 0xFE	; 254
 4ce:	41 e0       	ldi	r20, 0x01	; 1
 4d0:	40 83       	st	Z, r20
     Cp->code = f;
 4d2:	32 97       	sbiw	r30, 0x02	; 2
 4d4:	91 83       	std	Z+1, r25	; 0x01
 4d6:	80 83       	st	Z, r24
     Enter_Kernel();
 4d8:	6f ce       	rjmp	.-802    	; 0x1b8 <Enter_Kernel>
 4da:	08 95       	ret
   } else { 
      /* call the RTOS function directly */
      Kernel_Create_Task( f );
 4dc:	45 cf       	rjmp	.-374    	; 0x368 <Kernel_Create_Task>
 4de:	08 95       	ret

000004e0 <Task_Next>:
/**
  * The calling task gives up its share of the processor voluntarily.
  */
void Task_Next() 
{
   if (KernelActive) {
 4e0:	80 91 02 02 	lds	r24, 0x0202
 4e4:	90 91 03 02 	lds	r25, 0x0203
 4e8:	89 2b       	or	r24, r25
 4ea:	51 f0       	breq	.+20     	; 0x500 <Task_Next+0x20>
     Disable_Interrupt();
 4ec:	f8 94       	cli
     Cp ->request = NEXT;
 4ee:	e0 91 06 02 	lds	r30, 0x0206
 4f2:	f0 91 07 02 	lds	r31, 0x0207
 4f6:	eb 5f       	subi	r30, 0xFB	; 251
 4f8:	fe 4f       	sbci	r31, 0xFE	; 254
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	80 83       	st	Z, r24
     Enter_Kernel();
 4fe:	5c ce       	rjmp	.-840    	; 0x1b8 <Enter_Kernel>
 500:	08 95       	ret

00000502 <Ping>:
void Ping() 
{
	int x;
  for(;;){

	PORTA &= ~(1<<PA1);
 502:	d0 e0       	ldi	r29, 0x00	; 0
 504:	cd e7       	ldi	r28, 0x7D	; 125
 506:	11 98       	cbi	0x02, 1	; 2
 508:	8d 2f       	mov	r24, r29
 50a:	9c 2f       	mov	r25, r28
 50c:	01 97       	sbiw	r24, 0x01	; 1
	for(x=0;x<32000;x++);
 50e:	f1 f7       	brne	.-4      	; 0x50c <Ping+0xa>
 510:	8d 2f       	mov	r24, r29
 512:	9c 2f       	mov	r25, r28
 514:	01 97       	sbiw	r24, 0x01	; 1
	for(x=0;x<32000;x++);
 516:	f1 f7       	brne	.-4      	; 0x514 <Ping+0x12>
 518:	8d 2f       	mov	r24, r29
 51a:	9c 2f       	mov	r25, r28
 51c:	01 97       	sbiw	r24, 0x01	; 1
	for(x=0;x<32000;x++);
 51e:	f1 f7       	brne	.-4      	; 0x51c <Ping+0x1a>
 520:	8d 2f       	mov	r24, r29
 522:	9c 2f       	mov	r25, r28
 524:	01 97       	sbiw	r24, 0x01	; 1
	for(x=0;x<32000;x++);
 526:	f1 f7       	brne	.-4      	; 0x524 <Ping+0x22>
	Task_Next();
 528:	db df       	rcall	.-74     	; 0x4e0 <Task_Next>
  }
 52a:	ed cf       	rjmp	.-38     	; 0x506 <Ping+0x4>

0000052c <Pong>:
	int x;
  for(;;) {
	//LED on

	//LED off
	PORTA |= (1<<PA1); 
 52c:	d0 e0       	ldi	r29, 0x00	; 0
 52e:	cd e7       	ldi	r28, 0x7D	; 125
 530:	11 9a       	sbi	0x02, 1	; 2
 532:	8d 2f       	mov	r24, r29
 534:	9c 2f       	mov	r25, r28
 536:	01 97       	sbiw	r24, 0x01	; 1
		for(x=0;x<32000;x++);
 538:	f1 f7       	brne	.-4      	; 0x536 <Pong+0xa>
 53a:	8d 2f       	mov	r24, r29
 53c:	9c 2f       	mov	r25, r28
 53e:	01 97       	sbiw	r24, 0x01	; 1
		for(x=0;x<32000;x++);
 540:	f1 f7       	brne	.-4      	; 0x53e <Pong+0x12>
 542:	8d 2f       	mov	r24, r29
 544:	9c 2f       	mov	r25, r28
 546:	01 97       	sbiw	r24, 0x01	; 1
		for(x=0;x<32000;x++);
 548:	f1 f7       	brne	.-4      	; 0x546 <Pong+0x1a>
 54a:	8d 2f       	mov	r24, r29
 54c:	9c 2f       	mov	r25, r28
 54e:	01 97       	sbiw	r24, 0x01	; 1
		for(x=0;x<32000;x++);
 550:	f1 f7       	brne	.-4      	; 0x54e <Pong+0x22>
	
	Task_Next();
 552:	c6 df       	rcall	.-116    	; 0x4e0 <Task_Next>
  }
 554:	ed cf       	rjmp	.-38     	; 0x530 <Pong+0x4>

00000556 <__vector_17>:
}


ISR(TIMER1_COMPA_vect)
{
 556:	1f 92       	push	r1
 558:	0f 92       	push	r0
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	0f 92       	push	r0
 55e:	11 24       	eor	r1, r1
	//sleep queue handling
}
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <main>:

void main() 
{
   OS_Init();
 56a:	47 df       	rcall	.-370    	; 0x3fa <OS_Init>
   Task_Create( Pong );
 56c:	86 e9       	ldi	r24, 0x96	; 150
 56e:	92 e0       	ldi	r25, 0x02	; 2
 570:	a0 df       	rcall	.-192    	; 0x4b2 <Task_Create>
   Task_Create( Ping );
 572:	81 e8       	ldi	r24, 0x81	; 129
 574:	92 e0       	ldi	r25, 0x02	; 2
 576:	9d df       	rcall	.-198    	; 0x4b2 <Task_Create>
   OS_Start();
 578:	54 cf       	rjmp	.-344    	; 0x422 <OS_Start>
 57a:	08 95       	ret

0000057c <_exit>:
 57c:	f8 94       	cli

0000057e <__stop_program>:
 57e:	ff cf       	rjmp	.-2      	; 0x57e <__stop_program>
