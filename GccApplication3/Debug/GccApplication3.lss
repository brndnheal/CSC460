
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b3c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001179  00800200  00800200  00000bb0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000c20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e08  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000507  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009cb  00000000  00000000  0000203f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00002a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a5  00000000  00000000  00002c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac3  00000000  00000000  00003129  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003bec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
   2:	00 00       	nop
   4:	89 c0       	rjmp	.+274    	; 0x118 <__bad_interrupt>
   6:	00 00       	nop
   8:	87 c0       	rjmp	.+270    	; 0x118 <__bad_interrupt>
   a:	00 00       	nop
   c:	85 c0       	rjmp	.+266    	; 0x118 <__bad_interrupt>
   e:	00 00       	nop
  10:	83 c0       	rjmp	.+262    	; 0x118 <__bad_interrupt>
  12:	00 00       	nop
  14:	81 c0       	rjmp	.+258    	; 0x118 <__bad_interrupt>
  16:	00 00       	nop
  18:	7f c0       	rjmp	.+254    	; 0x118 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7d c0       	rjmp	.+250    	; 0x118 <__bad_interrupt>
  1e:	00 00       	nop
  20:	7b c0       	rjmp	.+246    	; 0x118 <__bad_interrupt>
  22:	00 00       	nop
  24:	79 c0       	rjmp	.+242    	; 0x118 <__bad_interrupt>
  26:	00 00       	nop
  28:	77 c0       	rjmp	.+238    	; 0x118 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	75 c0       	rjmp	.+234    	; 0x118 <__bad_interrupt>
  2e:	00 00       	nop
  30:	73 c0       	rjmp	.+230    	; 0x118 <__bad_interrupt>
  32:	00 00       	nop
  34:	71 c0       	rjmp	.+226    	; 0x118 <__bad_interrupt>
  36:	00 00       	nop
  38:	6f c0       	rjmp	.+222    	; 0x118 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6d c0       	rjmp	.+218    	; 0x118 <__bad_interrupt>
  3e:	00 00       	nop
  40:	6b c0       	rjmp	.+214    	; 0x118 <__bad_interrupt>
  42:	00 00       	nop
  44:	fe c4       	rjmp	.+2556   	; 0xa42 <__vector_17>
  46:	00 00       	nop
  48:	67 c0       	rjmp	.+206    	; 0x118 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	65 c0       	rjmp	.+202    	; 0x118 <__bad_interrupt>
  4e:	00 00       	nop
  50:	63 c0       	rjmp	.+198    	; 0x118 <__bad_interrupt>
  52:	00 00       	nop
  54:	61 c0       	rjmp	.+194    	; 0x118 <__bad_interrupt>
  56:	00 00       	nop
  58:	5f c0       	rjmp	.+190    	; 0x118 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5d c0       	rjmp	.+186    	; 0x118 <__bad_interrupt>
  5e:	00 00       	nop
  60:	5b c0       	rjmp	.+182    	; 0x118 <__bad_interrupt>
  62:	00 00       	nop
  64:	59 c0       	rjmp	.+178    	; 0x118 <__bad_interrupt>
  66:	00 00       	nop
  68:	57 c0       	rjmp	.+174    	; 0x118 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	55 c0       	rjmp	.+170    	; 0x118 <__bad_interrupt>
  6e:	00 00       	nop
  70:	53 c0       	rjmp	.+166    	; 0x118 <__bad_interrupt>
  72:	00 00       	nop
  74:	51 c0       	rjmp	.+162    	; 0x118 <__bad_interrupt>
  76:	00 00       	nop
  78:	4f c0       	rjmp	.+158    	; 0x118 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4d c0       	rjmp	.+154    	; 0x118 <__bad_interrupt>
  7e:	00 00       	nop
  80:	4b c0       	rjmp	.+150    	; 0x118 <__bad_interrupt>
  82:	00 00       	nop
  84:	49 c0       	rjmp	.+146    	; 0x118 <__bad_interrupt>
  86:	00 00       	nop
  88:	47 c0       	rjmp	.+142    	; 0x118 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	45 c0       	rjmp	.+138    	; 0x118 <__bad_interrupt>
  8e:	00 00       	nop
  90:	43 c0       	rjmp	.+134    	; 0x118 <__bad_interrupt>
  92:	00 00       	nop
  94:	41 c0       	rjmp	.+130    	; 0x118 <__bad_interrupt>
  96:	00 00       	nop
  98:	3f c0       	rjmp	.+126    	; 0x118 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3d c0       	rjmp	.+122    	; 0x118 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3b c0       	rjmp	.+118    	; 0x118 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	39 c0       	rjmp	.+114    	; 0x118 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	37 c0       	rjmp	.+110    	; 0x118 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	35 c0       	rjmp	.+106    	; 0x118 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	33 c0       	rjmp	.+102    	; 0x118 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	31 c0       	rjmp	.+98     	; 0x118 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2f c0       	rjmp	.+94     	; 0x118 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2d c0       	rjmp	.+90     	; 0x118 <__bad_interrupt>
  be:	00 00       	nop
  c0:	2b c0       	rjmp	.+86     	; 0x118 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	29 c0       	rjmp	.+82     	; 0x118 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	27 c0       	rjmp	.+78     	; 0x118 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	25 c0       	rjmp	.+74     	; 0x118 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	23 c0       	rjmp	.+70     	; 0x118 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	21 c0       	rjmp	.+66     	; 0x118 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1f c0       	rjmp	.+62     	; 0x118 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1d c0       	rjmp	.+58     	; 0x118 <__bad_interrupt>
  de:	00 00       	nop
  e0:	1b c0       	rjmp	.+54     	; 0x118 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	c0 03       	fmuls	r20, r16
  e6:	d0 03       	fmuls	r21, r16
  e8:	fe 03       	fmulsu	r23, r22
  ea:	08 04       	cpc	r0, r8
  ec:	e6 03       	fmuls	r22, r22
  ee:	d5 03       	fmuls	r21, r21
  f0:	fc 03       	fmulsu	r23, r20
  f2:	b7 04       	cpc	r11, r7

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	d1 e2       	ldi	r29, 0x21	; 33
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	0c bf       	out	0x3c, r16	; 60

00000104 <__do_clear_bss>:
 104:	23 e1       	ldi	r18, 0x13	; 19
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b2 e0       	ldi	r27, 0x02	; 2
 10a:	01 c0       	rjmp	.+2      	; 0x10e <.do_clear_bss_start>

0000010c <.do_clear_bss_loop>:
 10c:	1d 92       	st	X+, r1

0000010e <.do_clear_bss_start>:
 10e:	a9 37       	cpi	r26, 0x79	; 121
 110:	b2 07       	cpc	r27, r18
 112:	e1 f7       	brne	.-8      	; 0x10c <.do_clear_bss_loop>
 114:	ea d4       	rcall	.+2516   	; 0xaea <main>
 116:	10 c5       	rjmp	.+2592   	; 0xb38 <_exit>

00000118 <__bad_interrupt>:
 118:	73 cf       	rjmp	.-282    	; 0x0 <__vectors>

0000011a <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
 11a:	0f 92       	push	r0
 11c:	1f 92       	push	r1
 11e:	2f 92       	push	r2
 120:	3f 92       	push	r3
 122:	4f 92       	push	r4
 124:	5f 92       	push	r5
 126:	6f 92       	push	r6
 128:	7f 92       	push	r7
 12a:	8f 92       	push	r8
 12c:	9f 92       	push	r9
 12e:	af 92       	push	r10
 130:	bf 92       	push	r11
 132:	cf 92       	push	r12
 134:	df 92       	push	r13
 136:	ef 92       	push	r14
 138:	ff 92       	push	r15
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
 15a:	0c b7       	in	r16, 0x3c	; 60
 15c:	0f 93       	push	r16
 15e:	ff b7       	in	r31, 0x3f	; 63
 160:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
 162:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 164:	fe b7       	in	r31, 0x3e	; 62
		  in   r16, EIND
 166:	0c b7       	in	r16, 0x3c	; 60
        sts  KernelSp, r30
 168:	e0 93 77 13 	sts	0x1377, r30
        sts  KernelSp+1, r31
 16c:	f0 93 78 13 	sts	0x1378, r31

        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
 170:	e0 91 75 13 	lds	r30, 0x1375
        lds  r31, CurrentSp+1
 174:	f0 91 76 13 	lds	r31, 0x1376
        out  SPL, r30
 178:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 17a:	fe bf       	out	0x3e, r31	; 62
		  out  EIND, r16
 17c:	0c bf       	out	0x3c, r16	; 60
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
 17e:	ff 91       	pop	r31
 180:	ff bf       	out	0x3f, r31	; 63
 182:	0f 91       	pop	r16
 184:	0c bf       	out	0x3c, r16	; 60
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	bf 91       	pop	r27
 190:	af 91       	pop	r26
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	7f 91       	pop	r23
 198:	6f 91       	pop	r22
 19a:	5f 91       	pop	r21
 19c:	4f 91       	pop	r20
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	df 90       	pop	r13
 1ac:	cf 90       	pop	r12
 1ae:	bf 90       	pop	r11
 1b0:	af 90       	pop	r10
 1b2:	9f 90       	pop	r9
 1b4:	8f 90       	pop	r8
 1b6:	7f 90       	pop	r7
 1b8:	6f 90       	pop	r6
 1ba:	5f 90       	pop	r5
 1bc:	4f 90       	pop	r4
 1be:	3f 90       	pop	r3
 1c0:	2f 90       	pop	r2
 1c2:	1f 90       	pop	r1
 1c4:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
 1c6:	18 95       	reti

000001c8 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
 1c8:	0f 92       	push	r0
 1ca:	1f 92       	push	r1
 1cc:	2f 92       	push	r2
 1ce:	3f 92       	push	r3
 1d0:	4f 92       	push	r4
 1d2:	5f 92       	push	r5
 1d4:	6f 92       	push	r6
 1d6:	7f 92       	push	r7
 1d8:	8f 92       	push	r8
 1da:	9f 92       	push	r9
 1dc:	af 92       	push	r10
 1de:	bf 92       	push	r11
 1e0:	cf 92       	push	r12
 1e2:	df 92       	push	r13
 1e4:	ef 92       	push	r14
 1e6:	ff 92       	push	r15
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	4f 93       	push	r20
 1f2:	5f 93       	push	r21
 1f4:	6f 93       	push	r22
 1f6:	7f 93       	push	r23
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
 208:	0c b7       	in	r16, 0x3c	; 60
 20a:	0f 93       	push	r16
 20c:	ff b7       	in	r31, 0x3f	; 63
 20e:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
 210:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 212:	fe b7       	in	r31, 0x3e	; 62
		in   r16, EIND
 214:	0c b7       	in	r16, 0x3c	; 60
        sts  CurrentSp, r30
 216:	e0 93 75 13 	sts	0x1375, r30
        sts  CurrentSp+1, r31
 21a:	f0 93 76 13 	sts	0x1376, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
 21e:	e0 91 77 13 	lds	r30, 0x1377
        lds  r31, KernelSp+1
 222:	f0 91 78 13 	lds	r31, 0x1378
        out  SPL, r30
 226:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 228:	fe bf       	out	0x3e, r31	; 62
		out  EIND, r16
 22a:	0c bf       	out	0x3c, r16	; 60
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
 22c:	ff 91       	pop	r31
 22e:	ff bf       	out	0x3f, r31	; 63
 230:	0f 91       	pop	r16
 232:	0c bf       	out	0x3c, r16	; 60
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	7f 91       	pop	r23
 246:	6f 91       	pop	r22
 248:	5f 91       	pop	r21
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	ff 90       	pop	r15
 256:	ef 90       	pop	r14
 258:	df 90       	pop	r13
 25a:	cf 90       	pop	r12
 25c:	bf 90       	pop	r11
 25e:	af 90       	pop	r10
 260:	9f 90       	pop	r9
 262:	8f 90       	pop	r8
 264:	7f 90       	pop	r7
 266:	6f 90       	pop	r6
 268:	5f 90       	pop	r5
 26a:	4f 90       	pop	r4
 26c:	3f 90       	pop	r3
 26e:	2f 90       	pop	r2
 270:	1f 90       	pop	r1
 272:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
 274:	08 95       	ret

00000276 <Ping>:


void Ping(){
	int x;
	for(;;) {
		PORTA &= ~(1<<PA1); 
 276:	11 98       	cbi	0x02, 1	; 2
		Task_Sleep(500);
 278:	84 ef       	ldi	r24, 0xF4	; 244
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	cd d3       	rcall	.+1946   	; 0xa18 <Task_Sleep>
	}
 27e:	fb cf       	rjmp	.-10     	; 0x276 <Ping>

00000280 <Pong>:

void Pong(){
	int x;
	PID p;
	for(;;) {
		PORTA |= (1<<PA1);
 280:	11 9a       	sbi	0x02, 1	; 2
		Task_Sleep(500);
 282:	84 ef       	ldi	r24, 0xF4	; 244
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	c8 d3       	rcall	.+1936   	; 0xa18 <Task_Sleep>
	}
 288:	fb cf       	rjmp	.-10     	; 0x280 <Pong>

0000028a <Ping2>:
}

void Ping2(){
	int x;
	for(;;) {
		PORTA &= ~(1<<PA0); 
 28a:	10 98       	cbi	0x02, 0	; 2
		Task_Sleep(500);
 28c:	84 ef       	ldi	r24, 0xF4	; 244
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	c3 d3       	rcall	.+1926   	; 0xa18 <Task_Sleep>
	}
 292:	fb cf       	rjmp	.-10     	; 0x28a <Ping2>

00000294 <Pong2>:

void Pong2(){
	int x;
	PID p;
	for(;;) {
		PORTA |= (1<<PA0);
 294:	10 9a       	sbi	0x02, 0	; 2
		Task_Sleep(500);
 296:	84 ef       	ldi	r24, 0xF4	; 244
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	be d3       	rcall	.+1916   	; 0xa18 <Task_Sleep>
	}
 29c:	fb cf       	rjmp	.-10     	; 0x294 <Pong2>

0000029e <a_main>:
}

void a_main(){
	Task_Create(Ping,5,0);
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	65 e0       	ldi	r22, 0x05	; 5
 2a4:	8b e3       	ldi	r24, 0x3B	; 59
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	97 d3       	rcall	.+1838   	; 0x9d8 <Task_Create>
	Task_Create(Pong,5,0);
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	65 e0       	ldi	r22, 0x05	; 5
 2b0:	80 e4       	ldi	r24, 0x40	; 64
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	91 d3       	rcall	.+1826   	; 0x9d8 <Task_Create>
	Task_Create(Ping2,4,0);
 2b6:	40 e0       	ldi	r20, 0x00	; 0
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	64 e0       	ldi	r22, 0x04	; 4
 2bc:	85 e4       	ldi	r24, 0x45	; 69
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	8b d3       	rcall	.+1814   	; 0x9d8 <Task_Create>
	Task_Create(Pong2,4,0);
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	64 e0       	ldi	r22, 0x04	; 4
 2c8:	8a e4       	ldi	r24, 0x4A	; 74
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	85 d3       	rcall	.+1802   	; 0x9d8 <Task_Create>
	Task_Terminate();
 2ce:	89 c0       	rjmp	.+274    	; 0x3e2 <Task_Terminate>
 2d0:	08 95       	ret

000002d2 <enqueue>:
			break;
		}
	}
	Disable_Interrupt();
	Cp ->request = RESUME;
	Enter_Kernel();
 2d2:	fc 01       	movw	r30, r24
 2d4:	db 01       	movw	r26, r22
 2d6:	af 5e       	subi	r26, 0xEF	; 239
 2d8:	be 4f       	sbci	r27, 0xFE	; 254
 2da:	11 96       	adiw	r26, 0x01	; 1
 2dc:	1c 92       	st	X, r1
 2de:	1e 92       	st	-X, r1
 2e0:	80 81       	ld	r24, Z
 2e2:	91 81       	ldd	r25, Z+1	; 0x01
 2e4:	89 2b       	or	r24, r25
 2e6:	29 f4       	brne	.+10     	; 0x2f2 <enqueue+0x20>
 2e8:	71 83       	std	Z+1, r23	; 0x01
 2ea:	60 83       	st	Z, r22
 2ec:	73 83       	std	Z+3, r23	; 0x03
 2ee:	62 83       	std	Z+2, r22	; 0x02
 2f0:	08 95       	ret
 2f2:	a2 81       	ldd	r26, Z+2	; 0x02
 2f4:	b3 81       	ldd	r27, Z+3	; 0x03
 2f6:	af 5e       	subi	r26, 0xEF	; 239
 2f8:	be 4f       	sbci	r27, 0xFE	; 254
 2fa:	11 96       	adiw	r26, 0x01	; 1
 2fc:	7c 93       	st	X, r23
 2fe:	6e 93       	st	-X, r22
 300:	73 83       	std	Z+3, r23	; 0x03
 302:	62 83       	std	Z+2, r22	; 0x02
 304:	08 95       	ret

00000306 <Kernel_Create_Task>:
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	20 91 07 02 	lds	r18, 0x0207
 312:	30 91 08 02 	lds	r19, 0x0208
 316:	20 31       	cpi	r18, 0x10	; 16
 318:	31 05       	cpc	r19, r1
 31a:	09 f4       	brne	.+2      	; 0x31e <Kernel_Create_Task+0x18>
 31c:	5b c0       	rjmp	.+182    	; 0x3d4 <Kernel_Create_Task+0xce>
 31e:	c0 91 11 02 	lds	r28, 0x0211
 322:	d0 91 12 02 	lds	r29, 0x0212
 326:	20 97       	sbiw	r28, 0x00	; 0
 328:	59 f0       	breq	.+22     	; 0x340 <Kernel_Create_Task+0x3a>
 32a:	fe 01       	movw	r30, r28
 32c:	ef 5e       	subi	r30, 0xEF	; 239
 32e:	fe 4f       	sbci	r31, 0xFE	; 254
 330:	20 81       	ld	r18, Z
 332:	31 81       	ldd	r19, Z+1	; 0x01
 334:	30 93 12 02 	sts	0x0212, r19
 338:	20 93 11 02 	sts	0x0211, r18
 33c:	11 82       	std	Z+1, r1	; 0x01
 33e:	10 82       	st	Z, r1
 340:	20 91 07 02 	lds	r18, 0x0207
 344:	30 91 08 02 	lds	r19, 0x0208
 348:	2f 5f       	subi	r18, 0xFF	; 255
 34a:	3f 4f       	sbci	r19, 0xFF	; 255
 34c:	30 93 08 02 	sts	0x0208, r19
 350:	20 93 07 02 	sts	0x0207, r18
 354:	fe 01       	movw	r30, r28
 356:	32 96       	adiw	r30, 0x02	; 2
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	31 e0       	ldi	r19, 0x01	; 1
 35c:	df 01       	movw	r26, r30
 35e:	89 01       	movw	r16, r18
 360:	1d 92       	st	X+, r1
 362:	01 50       	subi	r16, 0x01	; 1
 364:	10 40       	sbci	r17, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <Kernel_Create_Task+0x5a>
 368:	e1 50       	subi	r30, 0x01	; 1
 36a:	ff 4f       	sbci	r31, 0xFF	; 255
 36c:	21 ef       	ldi	r18, 0xF1	; 241
 36e:	31 e0       	ldi	r19, 0x01	; 1
 370:	20 83       	st	Z, r18
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	30 83       	st	Z, r19
 376:	31 97       	sbiw	r30, 0x01	; 1
 378:	10 82       	st	Z, r1
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	80 83       	st	Z, r24
 37e:	31 97       	sbiw	r30, 0x01	; 1
 380:	90 83       	st	Z, r25
 382:	31 97       	sbiw	r30, 0x01	; 1
 384:	10 82       	st	Z, r1
 386:	9e 01       	movw	r18, r28
 388:	27 52       	subi	r18, 0x27	; 39
 38a:	3f 4f       	sbci	r19, 0xFF	; 255
 38c:	39 83       	std	Y+1, r19	; 0x01
 38e:	28 83       	st	Y, r18
 390:	37 96       	adiw	r30, 0x07	; 7
 392:	91 83       	std	Z+1, r25	; 0x01
 394:	80 83       	st	Z, r24
 396:	32 96       	adiw	r30, 0x02	; 2
 398:	10 82       	st	Z, r1
 39a:	36 96       	adiw	r30, 0x06	; 6
 39c:	51 83       	std	Z+1, r21	; 0x01
 39e:	40 83       	st	Z, r20
 3a0:	33 97       	sbiw	r30, 0x03	; 3
 3a2:	60 83       	st	Z, r22
 3a4:	de 01       	movw	r26, r28
 3a6:	a1 5f       	subi	r26, 0xF1	; 241
 3a8:	be 4f       	sbci	r27, 0xFE	; 254
 3aa:	11 96       	adiw	r26, 0x01	; 1
 3ac:	1c 92       	st	X, r1
 3ae:	1e 92       	st	-X, r1
 3b0:	1d 97       	sbiw	r26, 0x0d	; 13
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	8c 93       	st	X, r24
 3b6:	80 81       	ld	r24, Z
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	be 01       	movw	r22, r28
 3c4:	87 5e       	subi	r24, 0xE7	; 231
 3c6:	9d 4f       	sbci	r25, 0xFD	; 253
 3c8:	84 df       	rcall	.-248    	; 0x2d2 <enqueue>
 3ca:	c7 5f       	subi	r28, 0xF7	; 247
 3cc:	de 4f       	sbci	r29, 0xFE	; 254
 3ce:	88 81       	ld	r24, Y
 3d0:	99 81       	ldd	r25, Y+1	; 0x01
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <Kernel_Create_Task+0xd2>
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	9f ef       	ldi	r25, 0xFF	; 255
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	08 95       	ret

000003e2 <Task_Terminate>:
 3e2:	80 91 09 02 	lds	r24, 0x0209
 3e6:	90 91 0a 02 	lds	r25, 0x020A
 3ea:	89 2b       	or	r24, r25
 3ec:	51 f0       	breq	.+20     	; 0x402 <Task_Terminate+0x20>
 3ee:	f8 94       	cli
 3f0:	e0 91 0f 02 	lds	r30, 0x020F
 3f4:	f0 91 10 02 	lds	r31, 0x0210
 3f8:	eb 5f       	subi	r30, 0xFB	; 251
 3fa:	fe 4f       	sbci	r31, 0xFE	; 254
 3fc:	83 e0       	ldi	r24, 0x03	; 3
 3fe:	80 83       	st	Z, r24
 400:	e3 ce       	rjmp	.-570    	; 0x1c8 <Enter_Kernel>
 402:	08 95       	ret

00000404 <Dispatch>:
 404:	a9 e1       	ldi	r26, 0x19	; 25
 406:	b2 e0       	ldi	r27, 0x02	; 2
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	2d 91       	ld	r18, X+
 40e:	3c 91       	ld	r19, X
 410:	11 97       	sbiw	r26, 0x01	; 1
 412:	21 15       	cp	r18, r1
 414:	31 05       	cpc	r19, r1
 416:	09 f4       	brne	.+2      	; 0x41a <Dispatch+0x16>
 418:	7a c0       	rjmp	.+244    	; 0x50e <Dispatch+0x10a>
 41a:	f9 01       	movw	r30, r18
 41c:	e1 5f       	subi	r30, 0xF1	; 241
 41e:	fe 4f       	sbci	r31, 0xFE	; 254
 420:	80 81       	ld	r24, Z
 422:	91 81       	ldd	r25, Z+1	; 0x01
 424:	89 2b       	or	r24, r25
 426:	61 f0       	breq	.+24     	; 0x440 <Dispatch+0x3c>
 428:	c9 01       	movw	r24, r18
 42a:	69 c0       	rjmp	.+210    	; 0x4fe <Dispatch+0xfa>
 42c:	fc 01       	movw	r30, r24
 42e:	e1 5f       	subi	r30, 0xF1	; 241
 430:	fe 4f       	sbci	r31, 0xFE	; 254
 432:	40 81       	ld	r20, Z
 434:	51 81       	ldd	r21, Z+1	; 0x01
 436:	45 2b       	or	r20, r21
 438:	09 f0       	breq	.+2      	; 0x43c <Dispatch+0x38>
 43a:	61 c0       	rjmp	.+194    	; 0x4fe <Dispatch+0xfa>
 43c:	c9 01       	movw	r24, r18
 43e:	01 c0       	rjmp	.+2      	; 0x442 <Dispatch+0x3e>
 440:	c9 01       	movw	r24, r18
 442:	fc 01       	movw	r30, r24
 444:	e1 5f       	subi	r30, 0xF1	; 241
 446:	fe 4f       	sbci	r31, 0xFE	; 254
 448:	40 81       	ld	r20, Z
 44a:	51 81       	ldd	r21, Z+1	; 0x01
 44c:	45 2b       	or	r20, r21
 44e:	a1 f4       	brne	.+40     	; 0x478 <Dispatch+0x74>
 450:	dc 01       	movw	r26, r24
 452:	af 5e       	subi	r26, 0xEF	; 239
 454:	be 4f       	sbci	r27, 0xFE	; 254
 456:	8d 91       	ld	r24, X+
 458:	9c 91       	ld	r25, X
 45a:	11 97       	sbiw	r26, 0x01	; 1
 45c:	66 0f       	add	r22, r22
 45e:	77 1f       	adc	r23, r23
 460:	66 0f       	add	r22, r22
 462:	77 1f       	adc	r23, r23
 464:	fb 01       	movw	r30, r22
 466:	e7 5e       	subi	r30, 0xE7	; 231
 468:	fd 4f       	sbci	r31, 0xFD	; 253
 46a:	91 83       	std	Z+1, r25	; 0x01
 46c:	80 83       	st	Z, r24
 46e:	11 96       	adiw	r26, 0x01	; 1
 470:	1c 92       	st	X, r1
 472:	1e 92       	st	-X, r1
 474:	f9 01       	movw	r30, r18
 476:	33 c0       	rjmp	.+102    	; 0x4de <Dispatch+0xda>
 478:	fc 01       	movw	r30, r24
 47a:	ef 5e       	subi	r30, 0xEF	; 239
 47c:	fe 4f       	sbci	r31, 0xFE	; 254
 47e:	80 81       	ld	r24, Z
 480:	91 81       	ldd	r25, Z+1	; 0x01
 482:	00 97       	sbiw	r24, 0x00	; 0
 484:	59 f1       	breq	.+86     	; 0x4dc <Dispatch+0xd8>
 486:	fc 01       	movw	r30, r24
 488:	e1 5f       	subi	r30, 0xF1	; 241
 48a:	fe 4f       	sbci	r31, 0xFE	; 254
 48c:	40 81       	ld	r20, Z
 48e:	51 81       	ldd	r21, Z+1	; 0x01
 490:	45 2b       	or	r20, r21
 492:	c1 f4       	brne	.+48     	; 0x4c4 <Dispatch+0xc0>
 494:	07 c0       	rjmp	.+14     	; 0x4a4 <Dispatch+0xa0>
 496:	fc 01       	movw	r30, r24
 498:	e1 5f       	subi	r30, 0xF1	; 241
 49a:	fe 4f       	sbci	r31, 0xFE	; 254
 49c:	40 81       	ld	r20, Z
 49e:	51 81       	ldd	r21, Z+1	; 0x01
 4a0:	45 2b       	or	r20, r21
 4a2:	81 f4       	brne	.+32     	; 0x4c4 <Dispatch+0xc0>
 4a4:	dc 01       	movw	r26, r24
 4a6:	af 5e       	subi	r26, 0xEF	; 239
 4a8:	be 4f       	sbci	r27, 0xFE	; 254
 4aa:	4d 91       	ld	r20, X+
 4ac:	5c 91       	ld	r21, X
 4ae:	11 97       	sbiw	r26, 0x01	; 1
 4b0:	f9 01       	movw	r30, r18
 4b2:	ef 5e       	subi	r30, 0xEF	; 239
 4b4:	fe 4f       	sbci	r31, 0xFE	; 254
 4b6:	51 83       	std	Z+1, r21	; 0x01
 4b8:	40 83       	st	Z, r20
 4ba:	11 96       	adiw	r26, 0x01	; 1
 4bc:	1c 92       	st	X, r1
 4be:	1e 92       	st	-X, r1
 4c0:	fc 01       	movw	r30, r24
 4c2:	0d c0       	rjmp	.+26     	; 0x4de <Dispatch+0xda>
 4c4:	f9 01       	movw	r30, r18
 4c6:	ef 5e       	subi	r30, 0xEF	; 239
 4c8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ca:	20 81       	ld	r18, Z
 4cc:	31 81       	ldd	r19, Z+1	; 0x01
 4ce:	fc 01       	movw	r30, r24
 4d0:	ef 5e       	subi	r30, 0xEF	; 239
 4d2:	fe 4f       	sbci	r31, 0xFE	; 254
 4d4:	80 81       	ld	r24, Z
 4d6:	91 81       	ldd	r25, Z+1	; 0x01
 4d8:	00 97       	sbiw	r24, 0x00	; 0
 4da:	e9 f6       	brne	.-70     	; 0x496 <Dispatch+0x92>
 4dc:	ff cf       	rjmp	.-2      	; 0x4dc <Dispatch+0xd8>
 4de:	f0 93 10 02 	sts	0x0210, r31
 4e2:	e0 93 0f 02 	sts	0x020F, r30
 4e6:	80 81       	ld	r24, Z
 4e8:	91 81       	ldd	r25, Z+1	; 0x01
 4ea:	90 93 76 13 	sts	0x1376, r25
 4ee:	80 93 75 13 	sts	0x1375, r24
 4f2:	ee 5f       	subi	r30, 0xFE	; 254
 4f4:	fe 4f       	sbci	r31, 0xFE	; 254
 4f6:	83 e0       	ldi	r24, 0x03	; 3
 4f8:	80 83       	st	Z, r24
 4fa:	78 94       	sei
 4fc:	08 95       	ret
 4fe:	fc 01       	movw	r30, r24
 500:	ef 5e       	subi	r30, 0xEF	; 239
 502:	fe 4f       	sbci	r31, 0xFE	; 254
 504:	80 81       	ld	r24, Z
 506:	91 81       	ldd	r25, Z+1	; 0x01
 508:	00 97       	sbiw	r24, 0x00	; 0
 50a:	09 f0       	breq	.+2      	; 0x50e <Dispatch+0x10a>
 50c:	8f cf       	rjmp	.-226    	; 0x42c <Dispatch+0x28>
 50e:	6f 5f       	subi	r22, 0xFF	; 255
 510:	7f 4f       	sbci	r23, 0xFF	; 255
 512:	14 96       	adiw	r26, 0x04	; 4
 514:	6b 30       	cpi	r22, 0x0B	; 11
 516:	71 05       	cpc	r23, r1
 518:	09 f0       	breq	.+2      	; 0x51c <Dispatch+0x118>
 51a:	78 cf       	rjmp	.-272    	; 0x40c <Dispatch+0x8>
 51c:	ff cf       	rjmp	.-2      	; 0x51c <Dispatch+0x118>

0000051e <check_rqueue>:
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	c0 91 0f 02 	lds	r28, 0x020F
 526:	d0 91 10 02 	lds	r29, 0x0210
 52a:	fe 01       	movw	r30, r28
 52c:	e8 5f       	subi	r30, 0xF8	; 248
 52e:	fe 4f       	sbci	r31, 0xFE	; 254
 530:	80 81       	ld	r24, Z
 532:	88 23       	and	r24, r24
 534:	59 f1       	breq	.+86     	; 0x58c <check_rqueue+0x6e>
 536:	a9 e1       	ldi	r26, 0x19	; 25
 538:	b2 e0       	ldi	r27, 0x02	; 2
 53a:	40 e0       	ldi	r20, 0x00	; 0
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	ef 01       	movw	r28, r30
 540:	8d 91       	ld	r24, X+
 542:	9c 91       	ld	r25, X
 544:	11 97       	sbiw	r26, 0x01	; 1
 546:	00 97       	sbiw	r24, 0x00	; 0
 548:	b1 f0       	breq	.+44     	; 0x576 <check_rqueue+0x58>
 54a:	fc 01       	movw	r30, r24
 54c:	e1 5f       	subi	r30, 0xF1	; 241
 54e:	fe 4f       	sbci	r31, 0xFE	; 254
 550:	20 81       	ld	r18, Z
 552:	31 81       	ldd	r19, Z+1	; 0x01
 554:	23 2b       	or	r18, r19
 556:	41 f4       	brne	.+16     	; 0x568 <check_rqueue+0x4a>
 558:	1c c0       	rjmp	.+56     	; 0x592 <check_rqueue+0x74>
 55a:	fc 01       	movw	r30, r24
 55c:	e1 5f       	subi	r30, 0xF1	; 241
 55e:	fe 4f       	sbci	r31, 0xFE	; 254
 560:	20 81       	ld	r18, Z
 562:	31 81       	ldd	r19, Z+1	; 0x01
 564:	23 2b       	or	r18, r19
 566:	c1 f0       	breq	.+48     	; 0x598 <check_rqueue+0x7a>
 568:	fc 01       	movw	r30, r24
 56a:	ef 5e       	subi	r30, 0xEF	; 239
 56c:	fe 4f       	sbci	r31, 0xFE	; 254
 56e:	80 81       	ld	r24, Z
 570:	91 81       	ldd	r25, Z+1	; 0x01
 572:	00 97       	sbiw	r24, 0x00	; 0
 574:	91 f7       	brne	.-28     	; 0x55a <check_rqueue+0x3c>
 576:	4f 5f       	subi	r20, 0xFF	; 255
 578:	5f 4f       	sbci	r21, 0xFF	; 255
 57a:	88 81       	ld	r24, Y
 57c:	14 96       	adiw	r26, 0x04	; 4
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	48 17       	cp	r20, r24
 582:	59 07       	cpc	r21, r25
 584:	ec f2       	brlt	.-70     	; 0x540 <check_rqueue+0x22>
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	08 c0       	rjmp	.+16     	; 0x59c <check_rqueue+0x7e>
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	05 c0       	rjmp	.+10     	; 0x59c <check_rqueue+0x7e>
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	02 c0       	rjmp	.+4      	; 0x59c <check_rqueue+0x7e>
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <preemption>:
 5a2:	bd df       	rcall	.-134    	; 0x51e <check_rqueue>
 5a4:	89 2b       	or	r24, r25
 5a6:	31 f1       	breq	.+76     	; 0x5f4 <preemption+0x52>
 5a8:	80 91 0f 02 	lds	r24, 0x020F
 5ac:	90 91 10 02 	lds	r25, 0x0210
 5b0:	fc 01       	movw	r30, r24
 5b2:	ee 5f       	subi	r30, 0xFE	; 254
 5b4:	fe 4f       	sbci	r31, 0xFE	; 254
 5b6:	21 e0       	ldi	r18, 0x01	; 1
 5b8:	20 83       	st	Z, r18
 5ba:	dc 01       	movw	r26, r24
 5bc:	a8 5f       	subi	r26, 0xF8	; 248
 5be:	be 4f       	sbci	r27, 0xFE	; 254
 5c0:	ec 91       	ld	r30, X
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	ee 0f       	add	r30, r30
 5c6:	ff 1f       	adc	r31, r31
 5c8:	ee 0f       	add	r30, r30
 5ca:	ff 1f       	adc	r31, r31
 5cc:	e7 5e       	subi	r30, 0xE7	; 231
 5ce:	fd 4f       	sbci	r31, 0xFD	; 253
 5d0:	20 81       	ld	r18, Z
 5d2:	31 81       	ldd	r19, Z+1	; 0x01
 5d4:	fc 01       	movw	r30, r24
 5d6:	ef 5e       	subi	r30, 0xEF	; 239
 5d8:	fe 4f       	sbci	r31, 0xFE	; 254
 5da:	31 83       	std	Z+1, r19	; 0x01
 5dc:	20 83       	st	Z, r18
 5de:	ec 91       	ld	r30, X
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	ee 0f       	add	r30, r30
 5e4:	ff 1f       	adc	r31, r31
 5e6:	ee 0f       	add	r30, r30
 5e8:	ff 1f       	adc	r31, r31
 5ea:	e7 5e       	subi	r30, 0xE7	; 231
 5ec:	fd 4f       	sbci	r31, 0xFD	; 253
 5ee:	91 83       	std	Z+1, r25	; 0x01
 5f0:	80 83       	st	Z, r24
 5f2:	08 cf       	rjmp	.-496    	; 0x404 <Dispatch>
 5f4:	08 95       	ret

000005f6 <set_timer>:
 5f6:	10 92 80 00 	sts	0x0080, r1
 5fa:	e1 e8       	ldi	r30, 0x81	; 129
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	10 82       	st	Z, r1
 600:	80 81       	ld	r24, Z
 602:	88 60       	ori	r24, 0x08	; 8
 604:	80 83       	st	Z, r24
 606:	80 81       	ld	r24, Z
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	80 83       	st	Z, r24
 60c:	80 e2       	ldi	r24, 0x20	; 32
 60e:	9e e4       	ldi	r25, 0x4E	; 78
 610:	90 93 89 00 	sts	0x0089, r25
 614:	80 93 88 00 	sts	0x0088, r24
 618:	ef e6       	ldi	r30, 0x6F	; 111
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	82 60       	ori	r24, 0x02	; 2
 620:	80 83       	st	Z, r24
 622:	08 95       	ret

00000624 <OS_Init>:
 624:	08 9a       	sbi	0x01, 0	; 1
 626:	09 9a       	sbi	0x01, 1	; 1
 628:	10 98       	cbi	0x02, 0	; 2
 62a:	11 98       	cbi	0x02, 1	; 2
 62c:	e4 df       	rcall	.-56     	; 0x5f6 <set_timer>
 62e:	10 92 08 02 	sts	0x0208, r1
 632:	10 92 07 02 	sts	0x0207, r1
 636:	10 92 0a 02 	sts	0x020A, r1
 63a:	10 92 09 02 	sts	0x0209, r1
 63e:	10 92 0c 02 	sts	0x020C, r1
 642:	10 92 0b 02 	sts	0x020B, r1
 646:	a5 e4       	ldi	r26, 0x45	; 69
 648:	b2 e0       	ldi	r27, 0x02	; 2
 64a:	20 e0       	ldi	r18, 0x00	; 0
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	43 e1       	ldi	r20, 0x13	; 19
 650:	51 e0       	ldi	r21, 0x01	; 1
 652:	fd 01       	movw	r30, r26
 654:	ca 01       	movw	r24, r20
 656:	11 92       	st	Z+, r1
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	e9 f7       	brne	.-6      	; 0x656 <OS_Init+0x32>
 65c:	24 9f       	mul	r18, r20
 65e:	c0 01       	movw	r24, r0
 660:	25 9f       	mul	r18, r21
 662:	90 0d       	add	r25, r0
 664:	34 9f       	mul	r19, r20
 666:	90 0d       	add	r25, r0
 668:	11 24       	eor	r1, r1
 66a:	8b 5b       	subi	r24, 0xBB	; 187
 66c:	9d 4f       	sbci	r25, 0xFD	; 253
 66e:	fc 01       	movw	r30, r24
 670:	ee 5f       	subi	r30, 0xFE	; 254
 672:	fe 4f       	sbci	r31, 0xFE	; 254
 674:	10 82       	st	Z, r1
 676:	37 96       	adiw	r30, 0x07	; 7
 678:	31 83       	std	Z+1, r19	; 0x01
 67a:	20 83       	st	Z, r18
 67c:	ad 5e       	subi	r26, 0xED	; 237
 67e:	be 4f       	sbci	r27, 0xFE	; 254
 680:	38 96       	adiw	r30, 0x08	; 8
 682:	b1 83       	std	Z+1, r27	; 0x01
 684:	a0 83       	st	Z, r26
 686:	2f 5f       	subi	r18, 0xFF	; 255
 688:	3f 4f       	sbci	r19, 0xFF	; 255
 68a:	2f 30       	cpi	r18, 0x0F	; 15
 68c:	31 05       	cpc	r19, r1
 68e:	09 f7       	brne	.-62     	; 0x652 <OS_Init+0x2e>
 690:	10 92 64 13 	sts	0x1364, r1
 694:	10 92 74 13 	sts	0x1374, r1
 698:	10 92 73 13 	sts	0x1373, r1
 69c:	e1 e1       	ldi	r30, 0x11	; 17
 69e:	f2 e0       	ldi	r31, 0x02	; 2
 6a0:	85 e4       	ldi	r24, 0x45	; 69
 6a2:	92 e0       	ldi	r25, 0x02	; 2
 6a4:	91 83       	std	Z+1, r25	; 0x01
 6a6:	80 83       	st	Z, r24
 6a8:	82 e6       	ldi	r24, 0x62	; 98
 6aa:	92 e1       	ldi	r25, 0x12	; 18
 6ac:	93 83       	std	Z+3, r25	; 0x03
 6ae:	82 83       	std	Z+2, r24	; 0x02
 6b0:	08 95       	ret

000006b2 <OS_Start>:
 6b2:	2f 92       	push	r2
 6b4:	3f 92       	push	r3
 6b6:	4f 92       	push	r4
 6b8:	5f 92       	push	r5
 6ba:	6f 92       	push	r6
 6bc:	7f 92       	push	r7
 6be:	8f 92       	push	r8
 6c0:	9f 92       	push	r9
 6c2:	af 92       	push	r10
 6c4:	bf 92       	push	r11
 6c6:	cf 92       	push	r12
 6c8:	df 92       	push	r13
 6ca:	ef 92       	push	r14
 6cc:	ff 92       	push	r15
 6ce:	0f 93       	push	r16
 6d0:	1f 93       	push	r17
 6d2:	cf 93       	push	r28
 6d4:	df 93       	push	r29
 6d6:	80 91 09 02 	lds	r24, 0x0209
 6da:	90 91 0a 02 	lds	r25, 0x020A
 6de:	89 2b       	or	r24, r25
 6e0:	09 f0       	breq	.+2      	; 0x6e4 <OS_Start+0x32>
 6e2:	67 c1       	rjmp	.+718    	; 0x9b2 <OS_Start+0x300>
 6e4:	80 91 07 02 	lds	r24, 0x0207
 6e8:	90 91 08 02 	lds	r25, 0x0208
 6ec:	89 2b       	or	r24, r25
 6ee:	09 f4       	brne	.+2      	; 0x6f2 <OS_Start+0x40>
 6f0:	60 c1       	rjmp	.+704    	; 0x9b2 <OS_Start+0x300>
 6f2:	f8 94       	cli
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	90 93 0a 02 	sts	0x020A, r25
 6fc:	80 93 09 02 	sts	0x0209, r24
 700:	81 de       	rcall	.-766    	; 0x404 <Dispatch>
 702:	05 e1       	ldi	r16, 0x15	; 21
 704:	12 e0       	ldi	r17, 0x02	; 2
 706:	68 94       	set
 708:	22 24       	eor	r2, r2
 70a:	22 f8       	bld	r2, 2
 70c:	0f 2e       	mov	r0, r31
 70e:	66 24       	eor	r6, r6
 710:	6a 94       	dec	r6
 712:	ff e7       	ldi	r31, 0x7F	; 127
 714:	7f 2e       	mov	r7, r31
 716:	f0 2d       	mov	r31, r0
 718:	33 24       	eor	r3, r3
 71a:	33 94       	inc	r3
 71c:	0f 2e       	mov	r0, r31
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	cf 2e       	mov	r12, r31
 722:	f2 e0       	ldi	r31, 0x02	; 2
 724:	df 2e       	mov	r13, r31
 726:	f0 2d       	mov	r31, r0
 728:	e0 91 0f 02 	lds	r30, 0x020F
 72c:	f0 91 10 02 	lds	r31, 0x0210
 730:	80 81       	ld	r24, Z
 732:	91 81       	ldd	r25, Z+1	; 0x01
 734:	90 93 76 13 	sts	0x1376, r25
 738:	80 93 75 13 	sts	0x1375, r24
 73c:	e1 5f       	subi	r30, 0xF1	; 241
 73e:	fe 4f       	sbci	r31, 0xFE	; 254
 740:	80 81       	ld	r24, Z
 742:	91 81       	ldd	r25, Z+1	; 0x01
 744:	89 2b       	or	r24, r25
 746:	09 f0       	breq	.+2      	; 0x74a <OS_Start+0x98>
 748:	ff cf       	rjmp	.-2      	; 0x748 <OS_Start+0x96>
 74a:	e7 dc       	rcall	.-1586   	; 0x11a <CSwitch>
 74c:	c0 91 0f 02 	lds	r28, 0x020F
 750:	d0 91 10 02 	lds	r29, 0x0210
 754:	80 91 75 13 	lds	r24, 0x1375
 758:	90 91 76 13 	lds	r25, 0x1376
 75c:	99 83       	std	Y+1, r25	; 0x01
 75e:	88 83       	st	Y, r24
 760:	fe 01       	movw	r30, r28
 762:	eb 5f       	subi	r30, 0xFB	; 251
 764:	fe 4f       	sbci	r31, 0xFE	; 254
 766:	e0 81       	ld	r30, Z
 768:	8e 2f       	mov	r24, r30
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	fc 01       	movw	r30, r24
 76e:	31 97       	sbiw	r30, 0x01	; 1
 770:	e8 30       	cpi	r30, 0x08	; 8
 772:	f1 05       	cpc	r31, r1
 774:	c8 f6       	brcc	.-78     	; 0x728 <OS_Start+0x76>
 776:	88 27       	eor	r24, r24
 778:	ee 58       	subi	r30, 0x8E	; 142
 77a:	ff 4f       	sbci	r31, 0xFF	; 255
 77c:	8f 4f       	sbci	r24, 0xFF	; 255
 77e:	d4 c1       	rjmp	.+936    	; 0xb28 <__tablejump2__>
 780:	d6 01       	movw	r26, r12
 782:	12 96       	adiw	r26, 0x02	; 2
 784:	4d 91       	ld	r20, X+
 786:	5c 91       	ld	r21, X
 788:	13 97       	sbiw	r26, 0x03	; 3
 78a:	14 96       	adiw	r26, 0x04	; 4
 78c:	6c 91       	ld	r22, X
 78e:	14 97       	sbiw	r26, 0x04	; 4
 790:	8d 91       	ld	r24, X+
 792:	9c 91       	ld	r25, X
 794:	b8 dd       	rcall	.-1168   	; 0x306 <Kernel_Create_Task>
 796:	f6 01       	movw	r30, r12
 798:	96 83       	std	Z+6, r25	; 0x06
 79a:	85 83       	std	Z+5, r24	; 0x05
 79c:	02 df       	rcall	.-508    	; 0x5a2 <preemption>
 79e:	c4 cf       	rjmp	.-120    	; 0x728 <OS_Start+0x76>
 7a0:	ce 5f       	subi	r28, 0xFE	; 254
 7a2:	de 4f       	sbci	r29, 0xFE	; 254
 7a4:	38 82       	st	Y, r3
 7a6:	2e de       	rcall	.-932    	; 0x404 <Dispatch>
 7a8:	bf cf       	rjmp	.-130    	; 0x728 <OS_Start+0x76>
 7aa:	fe 01       	movw	r30, r28
 7ac:	ee 5f       	subi	r30, 0xFE	; 254
 7ae:	fe 4f       	sbci	r31, 0xFE	; 254
 7b0:	30 82       	st	Z, r3
 7b2:	36 96       	adiw	r30, 0x06	; 6
 7b4:	80 81       	ld	r24, Z
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	88 0f       	add	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	be 01       	movw	r22, r28
 7c2:	87 5e       	subi	r24, 0xE7	; 231
 7c4:	9d 4f       	sbci	r25, 0xFD	; 253
 7c6:	85 dd       	rcall	.-1270   	; 0x2d2 <enqueue>
 7c8:	1d de       	rcall	.-966    	; 0x404 <Dispatch>
 7ca:	ae cf       	rjmp	.-164    	; 0x728 <OS_Start+0x76>
 7cc:	fe 01       	movw	r30, r28
 7ce:	ee 5f       	subi	r30, 0xFE	; 254
 7d0:	fe 4f       	sbci	r31, 0xFE	; 254
 7d2:	30 82       	st	Z, r3
 7d4:	3d 96       	adiw	r30, 0x0d	; 13
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	91 83       	std	Z+1, r25	; 0x01
 7dc:	80 83       	st	Z, r24
 7de:	37 97       	sbiw	r30, 0x07	; 7
 7e0:	80 81       	ld	r24, Z
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	88 0f       	add	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	88 0f       	add	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	be 01       	movw	r22, r28
 7ee:	87 5e       	subi	r24, 0xE7	; 231
 7f0:	9d 4f       	sbci	r25, 0xFD	; 253
 7f2:	6f dd       	rcall	.-1314   	; 0x2d2 <enqueue>
 7f4:	07 de       	rcall	.-1010   	; 0x404 <Dispatch>
 7f6:	98 cf       	rjmp	.-208    	; 0x728 <OS_Start+0x76>
 7f8:	d4 de       	rcall	.-600    	; 0x5a2 <preemption>
 7fa:	96 cf       	rjmp	.-212    	; 0x728 <OS_Start+0x76>
 7fc:	fe 01       	movw	r30, r28
 7fe:	ee 5f       	subi	r30, 0xFE	; 254
 800:	fe 4f       	sbci	r31, 0xFE	; 254
 802:	10 82       	st	Z, r1
 804:	be 01       	movw	r22, r28
 806:	81 e1       	ldi	r24, 0x11	; 17
 808:	92 e0       	ldi	r25, 0x02	; 2
 80a:	63 dd       	rcall	.-1338   	; 0x2d2 <enqueue>
 80c:	fb dd       	rcall	.-1034   	; 0x404 <Dispatch>
 80e:	8c cf       	rjmp	.-232    	; 0x728 <OS_Start+0x76>
 810:	fe 01       	movw	r30, r28
 812:	ee 5f       	subi	r30, 0xFE	; 254
 814:	fe 4f       	sbci	r31, 0xFE	; 254
 816:	20 82       	st	Z, r2
 818:	3f 96       	adiw	r30, 0x0f	; 15
 81a:	11 82       	std	Z+1, r1	; 0x01
 81c:	10 82       	st	Z, r1
 81e:	3b 97       	sbiw	r30, 0x0b	; 11
 820:	80 81       	ld	r24, Z
 822:	91 81       	ldd	r25, Z+1	; 0x01
 824:	b3 01       	movw	r22, r6
 826:	6c d1       	rcall	.+728    	; 0xb00 <__udivmodhi4>
 828:	7b 01       	movw	r14, r22
 82a:	80 80       	ld	r8, Z
 82c:	91 80       	ldd	r9, Z+1	; 0x01
 82e:	d8 01       	movw	r26, r16
 830:	2d 91       	ld	r18, X+
 832:	3c 91       	ld	r19, X
 834:	11 97       	sbiw	r26, 0x01	; 1
 836:	21 15       	cp	r18, r1
 838:	31 05       	cpc	r19, r1
 83a:	41 f4       	brne	.+16     	; 0x84c <OS_Start+0x19a>
 83c:	11 96       	adiw	r26, 0x01	; 1
 83e:	dc 93       	st	X, r29
 840:	ce 93       	st	-X, r28
 842:	13 96       	adiw	r26, 0x03	; 3
 844:	dc 93       	st	X, r29
 846:	ce 93       	st	-X, r28
 848:	12 97       	sbiw	r26, 0x02	; 2
 84a:	8f c0       	rjmp	.+286    	; 0x96a <OS_Start+0x2b8>
 84c:	59 01       	movw	r10, r18
 84e:	ba ef       	ldi	r27, 0xFA	; 250
 850:	ab 1a       	sub	r10, r27
 852:	be ef       	ldi	r27, 0xFE	; 254
 854:	bb 0a       	sbc	r11, r27
 856:	f5 01       	movw	r30, r10
 858:	80 81       	ld	r24, Z
 85a:	91 81       	ldd	r25, Z+1	; 0x01
 85c:	b3 01       	movw	r22, r6
 85e:	50 d1       	rcall	.+672    	; 0xb00 <__udivmodhi4>
 860:	fb 01       	movw	r30, r22
 862:	d5 01       	movw	r26, r10
 864:	ad 90       	ld	r10, X+
 866:	bc 90       	ld	r11, X
 868:	e6 16       	cp	r14, r22
 86a:	f7 06       	cpc	r15, r23
 86c:	44 f4       	brge	.+16     	; 0x87e <OS_Start+0x1cc>
 86e:	f8 01       	movw	r30, r16
 870:	d1 83       	std	Z+1, r29	; 0x01
 872:	c0 83       	st	Z, r28
 874:	cf 5e       	subi	r28, 0xEF	; 239
 876:	de 4f       	sbci	r29, 0xFE	; 254
 878:	39 83       	std	Y+1, r19	; 0x01
 87a:	28 83       	st	Y, r18
 87c:	76 c0       	rjmp	.+236    	; 0x96a <OS_Start+0x2b8>
 87e:	c4 01       	movw	r24, r8
 880:	b3 01       	movw	r22, r6
 882:	3e d1       	rcall	.+636    	; 0xb00 <__udivmodhi4>
 884:	2c 01       	movw	r4, r24
 886:	ee 16       	cp	r14, r30
 888:	ff 06       	cpc	r15, r31
 88a:	79 f4       	brne	.+30     	; 0x8aa <OS_Start+0x1f8>
 88c:	c5 01       	movw	r24, r10
 88e:	b3 01       	movw	r22, r6
 890:	37 d1       	rcall	.+622    	; 0xb00 <__udivmodhi4>
 892:	48 16       	cp	r4, r24
 894:	59 06       	cpc	r5, r25
 896:	0c f0       	brlt	.+2      	; 0x89a <OS_Start+0x1e8>
 898:	68 c0       	rjmp	.+208    	; 0x96a <OS_Start+0x2b8>
 89a:	d8 01       	movw	r26, r16
 89c:	cd 93       	st	X+, r28
 89e:	dc 93       	st	X, r29
 8a0:	cf 5e       	subi	r28, 0xEF	; 239
 8a2:	de 4f       	sbci	r29, 0xFE	; 254
 8a4:	39 83       	std	Y+1, r19	; 0x01
 8a6:	28 83       	st	Y, r18
 8a8:	60 c0       	rjmp	.+192    	; 0x96a <OS_Start+0x2b8>
 8aa:	f9 01       	movw	r30, r18
 8ac:	ef 5e       	subi	r30, 0xEF	; 239
 8ae:	fe 4f       	sbci	r31, 0xFE	; 254
 8b0:	01 90       	ld	r0, Z+
 8b2:	f0 81       	ld	r31, Z
 8b4:	e0 2d       	mov	r30, r0
 8b6:	30 97       	sbiw	r30, 0x00	; 0
 8b8:	09 f4       	brne	.+2      	; 0x8bc <OS_Start+0x20a>
 8ba:	4f c0       	rjmp	.+158    	; 0x95a <OS_Start+0x2a8>
 8bc:	4f 01       	movw	r8, r30
 8be:	ba ef       	ldi	r27, 0xFA	; 250
 8c0:	8b 1a       	sub	r8, r27
 8c2:	be ef       	ldi	r27, 0xFE	; 254
 8c4:	9b 0a       	sbc	r9, r27
 8c6:	d4 01       	movw	r26, r8
 8c8:	8d 91       	ld	r24, X+
 8ca:	9c 91       	ld	r25, X
 8cc:	b3 01       	movw	r22, r6
 8ce:	18 d1       	rcall	.+560    	; 0xb00 <__udivmodhi4>
 8d0:	5b 01       	movw	r10, r22
 8d2:	d4 01       	movw	r26, r8
 8d4:	8d 91       	ld	r24, X+
 8d6:	9c 91       	ld	r25, X
 8d8:	b3 01       	movw	r22, r6
 8da:	12 d1       	rcall	.+548    	; 0xb00 <__udivmodhi4>
 8dc:	ea 14       	cp	r14, r10
 8de:	fb 04       	cpc	r15, r11
 8e0:	a4 f0       	brlt	.+40     	; 0x90a <OS_Start+0x258>
 8e2:	1e c0       	rjmp	.+60     	; 0x920 <OS_Start+0x26e>
 8e4:	4f 01       	movw	r8, r30
 8e6:	ba ef       	ldi	r27, 0xFA	; 250
 8e8:	8b 1a       	sub	r8, r27
 8ea:	be ef       	ldi	r27, 0xFE	; 254
 8ec:	9b 0a       	sbc	r9, r27
 8ee:	d4 01       	movw	r26, r8
 8f0:	8d 91       	ld	r24, X+
 8f2:	9c 91       	ld	r25, X
 8f4:	b3 01       	movw	r22, r6
 8f6:	04 d1       	rcall	.+520    	; 0xb00 <__udivmodhi4>
 8f8:	5b 01       	movw	r10, r22
 8fa:	d4 01       	movw	r26, r8
 8fc:	8d 91       	ld	r24, X+
 8fe:	9c 91       	ld	r25, X
 900:	b3 01       	movw	r22, r6
 902:	fe d0       	rcall	.+508    	; 0xb00 <__udivmodhi4>
 904:	ea 14       	cp	r14, r10
 906:	fb 04       	cpc	r15, r11
 908:	5c f4       	brge	.+22     	; 0x920 <OS_Start+0x26e>
 90a:	d9 01       	movw	r26, r18
 90c:	af 5e       	subi	r26, 0xEF	; 239
 90e:	be 4f       	sbci	r27, 0xFE	; 254
 910:	11 96       	adiw	r26, 0x01	; 1
 912:	dc 93       	st	X, r29
 914:	ce 93       	st	-X, r28
 916:	cf 5e       	subi	r28, 0xEF	; 239
 918:	de 4f       	sbci	r29, 0xFE	; 254
 91a:	f9 83       	std	Y+1, r31	; 0x01
 91c:	e8 83       	st	Y, r30
 91e:	25 c0       	rjmp	.+74     	; 0x96a <OS_Start+0x2b8>
 920:	ea 14       	cp	r14, r10
 922:	fb 04       	cpc	r15, r11
 924:	71 f4       	brne	.+28     	; 0x942 <OS_Start+0x290>
 926:	48 16       	cp	r4, r24
 928:	59 06       	cpc	r5, r25
 92a:	5c f4       	brge	.+22     	; 0x942 <OS_Start+0x290>
 92c:	d9 01       	movw	r26, r18
 92e:	af 5e       	subi	r26, 0xEF	; 239
 930:	be 4f       	sbci	r27, 0xFE	; 254
 932:	11 96       	adiw	r26, 0x01	; 1
 934:	dc 93       	st	X, r29
 936:	ce 93       	st	-X, r28
 938:	cf 5e       	subi	r28, 0xEF	; 239
 93a:	de 4f       	sbci	r29, 0xFE	; 254
 93c:	f9 83       	std	Y+1, r31	; 0x01
 93e:	e8 83       	st	Y, r30
 940:	14 c0       	rjmp	.+40     	; 0x96a <OS_Start+0x2b8>
 942:	d9 01       	movw	r26, r18
 944:	af 5e       	subi	r26, 0xEF	; 239
 946:	be 4f       	sbci	r27, 0xFE	; 254
 948:	2d 91       	ld	r18, X+
 94a:	3c 91       	ld	r19, X
 94c:	ef 5e       	subi	r30, 0xEF	; 239
 94e:	fe 4f       	sbci	r31, 0xFE	; 254
 950:	01 90       	ld	r0, Z+
 952:	f0 81       	ld	r31, Z
 954:	e0 2d       	mov	r30, r0
 956:	30 97       	sbiw	r30, 0x00	; 0
 958:	29 f6       	brne	.-118    	; 0x8e4 <OS_Start+0x232>
 95a:	f9 01       	movw	r30, r18
 95c:	ef 5e       	subi	r30, 0xEF	; 239
 95e:	fe 4f       	sbci	r31, 0xFE	; 254
 960:	d1 83       	std	Z+1, r29	; 0x01
 962:	c0 83       	st	Z, r28
 964:	f8 01       	movw	r30, r16
 966:	d3 83       	std	Z+3, r29	; 0x03
 968:	c2 83       	std	Z+2, r28	; 0x02
 96a:	4c dd       	rcall	.-1384   	; 0x404 <Dispatch>
 96c:	dd ce       	rjmp	.-582    	; 0x728 <OS_Start+0x76>
 96e:	d8 01       	movw	r26, r16
 970:	6d 91       	ld	r22, X+
 972:	7c 91       	ld	r23, X
 974:	11 97       	sbiw	r26, 0x01	; 1
 976:	61 15       	cp	r22, r1
 978:	71 05       	cpc	r23, r1
 97a:	49 f0       	breq	.+18     	; 0x98e <OS_Start+0x2dc>
 97c:	fb 01       	movw	r30, r22
 97e:	ef 5e       	subi	r30, 0xEF	; 239
 980:	fe 4f       	sbci	r31, 0xFE	; 254
 982:	80 81       	ld	r24, Z
 984:	91 81       	ldd	r25, Z+1	; 0x01
 986:	8d 93       	st	X+, r24
 988:	9c 93       	st	X, r25
 98a:	11 82       	std	Z+1, r1	; 0x01
 98c:	10 82       	st	Z, r1
 98e:	70 93 0e 02 	sts	0x020E, r23
 992:	60 93 0d 02 	sts	0x020D, r22
 996:	fb 01       	movw	r30, r22
 998:	e8 5f       	subi	r30, 0xF8	; 248
 99a:	fe 4f       	sbci	r31, 0xFE	; 254
 99c:	80 81       	ld	r24, Z
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	88 0f       	add	r24, r24
 9a2:	99 1f       	adc	r25, r25
 9a4:	88 0f       	add	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	87 5e       	subi	r24, 0xE7	; 231
 9aa:	9d 4f       	sbci	r25, 0xFD	; 253
 9ac:	92 dc       	rcall	.-1756   	; 0x2d2 <enqueue>
 9ae:	f9 dd       	rcall	.-1038   	; 0x5a2 <preemption>
 9b0:	bb ce       	rjmp	.-650    	; 0x728 <OS_Start+0x76>
 9b2:	df 91       	pop	r29
 9b4:	cf 91       	pop	r28
 9b6:	1f 91       	pop	r17
 9b8:	0f 91       	pop	r16
 9ba:	ff 90       	pop	r15
 9bc:	ef 90       	pop	r14
 9be:	df 90       	pop	r13
 9c0:	cf 90       	pop	r12
 9c2:	bf 90       	pop	r11
 9c4:	af 90       	pop	r10
 9c6:	9f 90       	pop	r9
 9c8:	8f 90       	pop	r8
 9ca:	7f 90       	pop	r7
 9cc:	6f 90       	pop	r6
 9ce:	5f 90       	pop	r5
 9d0:	4f 90       	pop	r4
 9d2:	3f 90       	pop	r3
 9d4:	2f 90       	pop	r2
 9d6:	08 95       	ret

000009d8 <Task_Create>:
 9d8:	cf 93       	push	r28
 9da:	df 93       	push	r29
 9dc:	20 91 09 02 	lds	r18, 0x0209
 9e0:	30 91 0a 02 	lds	r19, 0x020A
 9e4:	23 2b       	or	r18, r19
 9e6:	a1 f0       	breq	.+40     	; 0xa10 <Task_Create+0x38>
 9e8:	f8 94       	cli
 9ea:	c0 e0       	ldi	r28, 0x00	; 0
 9ec:	d2 e0       	ldi	r29, 0x02	; 2
 9ee:	99 83       	std	Y+1, r25	; 0x01
 9f0:	88 83       	st	Y, r24
 9f2:	5b 83       	std	Y+3, r21	; 0x03
 9f4:	4a 83       	std	Y+2, r20	; 0x02
 9f6:	6c 83       	std	Y+4, r22	; 0x04
 9f8:	e0 91 0f 02 	lds	r30, 0x020F
 9fc:	f0 91 10 02 	lds	r31, 0x0210
 a00:	eb 5f       	subi	r30, 0xFB	; 251
 a02:	fe 4f       	sbci	r31, 0xFE	; 254
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	80 83       	st	Z, r24
 a08:	df db       	rcall	.-2114   	; 0x1c8 <Enter_Kernel>
 a0a:	8d 81       	ldd	r24, Y+5	; 0x05
 a0c:	9e 81       	ldd	r25, Y+6	; 0x06
 a0e:	01 c0       	rjmp	.+2      	; 0xa12 <Task_Create+0x3a>
 a10:	7a dc       	rcall	.-1804   	; 0x306 <Kernel_Create_Task>
 a12:	df 91       	pop	r29
 a14:	cf 91       	pop	r28
 a16:	08 95       	ret

00000a18 <Task_Sleep>:
 a18:	20 91 09 02 	lds	r18, 0x0209
 a1c:	30 91 0a 02 	lds	r19, 0x020A
 a20:	23 2b       	or	r18, r19
 a22:	71 f0       	breq	.+28     	; 0xa40 <Task_Sleep+0x28>
 a24:	f8 94       	cli
 a26:	20 91 0f 02 	lds	r18, 0x020F
 a2a:	30 91 10 02 	lds	r19, 0x0210
 a2e:	f9 01       	movw	r30, r18
 a30:	eb 5f       	subi	r30, 0xFB	; 251
 a32:	fe 4f       	sbci	r31, 0xFE	; 254
 a34:	44 e0       	ldi	r20, 0x04	; 4
 a36:	40 83       	st	Z, r20
 a38:	31 96       	adiw	r30, 0x01	; 1
 a3a:	91 83       	std	Z+1, r25	; 0x01
 a3c:	80 83       	st	Z, r24
 a3e:	c4 cb       	rjmp	.-2168   	; 0x1c8 <Enter_Kernel>
 a40:	08 95       	ret

00000a42 <__vector_17>:




ISR(TIMER1_COMPA_vect)
{
 a42:	1f 92       	push	r1
 a44:	0f 92       	push	r0
 a46:	0f b6       	in	r0, 0x3f	; 63
 a48:	0f 92       	push	r0
 a4a:	11 24       	eor	r1, r1
 a4c:	0b b6       	in	r0, 0x3b	; 59
 a4e:	0f 92       	push	r0
 a50:	2f 93       	push	r18
 a52:	3f 93       	push	r19
 a54:	4f 93       	push	r20
 a56:	5f 93       	push	r21
 a58:	6f 93       	push	r22
 a5a:	7f 93       	push	r23
 a5c:	8f 93       	push	r24
 a5e:	9f 93       	push	r25
 a60:	af 93       	push	r26
 a62:	bf 93       	push	r27
 a64:	ef 93       	push	r30
 a66:	ff 93       	push	r31
	volatile PD* curr;
	curr = sleep_queue.head;
 a68:	40 91 15 02 	lds	r20, 0x0215
 a6c:	50 91 16 02 	lds	r21, 0x0216
	while(curr!= NULL){
 a70:	41 15       	cp	r20, r1
 a72:	51 05       	cpc	r21, r1
 a74:	39 f1       	breq	.+78     	; 0xac4 <__vector_17+0x82>
 a76:	ca 01       	movw	r24, r20
		if(curr->tick!=0){
 a78:	fc 01       	movw	r30, r24
 a7a:	ea 5f       	subi	r30, 0xFA	; 250
 a7c:	fe 4f       	sbci	r31, 0xFE	; 254
 a7e:	20 81       	ld	r18, Z
 a80:	31 81       	ldd	r19, Z+1	; 0x01
 a82:	23 2b       	or	r18, r19
 a84:	31 f0       	breq	.+12     	; 0xa92 <__vector_17+0x50>
			curr->tick--;
 a86:	20 81       	ld	r18, Z
 a88:	31 81       	ldd	r19, Z+1	; 0x01
 a8a:	21 50       	subi	r18, 0x01	; 1
 a8c:	31 09       	sbc	r19, r1
 a8e:	31 83       	std	Z+1, r19	; 0x01
 a90:	20 83       	st	Z, r18
		}

		curr = curr->next;
 a92:	fc 01       	movw	r30, r24
 a94:	ef 5e       	subi	r30, 0xEF	; 239
 a96:	fe 4f       	sbci	r31, 0xFE	; 254
 a98:	80 81       	ld	r24, Z
 a9a:	91 81       	ldd	r25, Z+1	; 0x01

ISR(TIMER1_COMPA_vect)
{
	volatile PD* curr;
	curr = sleep_queue.head;
	while(curr!= NULL){
 a9c:	00 97       	sbiw	r24, 0x00	; 0
 a9e:	61 f7       	brne	.-40     	; 0xa78 <__vector_17+0x36>
 aa0:	0a c0       	rjmp	.+20     	; 0xab6 <__vector_17+0x74>
		curr = curr->next;
	}
	if(sleep_queue.head!=NULL){
		if(sleep_queue.head->tick == 0)
		{
			Cp->request = WAKE;
 aa2:	e0 91 0f 02 	lds	r30, 0x020F
 aa6:	f0 91 10 02 	lds	r31, 0x0210
 aaa:	eb 5f       	subi	r30, 0xFB	; 251
 aac:	fe 4f       	sbci	r31, 0xFE	; 254
 aae:	88 e0       	ldi	r24, 0x08	; 8
 ab0:	80 83       	st	Z, r24
			Enter_Kernel();
 ab2:	8a db       	rcall	.-2284   	; 0x1c8 <Enter_Kernel>
 ab4:	07 c0       	rjmp	.+14     	; 0xac4 <__vector_17+0x82>
		}

		curr = curr->next;
	}
	if(sleep_queue.head!=NULL){
		if(sleep_queue.head->tick == 0)
 ab6:	fa 01       	movw	r30, r20
 ab8:	ea 5f       	subi	r30, 0xFA	; 250
 aba:	fe 4f       	sbci	r31, 0xFE	; 254
 abc:	80 81       	ld	r24, Z
 abe:	91 81       	ldd	r25, Z+1	; 0x01
 ac0:	89 2b       	or	r24, r25
 ac2:	79 f3       	breq	.-34     	; 0xaa2 <__vector_17+0x60>
			Cp->request = WAKE;
			Enter_Kernel();
		}
	}

}
 ac4:	ff 91       	pop	r31
 ac6:	ef 91       	pop	r30
 ac8:	bf 91       	pop	r27
 aca:	af 91       	pop	r26
 acc:	9f 91       	pop	r25
 ace:	8f 91       	pop	r24
 ad0:	7f 91       	pop	r23
 ad2:	6f 91       	pop	r22
 ad4:	5f 91       	pop	r21
 ad6:	4f 91       	pop	r20
 ad8:	3f 91       	pop	r19
 ada:	2f 91       	pop	r18
 adc:	0f 90       	pop	r0
 ade:	0b be       	out	0x3b, r0	; 59
 ae0:	0f 90       	pop	r0
 ae2:	0f be       	out	0x3f, r0	; 63
 ae4:	0f 90       	pop	r0
 ae6:	1f 90       	pop	r1
 ae8:	18 95       	reti

00000aea <main>:

int main() 
{
   OS_Init();
 aea:	9c dd       	rcall	.-1224   	; 0x624 <OS_Init>
   Task_Create( a_main , 0, 0 );
 aec:	40 e0       	ldi	r20, 0x00	; 0
 aee:	50 e0       	ldi	r21, 0x00	; 0
 af0:	60 e0       	ldi	r22, 0x00	; 0
 af2:	8f e4       	ldi	r24, 0x4F	; 79
 af4:	91 e0       	ldi	r25, 0x01	; 1
 af6:	70 df       	rcall	.-288    	; 0x9d8 <Task_Create>
   OS_Start();
 af8:	dc dd       	rcall	.-1096   	; 0x6b2 <OS_Start>
}
 afa:	80 e0       	ldi	r24, 0x00	; 0
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	08 95       	ret

00000b00 <__udivmodhi4>:
 b00:	aa 1b       	sub	r26, r26
 b02:	bb 1b       	sub	r27, r27
 b04:	51 e1       	ldi	r21, 0x11	; 17
 b06:	07 c0       	rjmp	.+14     	; 0xb16 <__udivmodhi4_ep>

00000b08 <__udivmodhi4_loop>:
 b08:	aa 1f       	adc	r26, r26
 b0a:	bb 1f       	adc	r27, r27
 b0c:	a6 17       	cp	r26, r22
 b0e:	b7 07       	cpc	r27, r23
 b10:	10 f0       	brcs	.+4      	; 0xb16 <__udivmodhi4_ep>
 b12:	a6 1b       	sub	r26, r22
 b14:	b7 0b       	sbc	r27, r23

00000b16 <__udivmodhi4_ep>:
 b16:	88 1f       	adc	r24, r24
 b18:	99 1f       	adc	r25, r25
 b1a:	5a 95       	dec	r21
 b1c:	a9 f7       	brne	.-22     	; 0xb08 <__udivmodhi4_loop>
 b1e:	80 95       	com	r24
 b20:	90 95       	com	r25
 b22:	bc 01       	movw	r22, r24
 b24:	cd 01       	movw	r24, r26
 b26:	08 95       	ret

00000b28 <__tablejump2__>:
 b28:	ee 0f       	add	r30, r30
 b2a:	ff 1f       	adc	r31, r31
 b2c:	88 1f       	adc	r24, r24
 b2e:	8b bf       	out	0x3b, r24	; 59
 b30:	07 90       	elpm	r0, Z+
 b32:	f6 91       	elpm	r31, Z
 b34:	e0 2d       	mov	r30, r0
 b36:	19 94       	eijmp

00000b38 <_exit>:
 b38:	f8 94       	cli

00000b3a <__stop_program>:
 b3a:	ff cf       	rjmp	.-2      	; 0xb3a <__stop_program>
