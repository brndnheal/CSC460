
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000b6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008db  00800200  00800200  00000b6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000be0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb8  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003bd  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000886  00000000  00000000  00001c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  000024c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000449  00000000  00000000  00002694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a2c  00000000  00000000  00002add  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003509  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	42 c5       	rjmp	.+2692   	; 0xaca <__vector_17>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	2a e0       	ldi	r18, 0x0A	; 10
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ab 3d       	cpi	r26, 0xDB	; 219
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	ec d4       	rcall	.+2520   	; 0xade <main>
 106:	f6 c4       	rjmp	.+2540   	; 0xaf4 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
 10a:	0f 92       	push	r0
 10c:	1f 92       	push	r1
 10e:	2f 92       	push	r2
 110:	3f 92       	push	r3
 112:	4f 92       	push	r4
 114:	5f 92       	push	r5
 116:	6f 92       	push	r6
 118:	7f 92       	push	r7
 11a:	8f 92       	push	r8
 11c:	9f 92       	push	r9
 11e:	af 92       	push	r10
 120:	bf 92       	push	r11
 122:	cf 92       	push	r12
 124:	df 92       	push	r13
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
 14a:	0c b7       	in	r16, 0x3c	; 60
 14c:	0f 93       	push	r16
 14e:	ff b7       	in	r31, 0x3f	; 63
 150:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
 152:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 154:	fe b7       	in	r31, 0x3e	; 62
		  in   r16, EIND
 156:	0c b7       	in	r16, 0x3c	; 60
        sts  KernelSp, r30
 158:	e0 93 d9 0a 	sts	0x0AD9, r30
        sts  KernelSp+1, r31
 15c:	f0 93 da 0a 	sts	0x0ADA, r31

        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
 160:	e0 91 d7 0a 	lds	r30, 0x0AD7
        lds  r31, CurrentSp+1
 164:	f0 91 d8 0a 	lds	r31, 0x0AD8
        out  SPL, r30
 168:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 16a:	fe bf       	out	0x3e, r31	; 62
		  out  EIND, r16
 16c:	0c bf       	out	0x3c, r16	; 60
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
 16e:	ff 91       	pop	r31
 170:	ff bf       	out	0x3f, r31	; 63
 172:	0f 91       	pop	r16
 174:	0c bf       	out	0x3c, r16	; 60
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	df 90       	pop	r13
 19c:	cf 90       	pop	r12
 19e:	bf 90       	pop	r11
 1a0:	af 90       	pop	r10
 1a2:	9f 90       	pop	r9
 1a4:	8f 90       	pop	r8
 1a6:	7f 90       	pop	r7
 1a8:	6f 90       	pop	r6
 1aa:	5f 90       	pop	r5
 1ac:	4f 90       	pop	r4
 1ae:	3f 90       	pop	r3
 1b0:	2f 90       	pop	r2
 1b2:	1f 90       	pop	r1
 1b4:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
 1b6:	18 95       	reti

000001b8 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
 1b8:	0f 92       	push	r0
 1ba:	1f 92       	push	r1
 1bc:	2f 92       	push	r2
 1be:	3f 92       	push	r3
 1c0:	4f 92       	push	r4
 1c2:	5f 92       	push	r5
 1c4:	6f 92       	push	r6
 1c6:	7f 92       	push	r7
 1c8:	8f 92       	push	r8
 1ca:	9f 92       	push	r9
 1cc:	af 92       	push	r10
 1ce:	bf 92       	push	r11
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
 1f8:	0c b7       	in	r16, 0x3c	; 60
 1fa:	0f 93       	push	r16
 1fc:	ff b7       	in	r31, 0x3f	; 63
 1fe:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
 200:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 202:	fe b7       	in	r31, 0x3e	; 62
		  in   r16, EIND
 204:	0c b7       	in	r16, 0x3c	; 60
        sts  CurrentSp, r30
 206:	e0 93 d7 0a 	sts	0x0AD7, r30
        sts  CurrentSp+1, r31
 20a:	f0 93 d8 0a 	sts	0x0AD8, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
 20e:	e0 91 d9 0a 	lds	r30, 0x0AD9
        lds  r31, KernelSp+1
 212:	f0 91 da 0a 	lds	r31, 0x0ADA
        out  SPL, r30
 216:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 218:	fe bf       	out	0x3e, r31	; 62
		  out  EIND, r16
 21a:	0c bf       	out	0x3c, r16	; 60
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
 21c:	ff 91       	pop	r31
 21e:	ff bf       	out	0x3f, r31	; 63
 220:	0f 91       	pop	r16
 222:	0c bf       	out	0x3c, r16	; 60
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	bf 91       	pop	r27
 22e:	af 91       	pop	r26
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	7f 91       	pop	r23
 236:	6f 91       	pop	r22
 238:	5f 91       	pop	r21
 23a:	4f 91       	pop	r20
 23c:	3f 91       	pop	r19
 23e:	2f 91       	pop	r18
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	bf 90       	pop	r11
 24e:	af 90       	pop	r10
 250:	9f 90       	pop	r9
 252:	8f 90       	pop	r8
 254:	7f 90       	pop	r7
 256:	6f 90       	pop	r6
 258:	5f 90       	pop	r5
 25a:	4f 90       	pop	r4
 25c:	3f 90       	pop	r3
 25e:	2f 90       	pop	r2
 260:	1f 90       	pop	r1
 262:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
 264:	08 95       	ret

00000266 <Kernel_Create_Task>:
	}
}

int  Task_GetArg(void){
	return Cp->arg;
}
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	20 91 07 02 	lds	r18, 0x0207
 272:	30 91 08 02 	lds	r19, 0x0208
 276:	28 30       	cpi	r18, 0x08	; 8
 278:	31 05       	cpc	r19, r1
 27a:	09 f4       	brne	.+2      	; 0x27e <Kernel_Create_Task+0x18>
 27c:	88 c0       	rjmp	.+272    	; 0x38e <Kernel_Create_Task+0x128>
 27e:	e0 91 0f 02 	lds	r30, 0x020F
 282:	f0 91 10 02 	lds	r31, 0x0210
 286:	30 97       	sbiw	r30, 0x00	; 0
 288:	69 f0       	breq	.+26     	; 0x2a4 <Kernel_Create_Task+0x3e>
 28a:	df 01       	movw	r26, r30
 28c:	af 5e       	subi	r26, 0xEF	; 239
 28e:	be 4f       	sbci	r27, 0xFE	; 254
 290:	2d 91       	ld	r18, X+
 292:	3c 91       	ld	r19, X
 294:	11 97       	sbiw	r26, 0x01	; 1
 296:	30 93 10 02 	sts	0x0210, r19
 29a:	20 93 0f 02 	sts	0x020F, r18
 29e:	11 96       	adiw	r26, 0x01	; 1
 2a0:	1c 92       	st	X, r1
 2a2:	1e 92       	st	-X, r1
 2a4:	20 91 07 02 	lds	r18, 0x0207
 2a8:	30 91 08 02 	lds	r19, 0x0208
 2ac:	2f 5f       	subi	r18, 0xFF	; 255
 2ae:	3f 4f       	sbci	r19, 0xFF	; 255
 2b0:	30 93 08 02 	sts	0x0208, r19
 2b4:	20 93 07 02 	sts	0x0207, r18
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	31 e0       	ldi	r19, 0x01	; 1
 2bc:	df 01       	movw	r26, r30
 2be:	12 96       	adiw	r26, 0x02	; 2
 2c0:	ed 01       	movw	r28, r26
 2c2:	89 01       	movw	r16, r18
 2c4:	19 92       	st	Y+, r1
 2c6:	01 50       	subi	r16, 0x01	; 1
 2c8:	10 40       	sbci	r17, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <Kernel_Create_Task+0x5e>
 2cc:	2e ec       	ldi	r18, 0xCE	; 206
 2ce:	31 e0       	ldi	r19, 0x01	; 1
 2d0:	a1 50       	subi	r26, 0x01	; 1
 2d2:	bf 4f       	sbci	r27, 0xFF	; 255
 2d4:	2c 93       	st	X, r18
 2d6:	11 97       	sbiw	r26, 0x01	; 1
 2d8:	3c 93       	st	X, r19
 2da:	11 97       	sbiw	r26, 0x01	; 1
 2dc:	1c 92       	st	X, r1
 2de:	11 97       	sbiw	r26, 0x01	; 1
 2e0:	8c 93       	st	X, r24
 2e2:	11 97       	sbiw	r26, 0x01	; 1
 2e4:	9c 93       	st	X, r25
 2e6:	11 97       	sbiw	r26, 0x01	; 1
 2e8:	1c 92       	st	X, r1
 2ea:	9f 01       	movw	r18, r30
 2ec:	27 52       	subi	r18, 0x27	; 39
 2ee:	3f 4f       	sbci	r19, 0xFF	; 255
 2f0:	31 83       	std	Z+1, r19	; 0x01
 2f2:	20 83       	st	Z, r18
 2f4:	17 96       	adiw	r26, 0x07	; 7
 2f6:	11 96       	adiw	r26, 0x01	; 1
 2f8:	9c 93       	st	X, r25
 2fa:	8e 93       	st	-X, r24
 2fc:	12 96       	adiw	r26, 0x02	; 2
 2fe:	1c 92       	st	X, r1
 300:	16 96       	adiw	r26, 0x06	; 6
 302:	11 96       	adiw	r26, 0x01	; 1
 304:	5c 93       	st	X, r21
 306:	4e 93       	st	-X, r20
 308:	ef 01       	movw	r28, r30
 30a:	c8 5f       	subi	r28, 0xF8	; 248
 30c:	de 4f       	sbci	r29, 0xFE	; 254
 30e:	68 83       	st	Y, r22
 310:	14 96       	adiw	r26, 0x04	; 4
 312:	11 96       	adiw	r26, 0x01	; 1
 314:	1c 92       	st	X, r1
 316:	1e 92       	st	-X, r1
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	1d 97       	sbiw	r26, 0x0d	; 13
 31c:	8c 93       	st	X, r24
 31e:	88 81       	ld	r24, Y
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	1f 96       	adiw	r26, 0x0f	; 15
 324:	11 96       	adiw	r26, 0x01	; 1
 326:	1c 92       	st	X, r1
 328:	1e 92       	st	-X, r1
 32a:	dc 01       	movw	r26, r24
 32c:	aa 0f       	add	r26, r26
 32e:	bb 1f       	adc	r27, r27
 330:	aa 0f       	add	r26, r26
 332:	bb 1f       	adc	r27, r27
 334:	ad 5e       	subi	r26, 0xED	; 237
 336:	bd 4f       	sbci	r27, 0xFD	; 253
 338:	2d 91       	ld	r18, X+
 33a:	3c 91       	ld	r19, X
 33c:	23 2b       	or	r18, r19
 33e:	79 f4       	brne	.+30     	; 0x35e <Kernel_Create_Task+0xf8>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	dc 01       	movw	r26, r24
 34a:	ad 5e       	subi	r26, 0xED	; 237
 34c:	bd 4f       	sbci	r27, 0xFD	; 253
 34e:	11 96       	adiw	r26, 0x01	; 1
 350:	fc 93       	st	X, r31
 352:	ee 93       	st	-X, r30
 354:	13 96       	adiw	r26, 0x03	; 3
 356:	fc 93       	st	X, r31
 358:	ee 93       	st	-X, r30
 35a:	12 97       	sbiw	r26, 0x02	; 2
 35c:	13 c0       	rjmp	.+38     	; 0x384 <Kernel_Create_Task+0x11e>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	dc 01       	movw	r26, r24
 368:	ad 5e       	subi	r26, 0xED	; 237
 36a:	bd 4f       	sbci	r27, 0xFD	; 253
 36c:	12 96       	adiw	r26, 0x02	; 2
 36e:	cd 91       	ld	r28, X+
 370:	dc 91       	ld	r29, X
 372:	13 97       	sbiw	r26, 0x03	; 3
 374:	cf 5e       	subi	r28, 0xEF	; 239
 376:	de 4f       	sbci	r29, 0xFE	; 254
 378:	f9 83       	std	Y+1, r31	; 0x01
 37a:	e8 83       	st	Y, r30
 37c:	13 96       	adiw	r26, 0x03	; 3
 37e:	fc 93       	st	X, r31
 380:	ee 93       	st	-X, r30
 382:	12 97       	sbiw	r26, 0x02	; 2
 384:	e7 5f       	subi	r30, 0xF7	; 247
 386:	fe 4f       	sbci	r31, 0xFE	; 254
 388:	80 81       	ld	r24, Z
 38a:	91 81       	ldd	r25, Z+1	; 0x01
 38c:	02 c0       	rjmp	.+4      	; 0x392 <Kernel_Create_Task+0x12c>
 38e:	8f ef       	ldi	r24, 0xFF	; 255
 390:	9f ef       	ldi	r25, 0xFF	; 255
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	08 95       	ret

0000039c <Task_Terminate>:
 39c:	80 91 09 02 	lds	r24, 0x0209
 3a0:	90 91 0a 02 	lds	r25, 0x020A
 3a4:	89 2b       	or	r24, r25
 3a6:	51 f0       	breq	.+20     	; 0x3bc <Task_Terminate+0x20>
 3a8:	f8 94       	cli
 3aa:	e0 91 0d 02 	lds	r30, 0x020D
 3ae:	f0 91 0e 02 	lds	r31, 0x020E
 3b2:	eb 5f       	subi	r30, 0xFB	; 251
 3b4:	fe 4f       	sbci	r31, 0xFE	; 254
 3b6:	87 e0       	ldi	r24, 0x07	; 7
 3b8:	80 83       	st	Z, r24
 3ba:	fe ce       	rjmp	.-516    	; 0x1b8 <Enter_Kernel>
 3bc:	08 95       	ret

000003be <Dispatch>:
 3be:	a3 e1       	ldi	r26, 0x13	; 19
 3c0:	b2 e0       	ldi	r27, 0x02	; 2
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	2d 91       	ld	r18, X+
 3c8:	3c 91       	ld	r19, X
 3ca:	11 97       	sbiw	r26, 0x01	; 1
 3cc:	21 15       	cp	r18, r1
 3ce:	31 05       	cpc	r19, r1
 3d0:	09 f4       	brne	.+2      	; 0x3d4 <Dispatch+0x16>
 3d2:	7a c0       	rjmp	.+244    	; 0x4c8 <Dispatch+0x10a>
 3d4:	f9 01       	movw	r30, r18
 3d6:	e1 5f       	subi	r30, 0xF1	; 241
 3d8:	fe 4f       	sbci	r31, 0xFE	; 254
 3da:	80 81       	ld	r24, Z
 3dc:	91 81       	ldd	r25, Z+1	; 0x01
 3de:	89 2b       	or	r24, r25
 3e0:	61 f0       	breq	.+24     	; 0x3fa <Dispatch+0x3c>
 3e2:	c9 01       	movw	r24, r18
 3e4:	69 c0       	rjmp	.+210    	; 0x4b8 <Dispatch+0xfa>
 3e6:	fc 01       	movw	r30, r24
 3e8:	e1 5f       	subi	r30, 0xF1	; 241
 3ea:	fe 4f       	sbci	r31, 0xFE	; 254
 3ec:	40 81       	ld	r20, Z
 3ee:	51 81       	ldd	r21, Z+1	; 0x01
 3f0:	45 2b       	or	r20, r21
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <Dispatch+0x38>
 3f4:	61 c0       	rjmp	.+194    	; 0x4b8 <Dispatch+0xfa>
 3f6:	c9 01       	movw	r24, r18
 3f8:	01 c0       	rjmp	.+2      	; 0x3fc <Dispatch+0x3e>
 3fa:	c9 01       	movw	r24, r18
 3fc:	fc 01       	movw	r30, r24
 3fe:	e1 5f       	subi	r30, 0xF1	; 241
 400:	fe 4f       	sbci	r31, 0xFE	; 254
 402:	40 81       	ld	r20, Z
 404:	51 81       	ldd	r21, Z+1	; 0x01
 406:	45 2b       	or	r20, r21
 408:	a1 f4       	brne	.+40     	; 0x432 <Dispatch+0x74>
 40a:	dc 01       	movw	r26, r24
 40c:	af 5e       	subi	r26, 0xEF	; 239
 40e:	be 4f       	sbci	r27, 0xFE	; 254
 410:	8d 91       	ld	r24, X+
 412:	9c 91       	ld	r25, X
 414:	11 97       	sbiw	r26, 0x01	; 1
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	66 0f       	add	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	fb 01       	movw	r30, r22
 420:	ed 5e       	subi	r30, 0xED	; 237
 422:	fd 4f       	sbci	r31, 0xFD	; 253
 424:	91 83       	std	Z+1, r25	; 0x01
 426:	80 83       	st	Z, r24
 428:	11 96       	adiw	r26, 0x01	; 1
 42a:	1c 92       	st	X, r1
 42c:	1e 92       	st	-X, r1
 42e:	f9 01       	movw	r30, r18
 430:	33 c0       	rjmp	.+102    	; 0x498 <Dispatch+0xda>
 432:	fc 01       	movw	r30, r24
 434:	ef 5e       	subi	r30, 0xEF	; 239
 436:	fe 4f       	sbci	r31, 0xFE	; 254
 438:	80 81       	ld	r24, Z
 43a:	91 81       	ldd	r25, Z+1	; 0x01
 43c:	00 97       	sbiw	r24, 0x00	; 0
 43e:	59 f1       	breq	.+86     	; 0x496 <Dispatch+0xd8>
 440:	fc 01       	movw	r30, r24
 442:	e1 5f       	subi	r30, 0xF1	; 241
 444:	fe 4f       	sbci	r31, 0xFE	; 254
 446:	40 81       	ld	r20, Z
 448:	51 81       	ldd	r21, Z+1	; 0x01
 44a:	45 2b       	or	r20, r21
 44c:	c1 f4       	brne	.+48     	; 0x47e <Dispatch+0xc0>
 44e:	07 c0       	rjmp	.+14     	; 0x45e <Dispatch+0xa0>
 450:	fc 01       	movw	r30, r24
 452:	e1 5f       	subi	r30, 0xF1	; 241
 454:	fe 4f       	sbci	r31, 0xFE	; 254
 456:	40 81       	ld	r20, Z
 458:	51 81       	ldd	r21, Z+1	; 0x01
 45a:	45 2b       	or	r20, r21
 45c:	81 f4       	brne	.+32     	; 0x47e <Dispatch+0xc0>
 45e:	dc 01       	movw	r26, r24
 460:	af 5e       	subi	r26, 0xEF	; 239
 462:	be 4f       	sbci	r27, 0xFE	; 254
 464:	4d 91       	ld	r20, X+
 466:	5c 91       	ld	r21, X
 468:	11 97       	sbiw	r26, 0x01	; 1
 46a:	f9 01       	movw	r30, r18
 46c:	ef 5e       	subi	r30, 0xEF	; 239
 46e:	fe 4f       	sbci	r31, 0xFE	; 254
 470:	51 83       	std	Z+1, r21	; 0x01
 472:	40 83       	st	Z, r20
 474:	11 96       	adiw	r26, 0x01	; 1
 476:	1c 92       	st	X, r1
 478:	1e 92       	st	-X, r1
 47a:	fc 01       	movw	r30, r24
 47c:	0d c0       	rjmp	.+26     	; 0x498 <Dispatch+0xda>
 47e:	f9 01       	movw	r30, r18
 480:	ef 5e       	subi	r30, 0xEF	; 239
 482:	fe 4f       	sbci	r31, 0xFE	; 254
 484:	20 81       	ld	r18, Z
 486:	31 81       	ldd	r19, Z+1	; 0x01
 488:	fc 01       	movw	r30, r24
 48a:	ef 5e       	subi	r30, 0xEF	; 239
 48c:	fe 4f       	sbci	r31, 0xFE	; 254
 48e:	80 81       	ld	r24, Z
 490:	91 81       	ldd	r25, Z+1	; 0x01
 492:	00 97       	sbiw	r24, 0x00	; 0
 494:	e9 f6       	brne	.-70     	; 0x450 <Dispatch+0x92>
 496:	ff cf       	rjmp	.-2      	; 0x496 <Dispatch+0xd8>
 498:	f0 93 0e 02 	sts	0x020E, r31
 49c:	e0 93 0d 02 	sts	0x020D, r30
 4a0:	80 81       	ld	r24, Z
 4a2:	91 81       	ldd	r25, Z+1	; 0x01
 4a4:	90 93 d8 0a 	sts	0x0AD8, r25
 4a8:	80 93 d7 0a 	sts	0x0AD7, r24
 4ac:	ee 5f       	subi	r30, 0xFE	; 254
 4ae:	fe 4f       	sbci	r31, 0xFE	; 254
 4b0:	83 e0       	ldi	r24, 0x03	; 3
 4b2:	80 83       	st	Z, r24
 4b4:	78 94       	sei
 4b6:	08 95       	ret
 4b8:	fc 01       	movw	r30, r24
 4ba:	ef 5e       	subi	r30, 0xEF	; 239
 4bc:	fe 4f       	sbci	r31, 0xFE	; 254
 4be:	80 81       	ld	r24, Z
 4c0:	91 81       	ldd	r25, Z+1	; 0x01
 4c2:	00 97       	sbiw	r24, 0x00	; 0
 4c4:	09 f0       	breq	.+2      	; 0x4c8 <Dispatch+0x10a>
 4c6:	8f cf       	rjmp	.-226    	; 0x3e6 <Dispatch+0x28>
 4c8:	6f 5f       	subi	r22, 0xFF	; 255
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	14 96       	adiw	r26, 0x04	; 4
 4ce:	6b 30       	cpi	r22, 0x0B	; 11
 4d0:	71 05       	cpc	r23, r1
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <Dispatch+0x118>
 4d4:	78 cf       	rjmp	.-272    	; 0x3c6 <Dispatch+0x8>
 4d6:	ff cf       	rjmp	.-2      	; 0x4d6 <Dispatch+0x118>

000004d8 <check_rqueue>:
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	c0 91 0d 02 	lds	r28, 0x020D
 4e0:	d0 91 0e 02 	lds	r29, 0x020E
 4e4:	fe 01       	movw	r30, r28
 4e6:	e8 5f       	subi	r30, 0xF8	; 248
 4e8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ea:	80 81       	ld	r24, Z
 4ec:	88 23       	and	r24, r24
 4ee:	59 f1       	breq	.+86     	; 0x546 <check_rqueue+0x6e>
 4f0:	a3 e1       	ldi	r26, 0x13	; 19
 4f2:	b2 e0       	ldi	r27, 0x02	; 2
 4f4:	40 e0       	ldi	r20, 0x00	; 0
 4f6:	50 e0       	ldi	r21, 0x00	; 0
 4f8:	ef 01       	movw	r28, r30
 4fa:	8d 91       	ld	r24, X+
 4fc:	9c 91       	ld	r25, X
 4fe:	11 97       	sbiw	r26, 0x01	; 1
 500:	00 97       	sbiw	r24, 0x00	; 0
 502:	b1 f0       	breq	.+44     	; 0x530 <check_rqueue+0x58>
 504:	fc 01       	movw	r30, r24
 506:	e1 5f       	subi	r30, 0xF1	; 241
 508:	fe 4f       	sbci	r31, 0xFE	; 254
 50a:	20 81       	ld	r18, Z
 50c:	31 81       	ldd	r19, Z+1	; 0x01
 50e:	23 2b       	or	r18, r19
 510:	41 f4       	brne	.+16     	; 0x522 <check_rqueue+0x4a>
 512:	1c c0       	rjmp	.+56     	; 0x54c <check_rqueue+0x74>
 514:	fc 01       	movw	r30, r24
 516:	e1 5f       	subi	r30, 0xF1	; 241
 518:	fe 4f       	sbci	r31, 0xFE	; 254
 51a:	20 81       	ld	r18, Z
 51c:	31 81       	ldd	r19, Z+1	; 0x01
 51e:	23 2b       	or	r18, r19
 520:	c1 f0       	breq	.+48     	; 0x552 <check_rqueue+0x7a>
 522:	fc 01       	movw	r30, r24
 524:	ef 5e       	subi	r30, 0xEF	; 239
 526:	fe 4f       	sbci	r31, 0xFE	; 254
 528:	80 81       	ld	r24, Z
 52a:	91 81       	ldd	r25, Z+1	; 0x01
 52c:	00 97       	sbiw	r24, 0x00	; 0
 52e:	91 f7       	brne	.-28     	; 0x514 <check_rqueue+0x3c>
 530:	4f 5f       	subi	r20, 0xFF	; 255
 532:	5f 4f       	sbci	r21, 0xFF	; 255
 534:	88 81       	ld	r24, Y
 536:	14 96       	adiw	r26, 0x04	; 4
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	48 17       	cp	r20, r24
 53c:	59 07       	cpc	r21, r25
 53e:	ec f2       	brlt	.-70     	; 0x4fa <check_rqueue+0x22>
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	08 c0       	rjmp	.+16     	; 0x556 <check_rqueue+0x7e>
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	05 c0       	rjmp	.+10     	; 0x556 <check_rqueue+0x7e>
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <check_rqueue+0x7e>
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

0000055c <preemption>:
 55c:	bd df       	rcall	.-134    	; 0x4d8 <check_rqueue>
 55e:	89 2b       	or	r24, r25
 560:	31 f1       	breq	.+76     	; 0x5ae <preemption+0x52>
 562:	80 91 0d 02 	lds	r24, 0x020D
 566:	90 91 0e 02 	lds	r25, 0x020E
 56a:	fc 01       	movw	r30, r24
 56c:	ee 5f       	subi	r30, 0xFE	; 254
 56e:	fe 4f       	sbci	r31, 0xFE	; 254
 570:	21 e0       	ldi	r18, 0x01	; 1
 572:	20 83       	st	Z, r18
 574:	dc 01       	movw	r26, r24
 576:	a8 5f       	subi	r26, 0xF8	; 248
 578:	be 4f       	sbci	r27, 0xFE	; 254
 57a:	ec 91       	ld	r30, X
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	ee 0f       	add	r30, r30
 580:	ff 1f       	adc	r31, r31
 582:	ee 0f       	add	r30, r30
 584:	ff 1f       	adc	r31, r31
 586:	ed 5e       	subi	r30, 0xED	; 237
 588:	fd 4f       	sbci	r31, 0xFD	; 253
 58a:	20 81       	ld	r18, Z
 58c:	31 81       	ldd	r19, Z+1	; 0x01
 58e:	fc 01       	movw	r30, r24
 590:	ef 5e       	subi	r30, 0xEF	; 239
 592:	fe 4f       	sbci	r31, 0xFE	; 254
 594:	31 83       	std	Z+1, r19	; 0x01
 596:	20 83       	st	Z, r18
 598:	ec 91       	ld	r30, X
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	ee 0f       	add	r30, r30
 59e:	ff 1f       	adc	r31, r31
 5a0:	ee 0f       	add	r30, r30
 5a2:	ff 1f       	adc	r31, r31
 5a4:	ed 5e       	subi	r30, 0xED	; 237
 5a6:	fd 4f       	sbci	r31, 0xFD	; 253
 5a8:	91 83       	std	Z+1, r25	; 0x01
 5aa:	80 83       	st	Z, r24
 5ac:	08 cf       	rjmp	.-496    	; 0x3be <Dispatch>
 5ae:	08 95       	ret

000005b0 <set_timer>:
 5b0:	10 92 80 00 	sts	0x0080, r1
 5b4:	e1 e8       	ldi	r30, 0x81	; 129
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	10 82       	st	Z, r1
 5ba:	80 81       	ld	r24, Z
 5bc:	88 60       	ori	r24, 0x08	; 8
 5be:	80 83       	st	Z, r24
 5c0:	80 81       	ld	r24, Z
 5c2:	82 60       	ori	r24, 0x02	; 2
 5c4:	80 83       	st	Z, r24
 5c6:	80 e2       	ldi	r24, 0x20	; 32
 5c8:	9e e4       	ldi	r25, 0x4E	; 78
 5ca:	90 93 89 00 	sts	0x0089, r25
 5ce:	80 93 88 00 	sts	0x0088, r24
 5d2:	ef e6       	ldi	r30, 0x6F	; 111
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	80 81       	ld	r24, Z
 5d8:	82 60       	ori	r24, 0x02	; 2
 5da:	80 83       	st	Z, r24
 5dc:	08 95       	ret

000005de <OS_Init>:
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	81 b9       	out	0x01, r24	; 1
 5e2:	09 9a       	sbi	0x01, 1	; 1
 5e4:	10 98       	cbi	0x02, 0	; 2
 5e6:	11 98       	cbi	0x02, 1	; 2
 5e8:	e3 df       	rcall	.-58     	; 0x5b0 <set_timer>
 5ea:	10 92 08 02 	sts	0x0208, r1
 5ee:	10 92 07 02 	sts	0x0207, r1
 5f2:	10 92 0a 02 	sts	0x020A, r1
 5f6:	10 92 09 02 	sts	0x0209, r1
 5fa:	10 92 0c 02 	sts	0x020C, r1
 5fe:	10 92 0b 02 	sts	0x020B, r1
 602:	af e3       	ldi	r26, 0x3F	; 63
 604:	b2 e0       	ldi	r27, 0x02	; 2
 606:	20 e0       	ldi	r18, 0x00	; 0
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	43 e1       	ldi	r20, 0x13	; 19
 60c:	51 e0       	ldi	r21, 0x01	; 1
 60e:	fd 01       	movw	r30, r26
 610:	ca 01       	movw	r24, r20
 612:	11 92       	st	Z+, r1
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	e9 f7       	brne	.-6      	; 0x612 <OS_Init+0x34>
 618:	24 9f       	mul	r18, r20
 61a:	c0 01       	movw	r24, r0
 61c:	25 9f       	mul	r18, r21
 61e:	90 0d       	add	r25, r0
 620:	34 9f       	mul	r19, r20
 622:	90 0d       	add	r25, r0
 624:	11 24       	eor	r1, r1
 626:	81 5c       	subi	r24, 0xC1	; 193
 628:	9d 4f       	sbci	r25, 0xFD	; 253
 62a:	fc 01       	movw	r30, r24
 62c:	ee 5f       	subi	r30, 0xFE	; 254
 62e:	fe 4f       	sbci	r31, 0xFE	; 254
 630:	10 82       	st	Z, r1
 632:	37 96       	adiw	r30, 0x07	; 7
 634:	31 83       	std	Z+1, r19	; 0x01
 636:	20 83       	st	Z, r18
 638:	ad 5e       	subi	r26, 0xED	; 237
 63a:	be 4f       	sbci	r27, 0xFE	; 254
 63c:	38 96       	adiw	r30, 0x08	; 8
 63e:	b1 83       	std	Z+1, r27	; 0x01
 640:	a0 83       	st	Z, r26
 642:	2f 5f       	subi	r18, 0xFF	; 255
 644:	3f 4f       	sbci	r19, 0xFF	; 255
 646:	27 30       	cpi	r18, 0x07	; 7
 648:	31 05       	cpc	r19, r1
 64a:	09 f7       	brne	.-62     	; 0x60e <OS_Init+0x30>
 64c:	10 92 c6 0a 	sts	0x0AC6, r1
 650:	10 92 d6 0a 	sts	0x0AD6, r1
 654:	10 92 d5 0a 	sts	0x0AD5, r1
 658:	ef e0       	ldi	r30, 0x0F	; 15
 65a:	f2 e0       	ldi	r31, 0x02	; 2
 65c:	8f e3       	ldi	r24, 0x3F	; 63
 65e:	92 e0       	ldi	r25, 0x02	; 2
 660:	91 83       	std	Z+1, r25	; 0x01
 662:	80 83       	st	Z, r24
 664:	84 ec       	ldi	r24, 0xC4	; 196
 666:	99 e0       	ldi	r25, 0x09	; 9
 668:	93 83       	std	Z+3, r25	; 0x03
 66a:	82 83       	std	Z+2, r24	; 0x02
 66c:	08 95       	ret

0000066e <OS_Start>:
 66e:	cf 92       	push	r12
 670:	df 92       	push	r13
 672:	ff 92       	push	r15
 674:	0f 93       	push	r16
 676:	1f 93       	push	r17
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	80 91 09 02 	lds	r24, 0x0209
 680:	90 91 0a 02 	lds	r25, 0x020A
 684:	89 2b       	or	r24, r25
 686:	09 f0       	breq	.+2      	; 0x68a <OS_Start+0x1c>
 688:	fd c0       	rjmp	.+506    	; 0x884 <OS_Start+0x216>
 68a:	80 91 07 02 	lds	r24, 0x0207
 68e:	90 91 08 02 	lds	r25, 0x0208
 692:	89 2b       	or	r24, r25
 694:	09 f4       	brne	.+2      	; 0x698 <OS_Start+0x2a>
 696:	f6 c0       	rjmp	.+492    	; 0x884 <OS_Start+0x216>
 698:	f8 94       	cli
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	90 93 0a 02 	sts	0x020A, r25
 6a2:	80 93 09 02 	sts	0x0209, r24
 6a6:	8b de       	rcall	.-746    	; 0x3be <Dispatch>
 6a8:	ff 24       	eor	r15, r15
 6aa:	f3 94       	inc	r15
 6ac:	cc 24       	eor	r12, r12
 6ae:	c3 94       	inc	r12
 6b0:	d1 2c       	mov	r13, r1
 6b2:	cf e0       	ldi	r28, 0x0F	; 15
 6b4:	d2 e0       	ldi	r29, 0x02	; 2
 6b6:	00 e0       	ldi	r16, 0x00	; 0
 6b8:	12 e0       	ldi	r17, 0x02	; 2
 6ba:	e0 91 0d 02 	lds	r30, 0x020D
 6be:	f0 91 0e 02 	lds	r31, 0x020E
 6c2:	80 81       	ld	r24, Z
 6c4:	91 81       	ldd	r25, Z+1	; 0x01
 6c6:	90 93 d8 0a 	sts	0x0AD8, r25
 6ca:	80 93 d7 0a 	sts	0x0AD7, r24
 6ce:	e1 5f       	subi	r30, 0xF1	; 241
 6d0:	fe 4f       	sbci	r31, 0xFE	; 254
 6d2:	80 81       	ld	r24, Z
 6d4:	91 81       	ldd	r25, Z+1	; 0x01
 6d6:	89 2b       	or	r24, r25
 6d8:	09 f0       	breq	.+2      	; 0x6dc <OS_Start+0x6e>
 6da:	ff cf       	rjmp	.-2      	; 0x6da <OS_Start+0x6c>
 6dc:	16 dd       	rcall	.-1492   	; 0x10a <CSwitch>
 6de:	e0 91 0d 02 	lds	r30, 0x020D
 6e2:	f0 91 0e 02 	lds	r31, 0x020E
 6e6:	80 91 d7 0a 	lds	r24, 0x0AD7
 6ea:	90 91 d8 0a 	lds	r25, 0x0AD8
 6ee:	91 83       	std	Z+1, r25	; 0x01
 6f0:	80 83       	st	Z, r24
 6f2:	df 01       	movw	r26, r30
 6f4:	ab 5f       	subi	r26, 0xFB	; 251
 6f6:	be 4f       	sbci	r27, 0xFE	; 254
 6f8:	8c 91       	ld	r24, X
 6fa:	83 30       	cpi	r24, 0x03	; 3
 6fc:	09 f4       	brne	.+2      	; 0x700 <OS_Start+0x92>
 6fe:	62 c0       	rjmp	.+196    	; 0x7c4 <OS_Start+0x156>
 700:	28 f4       	brcc	.+10     	; 0x70c <OS_Start+0x9e>
 702:	81 30       	cpi	r24, 0x01	; 1
 704:	61 f0       	breq	.+24     	; 0x71e <OS_Start+0xb0>
 706:	82 30       	cpi	r24, 0x02	; 2
 708:	d1 f0       	breq	.+52     	; 0x73e <OS_Start+0xd0>
 70a:	d7 cf       	rjmp	.-82     	; 0x6ba <OS_Start+0x4c>
 70c:	86 30       	cpi	r24, 0x06	; 6
 70e:	09 f4       	brne	.+2      	; 0x712 <OS_Start+0xa4>
 710:	9b c0       	rjmp	.+310    	; 0x848 <OS_Start+0x1da>
 712:	87 30       	cpi	r24, 0x07	; 7
 714:	09 f4       	brne	.+2      	; 0x718 <OS_Start+0xaa>
 716:	9a c0       	rjmp	.+308    	; 0x84c <OS_Start+0x1de>
 718:	85 30       	cpi	r24, 0x05	; 5
 71a:	79 f6       	brne	.-98     	; 0x6ba <OS_Start+0x4c>
 71c:	15 c0       	rjmp	.+42     	; 0x748 <OS_Start+0xda>
 71e:	d8 01       	movw	r26, r16
 720:	12 96       	adiw	r26, 0x02	; 2
 722:	4d 91       	ld	r20, X+
 724:	5c 91       	ld	r21, X
 726:	13 97       	sbiw	r26, 0x03	; 3
 728:	14 96       	adiw	r26, 0x04	; 4
 72a:	6c 91       	ld	r22, X
 72c:	14 97       	sbiw	r26, 0x04	; 4
 72e:	8d 91       	ld	r24, X+
 730:	9c 91       	ld	r25, X
 732:	99 dd       	rcall	.-1230   	; 0x266 <Kernel_Create_Task>
 734:	f8 01       	movw	r30, r16
 736:	96 83       	std	Z+6, r25	; 0x06
 738:	85 83       	std	Z+5, r24	; 0x05
 73a:	10 df       	rcall	.-480    	; 0x55c <preemption>
 73c:	be cf       	rjmp	.-132    	; 0x6ba <OS_Start+0x4c>
 73e:	ee 5f       	subi	r30, 0xFE	; 254
 740:	fe 4f       	sbci	r31, 0xFE	; 254
 742:	f0 82       	st	Z, r15
 744:	3c de       	rcall	.-904    	; 0x3be <Dispatch>
 746:	b9 cf       	rjmp	.-142    	; 0x6ba <OS_Start+0x4c>
 748:	df 01       	movw	r26, r30
 74a:	ae 5f       	subi	r26, 0xFE	; 254
 74c:	be 4f       	sbci	r27, 0xFE	; 254
 74e:	fc 92       	st	X, r15
 750:	16 96       	adiw	r26, 0x06	; 6
 752:	8c 91       	ld	r24, X
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	19 96       	adiw	r26, 0x09	; 9
 758:	11 96       	adiw	r26, 0x01	; 1
 75a:	1c 92       	st	X, r1
 75c:	1e 92       	st	-X, r1
 75e:	dc 01       	movw	r26, r24
 760:	aa 0f       	add	r26, r26
 762:	bb 1f       	adc	r27, r27
 764:	aa 0f       	add	r26, r26
 766:	bb 1f       	adc	r27, r27
 768:	ad 5e       	subi	r26, 0xED	; 237
 76a:	bd 4f       	sbci	r27, 0xFD	; 253
 76c:	2d 91       	ld	r18, X+
 76e:	3c 91       	ld	r19, X
 770:	23 2b       	or	r18, r19
 772:	79 f4       	brne	.+30     	; 0x792 <OS_Start+0x124>
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	88 0f       	add	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	dc 01       	movw	r26, r24
 77e:	ad 5e       	subi	r26, 0xED	; 237
 780:	bd 4f       	sbci	r27, 0xFD	; 253
 782:	11 96       	adiw	r26, 0x01	; 1
 784:	fc 93       	st	X, r31
 786:	ee 93       	st	-X, r30
 788:	13 96       	adiw	r26, 0x03	; 3
 78a:	fc 93       	st	X, r31
 78c:	ee 93       	st	-X, r30
 78e:	12 97       	sbiw	r26, 0x02	; 2
 790:	17 c0       	rjmp	.+46     	; 0x7c0 <OS_Start+0x152>
 792:	88 0f       	add	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	9c 01       	movw	r18, r24
 79c:	2d 5e       	subi	r18, 0xED	; 237
 79e:	3d 4f       	sbci	r19, 0xFD	; 253
 7a0:	d9 01       	movw	r26, r18
 7a2:	12 96       	adiw	r26, 0x02	; 2
 7a4:	8d 91       	ld	r24, X+
 7a6:	9c 91       	ld	r25, X
 7a8:	13 97       	sbiw	r26, 0x03	; 3
 7aa:	8f 5e       	subi	r24, 0xEF	; 239
 7ac:	9e 4f       	sbci	r25, 0xFE	; 254
 7ae:	dc 01       	movw	r26, r24
 7b0:	11 96       	adiw	r26, 0x01	; 1
 7b2:	fc 93       	st	X, r31
 7b4:	ee 93       	st	-X, r30
 7b6:	d9 01       	movw	r26, r18
 7b8:	13 96       	adiw	r26, 0x03	; 3
 7ba:	fc 93       	st	X, r31
 7bc:	ee 93       	st	-X, r30
 7be:	12 97       	sbiw	r26, 0x02	; 2
 7c0:	fe dd       	rcall	.-1028   	; 0x3be <Dispatch>
 7c2:	7b cf       	rjmp	.-266    	; 0x6ba <OS_Start+0x4c>
 7c4:	df 01       	movw	r26, r30
 7c6:	ae 5f       	subi	r26, 0xFE	; 254
 7c8:	be 4f       	sbci	r27, 0xFE	; 254
 7ca:	fc 92       	st	X, r15
 7cc:	1d 96       	adiw	r26, 0x0d	; 13
 7ce:	11 96       	adiw	r26, 0x01	; 1
 7d0:	dc 92       	st	X, r13
 7d2:	ce 92       	st	-X, r12
 7d4:	17 97       	sbiw	r26, 0x07	; 7
 7d6:	8c 91       	ld	r24, X
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	19 96       	adiw	r26, 0x09	; 9
 7dc:	11 96       	adiw	r26, 0x01	; 1
 7de:	1c 92       	st	X, r1
 7e0:	1e 92       	st	-X, r1
 7e2:	dc 01       	movw	r26, r24
 7e4:	aa 0f       	add	r26, r26
 7e6:	bb 1f       	adc	r27, r27
 7e8:	aa 0f       	add	r26, r26
 7ea:	bb 1f       	adc	r27, r27
 7ec:	ad 5e       	subi	r26, 0xED	; 237
 7ee:	bd 4f       	sbci	r27, 0xFD	; 253
 7f0:	2d 91       	ld	r18, X+
 7f2:	3c 91       	ld	r19, X
 7f4:	23 2b       	or	r18, r19
 7f6:	79 f4       	brne	.+30     	; 0x816 <OS_Start+0x1a8>
 7f8:	88 0f       	add	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	88 0f       	add	r24, r24
 7fe:	99 1f       	adc	r25, r25
 800:	dc 01       	movw	r26, r24
 802:	ad 5e       	subi	r26, 0xED	; 237
 804:	bd 4f       	sbci	r27, 0xFD	; 253
 806:	11 96       	adiw	r26, 0x01	; 1
 808:	fc 93       	st	X, r31
 80a:	ee 93       	st	-X, r30
 80c:	13 96       	adiw	r26, 0x03	; 3
 80e:	fc 93       	st	X, r31
 810:	ee 93       	st	-X, r30
 812:	12 97       	sbiw	r26, 0x02	; 2
 814:	17 c0       	rjmp	.+46     	; 0x844 <OS_Start+0x1d6>
 816:	88 0f       	add	r24, r24
 818:	99 1f       	adc	r25, r25
 81a:	88 0f       	add	r24, r24
 81c:	99 1f       	adc	r25, r25
 81e:	9c 01       	movw	r18, r24
 820:	2d 5e       	subi	r18, 0xED	; 237
 822:	3d 4f       	sbci	r19, 0xFD	; 253
 824:	d9 01       	movw	r26, r18
 826:	12 96       	adiw	r26, 0x02	; 2
 828:	8d 91       	ld	r24, X+
 82a:	9c 91       	ld	r25, X
 82c:	13 97       	sbiw	r26, 0x03	; 3
 82e:	8f 5e       	subi	r24, 0xEF	; 239
 830:	9e 4f       	sbci	r25, 0xFE	; 254
 832:	dc 01       	movw	r26, r24
 834:	11 96       	adiw	r26, 0x01	; 1
 836:	fc 93       	st	X, r31
 838:	ee 93       	st	-X, r30
 83a:	d9 01       	movw	r26, r18
 83c:	13 96       	adiw	r26, 0x03	; 3
 83e:	fc 93       	st	X, r31
 840:	ee 93       	st	-X, r30
 842:	12 97       	sbiw	r26, 0x02	; 2
 844:	bc dd       	rcall	.-1160   	; 0x3be <Dispatch>
 846:	39 cf       	rjmp	.-398    	; 0x6ba <OS_Start+0x4c>
 848:	89 de       	rcall	.-750    	; 0x55c <preemption>
 84a:	37 cf       	rjmp	.-402    	; 0x6ba <OS_Start+0x4c>
 84c:	df 01       	movw	r26, r30
 84e:	ae 5f       	subi	r26, 0xFE	; 254
 850:	be 4f       	sbci	r27, 0xFE	; 254
 852:	1c 92       	st	X, r1
 854:	1f 96       	adiw	r26, 0x0f	; 15
 856:	11 96       	adiw	r26, 0x01	; 1
 858:	1c 92       	st	X, r1
 85a:	1e 92       	st	-X, r1
 85c:	88 81       	ld	r24, Y
 85e:	99 81       	ldd	r25, Y+1	; 0x01
 860:	89 2b       	or	r24, r25
 862:	29 f4       	brne	.+10     	; 0x86e <OS_Start+0x200>
 864:	f9 83       	std	Y+1, r31	; 0x01
 866:	e8 83       	st	Y, r30
 868:	fb 83       	std	Y+3, r31	; 0x03
 86a:	ea 83       	std	Y+2, r30	; 0x02
 86c:	09 c0       	rjmp	.+18     	; 0x880 <OS_Start+0x212>
 86e:	aa 81       	ldd	r26, Y+2	; 0x02
 870:	bb 81       	ldd	r27, Y+3	; 0x03
 872:	af 5e       	subi	r26, 0xEF	; 239
 874:	be 4f       	sbci	r27, 0xFE	; 254
 876:	11 96       	adiw	r26, 0x01	; 1
 878:	fc 93       	st	X, r31
 87a:	ee 93       	st	-X, r30
 87c:	fb 83       	std	Y+3, r31	; 0x03
 87e:	ea 83       	std	Y+2, r30	; 0x02
 880:	9e dd       	rcall	.-1220   	; 0x3be <Dispatch>
 882:	1b cf       	rjmp	.-458    	; 0x6ba <OS_Start+0x4c>
 884:	df 91       	pop	r29
 886:	cf 91       	pop	r28
 888:	1f 91       	pop	r17
 88a:	0f 91       	pop	r16
 88c:	ff 90       	pop	r15
 88e:	df 90       	pop	r13
 890:	cf 90       	pop	r12
 892:	08 95       	ret

00000894 <Task_Create>:
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
 898:	20 91 09 02 	lds	r18, 0x0209
 89c:	30 91 0a 02 	lds	r19, 0x020A
 8a0:	23 2b       	or	r18, r19
 8a2:	a1 f0       	breq	.+40     	; 0x8cc <Task_Create+0x38>
 8a4:	f8 94       	cli
 8a6:	c0 e0       	ldi	r28, 0x00	; 0
 8a8:	d2 e0       	ldi	r29, 0x02	; 2
 8aa:	99 83       	std	Y+1, r25	; 0x01
 8ac:	88 83       	st	Y, r24
 8ae:	5b 83       	std	Y+3, r21	; 0x03
 8b0:	4a 83       	std	Y+2, r20	; 0x02
 8b2:	6c 83       	std	Y+4, r22	; 0x04
 8b4:	e0 91 0d 02 	lds	r30, 0x020D
 8b8:	f0 91 0e 02 	lds	r31, 0x020E
 8bc:	eb 5f       	subi	r30, 0xFB	; 251
 8be:	fe 4f       	sbci	r31, 0xFE	; 254
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	80 83       	st	Z, r24
 8c4:	79 dc       	rcall	.-1806   	; 0x1b8 <Enter_Kernel>
 8c6:	8d 81       	ldd	r24, Y+5	; 0x05
 8c8:	9e 81       	ldd	r25, Y+6	; 0x06
 8ca:	01 c0       	rjmp	.+2      	; 0x8ce <Task_Create+0x3a>
 8cc:	cc dc       	rcall	.-1640   	; 0x266 <Kernel_Create_Task>
 8ce:	df 91       	pop	r29
 8d0:	cf 91       	pop	r28
 8d2:	08 95       	ret

000008d4 <a_main>:
 8d4:	40 e0       	ldi	r20, 0x00	; 0
 8d6:	50 e0       	ldi	r21, 0x00	; 0
 8d8:	65 e0       	ldi	r22, 0x05	; 5
 8da:	80 eb       	ldi	r24, 0xB0	; 176
 8dc:	94 e0       	ldi	r25, 0x04	; 4
 8de:	da df       	rcall	.-76     	; 0x894 <Task_Create>
 8e0:	5d cd       	rjmp	.-1350   	; 0x39c <Task_Terminate>
 8e2:	08 95       	ret

000008e4 <Task_Yield>:
 8e4:	80 91 09 02 	lds	r24, 0x0209
 8e8:	90 91 0a 02 	lds	r25, 0x020A
 8ec:	89 2b       	or	r24, r25
 8ee:	51 f0       	breq	.+20     	; 0x904 <Task_Yield+0x20>
 8f0:	f8 94       	cli
 8f2:	e0 91 0d 02 	lds	r30, 0x020D
 8f6:	f0 91 0e 02 	lds	r31, 0x020E
 8fa:	eb 5f       	subi	r30, 0xFB	; 251
 8fc:	fe 4f       	sbci	r31, 0xFE	; 254
 8fe:	85 e0       	ldi	r24, 0x05	; 5
 900:	80 83       	st	Z, r24
 902:	5a cc       	rjmp	.-1868   	; 0x1b8 <Enter_Kernel>
 904:	08 95       	ret

00000906 <Ping2>:
 906:	d0 e0       	ldi	r29, 0x00	; 0
 908:	cd e7       	ldi	r28, 0x7D	; 125
 90a:	10 98       	cbi	0x02, 0	; 2
 90c:	8d 2f       	mov	r24, r29
 90e:	9c 2f       	mov	r25, r28
 910:	01 97       	sbiw	r24, 0x01	; 1
 912:	f1 f7       	brne	.-4      	; 0x910 <Ping2+0xa>
 914:	8d 2f       	mov	r24, r29
 916:	9c 2f       	mov	r25, r28
 918:	01 97       	sbiw	r24, 0x01	; 1
 91a:	f1 f7       	brne	.-4      	; 0x918 <Ping2+0x12>
 91c:	8d 2f       	mov	r24, r29
 91e:	9c 2f       	mov	r25, r28
 920:	01 97       	sbiw	r24, 0x01	; 1
 922:	f1 f7       	brne	.-4      	; 0x920 <Ping2+0x1a>
 924:	8d 2f       	mov	r24, r29
 926:	9c 2f       	mov	r25, r28
 928:	01 97       	sbiw	r24, 0x01	; 1
 92a:	f1 f7       	brne	.-4      	; 0x928 <Ping2+0x22>
 92c:	db df       	rcall	.-74     	; 0x8e4 <Task_Yield>
 92e:	ed cf       	rjmp	.-38     	; 0x90a <Ping2+0x4>

00000930 <Ping>:
 930:	80 e0       	ldi	r24, 0x00	; 0
 932:	9d e7       	ldi	r25, 0x7D	; 125
 934:	01 97       	sbiw	r24, 0x01	; 1
 936:	f1 f7       	brne	.-4      	; 0x934 <Ping+0x4>
 938:	80 e0       	ldi	r24, 0x00	; 0
 93a:	9d e7       	ldi	r25, 0x7D	; 125
 93c:	01 97       	sbiw	r24, 0x01	; 1
 93e:	f1 f7       	brne	.-4      	; 0x93c <Ping+0xc>
 940:	80 e0       	ldi	r24, 0x00	; 0
 942:	9d e7       	ldi	r25, 0x7D	; 125
 944:	01 97       	sbiw	r24, 0x01	; 1
 946:	f1 f7       	brne	.-4      	; 0x944 <Ping+0x14>
 948:	80 e0       	ldi	r24, 0x00	; 0
 94a:	9d e7       	ldi	r25, 0x7D	; 125
 94c:	01 97       	sbiw	r24, 0x01	; 1
 94e:	f1 f7       	brne	.-4      	; 0x94c <Ping+0x1c>
 950:	40 e0       	ldi	r20, 0x00	; 0
 952:	50 e0       	ldi	r21, 0x00	; 0
 954:	60 e0       	ldi	r22, 0x00	; 0
 956:	82 e3       	ldi	r24, 0x32	; 50
 958:	95 e0       	ldi	r25, 0x05	; 5
 95a:	9c df       	rcall	.-200    	; 0x894 <Task_Create>
 95c:	c3 df       	rcall	.-122    	; 0x8e4 <Task_Yield>
 95e:	fe cf       	rjmp	.-4      	; 0x95c <Ping+0x2c>

00000960 <Pong>:
 960:	40 e0       	ldi	r20, 0x00	; 0
 962:	50 e0       	ldi	r21, 0x00	; 0
 964:	61 e0       	ldi	r22, 0x01	; 1
 966:	88 e9       	ldi	r24, 0x98	; 152
 968:	94 e0       	ldi	r25, 0x04	; 4
 96a:	94 df       	rcall	.-216    	; 0x894 <Task_Create>
 96c:	bb df       	rcall	.-138    	; 0x8e4 <Task_Yield>
 96e:	fe cf       	rjmp	.-4      	; 0x96c <Pong+0xc>

00000970 <Task_Suspend>:

void Task_Suspend( PID p ){
	int i;
	for(i=0;i<11;i++){
		if (Process[i].pid==p){
 970:	20 91 48 03 	lds	r18, 0x0348
 974:	30 91 49 03 	lds	r19, 0x0349
 978:	28 17       	cp	r18, r24
 97a:	39 07       	cpc	r19, r25
 97c:	99 f0       	breq	.+38     	; 0x9a4 <Task_Suspend+0x34>
 97e:	21 e0       	ldi	r18, 0x01	; 1
 980:	30 e0       	ldi	r19, 0x00	; 0
 982:	63 e1       	ldi	r22, 0x13	; 19
 984:	71 e0       	ldi	r23, 0x01	; 1
 986:	26 9f       	mul	r18, r22
 988:	f0 01       	movw	r30, r0
 98a:	27 9f       	mul	r18, r23
 98c:	f0 0d       	add	r31, r0
 98e:	36 9f       	mul	r19, r22
 990:	f0 0d       	add	r31, r0
 992:	11 24       	eor	r1, r1
 994:	e8 5b       	subi	r30, 0xB8	; 184
 996:	fc 4f       	sbci	r31, 0xFC	; 252
 998:	40 81       	ld	r20, Z
 99a:	51 81       	ldd	r21, Z+1	; 0x01
 99c:	48 17       	cp	r20, r24
 99e:	59 07       	cpc	r21, r25
 9a0:	f9 f4       	brne	.+62     	; 0x9e0 <Task_Suspend+0x70>
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <Task_Suspend+0x38>
	return Cp->arg;
}

void Task_Suspend( PID p ){
	int i;
	for(i=0;i<11;i++){
 9a4:	20 e0       	ldi	r18, 0x00	; 0
 9a6:	30 e0       	ldi	r19, 0x00	; 0
		if (Process[i].pid==p){
			Process[i].suspend=1;
 9a8:	43 e1       	ldi	r20, 0x13	; 19
 9aa:	51 e0       	ldi	r21, 0x01	; 1
 9ac:	24 9f       	mul	r18, r20
 9ae:	f0 01       	movw	r30, r0
 9b0:	25 9f       	mul	r18, r21
 9b2:	f0 0d       	add	r31, r0
 9b4:	34 9f       	mul	r19, r20
 9b6:	f0 0d       	add	r31, r0
 9b8:	11 24       	eor	r1, r1
 9ba:	e2 5b       	subi	r30, 0xB2	; 178
 9bc:	fc 4f       	sbci	r31, 0xFC	; 252
 9be:	21 e0       	ldi	r18, 0x01	; 1
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	31 83       	std	Z+1, r19	; 0x01
 9c4:	20 83       	st	Z, r18
			break;
		}
	}
	if (p==Cp->pid){
 9c6:	20 91 0d 02 	lds	r18, 0x020D
 9ca:	30 91 0e 02 	lds	r19, 0x020E
 9ce:	f9 01       	movw	r30, r18
 9d0:	e7 5f       	subi	r30, 0xF7	; 247
 9d2:	fe 4f       	sbci	r31, 0xFE	; 254
 9d4:	40 81       	ld	r20, Z
 9d6:	51 81       	ldd	r21, Z+1	; 0x01
 9d8:	48 17       	cp	r20, r24
 9da:	59 07       	cpc	r21, r25
 9dc:	59 f4       	brne	.+22     	; 0x9f4 <Task_Suspend+0x84>
 9de:	03 c0       	rjmp	.+6      	; 0x9e6 <Task_Suspend+0x76>
	return Cp->arg;
}

void Task_Suspend( PID p ){
	int i;
	for(i=0;i<11;i++){
 9e0:	2f 5f       	subi	r18, 0xFF	; 255
 9e2:	3f 4f       	sbci	r19, 0xFF	; 255
 9e4:	d0 cf       	rjmp	.-96     	; 0x986 <Task_Suspend+0x16>
			Process[i].suspend=1;
			break;
		}
	}
	if (p==Cp->pid){
		Disable_Interrupt();
 9e6:	f8 94       	cli
		Cp ->request = SUSPEND;
 9e8:	f9 01       	movw	r30, r18
 9ea:	eb 5f       	subi	r30, 0xFB	; 251
 9ec:	fe 4f       	sbci	r31, 0xFE	; 254
 9ee:	83 e0       	ldi	r24, 0x03	; 3
 9f0:	80 83       	st	Z, r24
		Enter_Kernel();
 9f2:	e2 cb       	rjmp	.-2108   	; 0x1b8 <Enter_Kernel>
 9f4:	08 95       	ret

000009f6 <Task_Resume>:
	}
}  
void Task_Resume( PID p ){
	int i;
	for(i=0;i<11;i++){
		if (Process[i].pid==p){
 9f6:	20 91 48 03 	lds	r18, 0x0348
 9fa:	30 91 49 03 	lds	r19, 0x0349
 9fe:	28 17       	cp	r18, r24
 a00:	39 07       	cpc	r19, r25
 a02:	99 f0       	breq	.+38     	; 0xa2a <Task_Resume+0x34>
 a04:	21 e0       	ldi	r18, 0x01	; 1
 a06:	30 e0       	ldi	r19, 0x00	; 0
 a08:	63 e1       	ldi	r22, 0x13	; 19
 a0a:	71 e0       	ldi	r23, 0x01	; 1
 a0c:	26 9f       	mul	r18, r22
 a0e:	f0 01       	movw	r30, r0
 a10:	27 9f       	mul	r18, r23
 a12:	f0 0d       	add	r31, r0
 a14:	36 9f       	mul	r19, r22
 a16:	f0 0d       	add	r31, r0
 a18:	11 24       	eor	r1, r1
 a1a:	e8 5b       	subi	r30, 0xB8	; 184
 a1c:	fc 4f       	sbci	r31, 0xFC	; 252
 a1e:	40 81       	ld	r20, Z
 a20:	51 81       	ldd	r21, Z+1	; 0x01
 a22:	48 17       	cp	r20, r24
 a24:	59 07       	cpc	r21, r25
 a26:	d9 f4       	brne	.+54     	; 0xa5e <Task_Resume+0x68>
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <Task_Resume+0x38>
		Enter_Kernel();
	}
}  
void Task_Resume( PID p ){
	int i;
	for(i=0;i<11;i++){
 a2a:	20 e0       	ldi	r18, 0x00	; 0
 a2c:	30 e0       	ldi	r19, 0x00	; 0
		if (Process[i].pid==p){
			Process[i].suspend=0;
 a2e:	83 e1       	ldi	r24, 0x13	; 19
 a30:	91 e0       	ldi	r25, 0x01	; 1
 a32:	28 9f       	mul	r18, r24
 a34:	f0 01       	movw	r30, r0
 a36:	29 9f       	mul	r18, r25
 a38:	f0 0d       	add	r31, r0
 a3a:	38 9f       	mul	r19, r24
 a3c:	f0 0d       	add	r31, r0
 a3e:	11 24       	eor	r1, r1
 a40:	e2 5b       	subi	r30, 0xB2	; 178
 a42:	fc 4f       	sbci	r31, 0xFC	; 252
 a44:	11 82       	std	Z+1, r1	; 0x01
 a46:	10 82       	st	Z, r1
			break;
		}
	}
	Disable_Interrupt();
 a48:	f8 94       	cli
	Cp ->request = RESUME;
 a4a:	e0 91 0d 02 	lds	r30, 0x020D
 a4e:	f0 91 0e 02 	lds	r31, 0x020E
 a52:	eb 5f       	subi	r30, 0xFB	; 251
 a54:	fe 4f       	sbci	r31, 0xFE	; 254
 a56:	86 e0       	ldi	r24, 0x06	; 6
 a58:	80 83       	st	Z, r24
	Enter_Kernel();
 a5a:	ae cb       	rjmp	.-2212   	; 0x1b8 <Enter_Kernel>
 a5c:	08 95       	ret
		Enter_Kernel();
	}
}  
void Task_Resume( PID p ){
	int i;
	for(i=0;i<11;i++){
 a5e:	2f 5f       	subi	r18, 0xFF	; 255
 a60:	3f 4f       	sbci	r19, 0xFF	; 255
 a62:	d4 cf       	rjmp	.-88     	; 0xa0c <Task_Resume+0x16>

00000a64 <Pong2>:
  */

void Pong2(){
	int x;
	PID p;
	p=Task_Create(Ping2,0,0);
 a64:	40 e0       	ldi	r20, 0x00	; 0
 a66:	50 e0       	ldi	r21, 0x00	; 0
 a68:	60 e0       	ldi	r22, 0x00	; 0
 a6a:	83 e8       	ldi	r24, 0x83	; 131
 a6c:	94 e0       	ldi	r25, 0x04	; 4
 a6e:	12 df       	rcall	.-476    	; 0x894 <Task_Create>
 a70:	ec 01       	movw	r28, r24
			//Task_Suspend(p);
	for(;;) {
		//LED on
		PORTA |= (1<<PA0);
 a72:	00 e0       	ldi	r16, 0x00	; 0
 a74:	1d e7       	ldi	r17, 0x7D	; 125
 a76:	10 9a       	sbi	0x02, 0	; 2
 a78:	20 2f       	mov	r18, r16
 a7a:	31 2f       	mov	r19, r17
 a7c:	21 50       	subi	r18, 0x01	; 1
 a7e:	31 09       	sbc	r19, r1
		for(x=0;x<32000;x++);
 a80:	e9 f7       	brne	.-6      	; 0xa7c <Pong2+0x18>
 a82:	80 2f       	mov	r24, r16
 a84:	91 2f       	mov	r25, r17
 a86:	01 97       	sbiw	r24, 0x01	; 1
		for(x=0;x<32000;x++);
 a88:	f1 f7       	brne	.-4      	; 0xa86 <Pong2+0x22>
 a8a:	80 2f       	mov	r24, r16
 a8c:	91 2f       	mov	r25, r17
 a8e:	01 97       	sbiw	r24, 0x01	; 1
		for(x=0;x<32000;x++);
 a90:	f1 f7       	brne	.-4      	; 0xa8e <Pong2+0x2a>
 a92:	80 2f       	mov	r24, r16
 a94:	91 2f       	mov	r25, r17
 a96:	01 97       	sbiw	r24, 0x01	; 1
		for(x=0;x<32000;x++);
 a98:	f1 f7       	brne	.-4      	; 0xa96 <Pong2+0x32>

		Task_Suspend(p);
 a9a:	ce 01       	movw	r24, r28
 a9c:	69 df       	rcall	.-302    	; 0x970 <Task_Suspend>
		Task_Resume(p);
 a9e:	ce 01       	movw	r24, r28
 aa0:	aa df       	rcall	.-172    	; 0x9f6 <Task_Resume>
 aa2:	20 2f       	mov	r18, r16
 aa4:	31 2f       	mov	r19, r17
 aa6:	21 50       	subi	r18, 0x01	; 1
 aa8:	31 09       	sbc	r19, r1
		//Task_Yield();
		//PORTA &= ~(1<<PA0);
		for(x=0;x<32000;x++);
 aaa:	e9 f7       	brne	.-6      	; 0xaa6 <Pong2+0x42>
 aac:	80 2f       	mov	r24, r16
 aae:	91 2f       	mov	r25, r17
 ab0:	01 97       	sbiw	r24, 0x01	; 1
		for(x=0;x<32000;x++);
 ab2:	f1 f7       	brne	.-4      	; 0xab0 <Pong2+0x4c>
 ab4:	20 2f       	mov	r18, r16
 ab6:	31 2f       	mov	r19, r17
 ab8:	21 50       	subi	r18, 0x01	; 1
 aba:	31 09       	sbc	r19, r1
		for(x=0;x<32000;x++);
 abc:	e9 f7       	brne	.-6      	; 0xab8 <Pong2+0x54>
 abe:	20 2f       	mov	r18, r16
 ac0:	31 2f       	mov	r19, r17
 ac2:	21 50       	subi	r18, 0x01	; 1
 ac4:	31 09       	sbc	r19, r1
		for(x=0;x<32000;x++);
 ac6:	e9 f7       	brne	.-6      	; 0xac2 <Pong2+0x5e>
 ac8:	d6 cf       	rjmp	.-84     	; 0xa76 <Pong2+0x12>

00000aca <__vector_17>:
	 Task_Create(Pong,5,0);
	 Task_Terminate();
 }

ISR(TIMER1_COMPA_vect)
{
 aca:	1f 92       	push	r1
 acc:	0f 92       	push	r0
 ace:	0f b6       	in	r0, 0x3f	; 63
 ad0:	0f 92       	push	r0
 ad2:	11 24       	eor	r1, r1
	if (preempt==1) {
		
		Task_Yield();
	}*/
	
}
 ad4:	0f 90       	pop	r0
 ad6:	0f be       	out	0x3f, r0	; 63
 ad8:	0f 90       	pop	r0
 ada:	1f 90       	pop	r1
 adc:	18 95       	reti

00000ade <main>:

int main() 
{
   OS_Init();
 ade:	7f dd       	rcall	.-1282   	; 0x5de <OS_Init>
   Task_Create( a_main , 0, 0 );
 ae0:	40 e0       	ldi	r20, 0x00	; 0
 ae2:	50 e0       	ldi	r21, 0x00	; 0
 ae4:	60 e0       	ldi	r22, 0x00	; 0
 ae6:	8a e6       	ldi	r24, 0x6A	; 106
 ae8:	94 e0       	ldi	r25, 0x04	; 4
 aea:	d4 de       	rcall	.-600    	; 0x894 <Task_Create>
   OS_Start();
 aec:	c0 dd       	rcall	.-1152   	; 0x66e <OS_Start>
}
 aee:	80 e0       	ldi	r24, 0x00	; 0
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	08 95       	ret

00000af4 <_exit>:
 af4:	f8 94       	cli

00000af6 <__stop_program>:
 af6:	ff cf       	rjmp	.-2      	; 0xaf6 <__stop_program>
