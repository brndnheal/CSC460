
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000008fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000088a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008d9  00800200  00800200  000008fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000930  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000970  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2b  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003a3  00000000  00000000  00001473  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d4  00000000  00000000  00001816  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00001fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000409  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b8  00000000  00000000  00002599  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002f51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	0b c4       	rjmp	.+2070   	; 0x85c <__vector_17>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	2a e0       	ldi	r18, 0x0A	; 10
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a9 3d       	cpi	r26, 0xD9	; 217
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	b5 d3       	rcall	.+1898   	; 0x870 <main>
 106:	bf c3       	rjmp	.+1918   	; 0x886 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
 10a:	0f 92       	push	r0
 10c:	1f 92       	push	r1
 10e:	2f 92       	push	r2
 110:	3f 92       	push	r3
 112:	4f 92       	push	r4
 114:	5f 92       	push	r5
 116:	6f 92       	push	r6
 118:	7f 92       	push	r7
 11a:	8f 92       	push	r8
 11c:	9f 92       	push	r9
 11e:	af 92       	push	r10
 120:	bf 92       	push	r11
 122:	cf 92       	push	r12
 124:	df 92       	push	r13
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
 14a:	0c b7       	in	r16, 0x3c	; 60
 14c:	0f 93       	push	r16
 14e:	ff b7       	in	r31, 0x3f	; 63
 150:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
 152:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 154:	fe b7       	in	r31, 0x3e	; 62
		  in   r16, EIND
 156:	0c b7       	in	r16, 0x3c	; 60
        sts  KernelSp, r30
 158:	e0 93 d7 0a 	sts	0x0AD7, r30
        sts  KernelSp+1, r31
 15c:	f0 93 d8 0a 	sts	0x0AD8, r31

        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
 160:	e0 91 d5 0a 	lds	r30, 0x0AD5
        lds  r31, CurrentSp+1
 164:	f0 91 d6 0a 	lds	r31, 0x0AD6
        out  SPL, r30
 168:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 16a:	fe bf       	out	0x3e, r31	; 62
		  out  EIND, r16
 16c:	0c bf       	out	0x3c, r16	; 60
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
 16e:	ff 91       	pop	r31
 170:	ff bf       	out	0x3f, r31	; 63
 172:	0f 91       	pop	r16
 174:	0c bf       	out	0x3c, r16	; 60
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	df 90       	pop	r13
 19c:	cf 90       	pop	r12
 19e:	bf 90       	pop	r11
 1a0:	af 90       	pop	r10
 1a2:	9f 90       	pop	r9
 1a4:	8f 90       	pop	r8
 1a6:	7f 90       	pop	r7
 1a8:	6f 90       	pop	r6
 1aa:	5f 90       	pop	r5
 1ac:	4f 90       	pop	r4
 1ae:	3f 90       	pop	r3
 1b0:	2f 90       	pop	r2
 1b2:	1f 90       	pop	r1
 1b4:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
 1b6:	18 95       	reti

000001b8 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
 1b8:	0f 92       	push	r0
 1ba:	1f 92       	push	r1
 1bc:	2f 92       	push	r2
 1be:	3f 92       	push	r3
 1c0:	4f 92       	push	r4
 1c2:	5f 92       	push	r5
 1c4:	6f 92       	push	r6
 1c6:	7f 92       	push	r7
 1c8:	8f 92       	push	r8
 1ca:	9f 92       	push	r9
 1cc:	af 92       	push	r10
 1ce:	bf 92       	push	r11
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
 1f8:	0c b7       	in	r16, 0x3c	; 60
 1fa:	0f 93       	push	r16
 1fc:	ff b7       	in	r31, 0x3f	; 63
 1fe:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
 200:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 202:	fe b7       	in	r31, 0x3e	; 62
		  in   r16, EIND
 204:	0c b7       	in	r16, 0x3c	; 60
        sts  CurrentSp, r30
 206:	e0 93 d5 0a 	sts	0x0AD5, r30
        sts  CurrentSp+1, r31
 20a:	f0 93 d6 0a 	sts	0x0AD6, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
 20e:	e0 91 d7 0a 	lds	r30, 0x0AD7
        lds  r31, KernelSp+1
 212:	f0 91 d8 0a 	lds	r31, 0x0AD8
        out  SPL, r30
 216:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 218:	fe bf       	out	0x3e, r31	; 62
		  out  EIND, r16
 21a:	0c bf       	out	0x3c, r16	; 60
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
 21c:	ff 91       	pop	r31
 21e:	ff bf       	out	0x3f, r31	; 63
 220:	0f 91       	pop	r16
 222:	0c bf       	out	0x3c, r16	; 60
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	bf 91       	pop	r27
 22e:	af 91       	pop	r26
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	7f 91       	pop	r23
 236:	6f 91       	pop	r22
 238:	5f 91       	pop	r21
 23a:	4f 91       	pop	r20
 23c:	3f 91       	pop	r19
 23e:	2f 91       	pop	r18
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	bf 90       	pop	r11
 24e:	af 90       	pop	r10
 250:	9f 90       	pop	r9
 252:	8f 90       	pop	r8
 254:	7f 90       	pop	r7
 256:	6f 90       	pop	r6
 258:	5f 90       	pop	r5
 25a:	4f 90       	pop	r4
 25c:	3f 90       	pop	r3
 25e:	2f 90       	pop	r2
 260:	1f 90       	pop	r1
 262:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
 264:	08 95       	ret

00000266 <Dispatch>:
		Enter_Kernel();
	}
}  
void Task_Resume( PID p ){
	int i;
	for(i=0;i<11;i++){
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	e1 e1       	ldi	r30, 0x11	; 17
 26c:	f2 e0       	ldi	r31, 0x02	; 2
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	a0 81       	ld	r26, Z
 274:	b1 81       	ldd	r27, Z+1	; 0x01
 276:	10 97       	sbiw	r26, 0x00	; 0
 278:	11 f1       	breq	.+68     	; 0x2be <Dispatch+0x58>
 27a:	81 f0       	breq	.+32     	; 0x29c <Dispatch+0x36>
 27c:	ed 01       	movw	r28, r26
 27e:	cf 5e       	subi	r28, 0xEF	; 239
 280:	de 4f       	sbci	r29, 0xFE	; 254
 282:	28 81       	ld	r18, Y
 284:	39 81       	ldd	r19, Y+1	; 0x01
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	fc 01       	movw	r30, r24
 290:	ef 5e       	subi	r30, 0xEF	; 239
 292:	fd 4f       	sbci	r31, 0xFD	; 253
 294:	31 83       	std	Z+1, r19	; 0x01
 296:	20 83       	st	Z, r18
 298:	19 82       	std	Y+1, r1	; 0x01
 29a:	18 82       	st	Y, r1
 29c:	b0 93 0c 02 	sts	0x020C, r27
 2a0:	a0 93 0b 02 	sts	0x020B, r26
 2a4:	8d 91       	ld	r24, X+
 2a6:	9c 91       	ld	r25, X
 2a8:	11 97       	sbiw	r26, 0x01	; 1
 2aa:	90 93 d6 0a 	sts	0x0AD6, r25
 2ae:	80 93 d5 0a 	sts	0x0AD5, r24
 2b2:	ae 5f       	subi	r26, 0xFE	; 254
 2b4:	be 4f       	sbci	r27, 0xFE	; 254
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	8c 93       	st	X, r24
 2ba:	78 94       	sei
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <Dispatch+0x62>
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	34 96       	adiw	r30, 0x04	; 4
 2c2:	8b 30       	cpi	r24, 0x0B	; 11
 2c4:	91 05       	cpc	r25, r1
 2c6:	a9 f6       	brne	.-86     	; 0x272 <Dispatch+0xc>
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <Task_Terminate>:
 2ce:	80 91 07 02 	lds	r24, 0x0207
 2d2:	90 91 08 02 	lds	r25, 0x0208
 2d6:	89 2b       	or	r24, r25
 2d8:	51 f0       	breq	.+20     	; 0x2ee <Task_Terminate+0x20>
 2da:	f8 94       	cli
 2dc:	e0 91 0b 02 	lds	r30, 0x020B
 2e0:	f0 91 0c 02 	lds	r31, 0x020C
 2e4:	eb 5f       	subi	r30, 0xFB	; 251
 2e6:	fe 4f       	sbci	r31, 0xFE	; 254
 2e8:	87 e0       	ldi	r24, 0x07	; 7
 2ea:	80 83       	st	Z, r24
 2ec:	65 cf       	rjmp	.-310    	; 0x1b8 <Enter_Kernel>
 2ee:	08 95       	ret

000002f0 <Kernel_Create_Task_At>:
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	fc 01       	movw	r30, r24
 2fa:	32 96       	adiw	r30, 0x02	; 2
 2fc:	a0 e0       	ldi	r26, 0x00	; 0
 2fe:	b1 e0       	ldi	r27, 0x01	; 1
 300:	ef 01       	movw	r28, r30
 302:	8d 01       	movw	r16, r26
 304:	19 92       	st	Y+, r1
 306:	01 50       	subi	r16, 0x01	; 1
 308:	10 40       	sbci	r17, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <Kernel_Create_Task_At+0x14>
 30c:	dc 01       	movw	r26, r24
 30e:	af 5f       	subi	r26, 0xFF	; 255
 310:	be 4f       	sbci	r27, 0xFE	; 254
 312:	e7 e6       	ldi	r30, 0x67	; 103
 314:	f1 e0       	ldi	r31, 0x01	; 1
 316:	ec 93       	st	X, r30
 318:	11 97       	sbiw	r26, 0x01	; 1
 31a:	fc 93       	st	X, r31
 31c:	fc 01       	movw	r30, r24
 31e:	e1 50       	subi	r30, 0x01	; 1
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	10 82       	st	Z, r1
 324:	31 97       	sbiw	r30, 0x01	; 1
 326:	60 83       	st	Z, r22
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	70 83       	st	Z, r23
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	10 82       	st	Z, r1
 330:	b3 97       	sbiw	r30, 0x23	; 35
 332:	dc 01       	movw	r26, r24
 334:	11 96       	adiw	r26, 0x01	; 1
 336:	fc 93       	st	X, r31
 338:	ee 93       	st	-X, r30
 33a:	ba 96       	adiw	r30, 0x2a	; 42
 33c:	71 83       	std	Z+1, r23	; 0x01
 33e:	60 83       	st	Z, r22
 340:	32 96       	adiw	r30, 0x02	; 2
 342:	10 82       	st	Z, r1
 344:	36 96       	adiw	r30, 0x06	; 6
 346:	31 83       	std	Z+1, r19	; 0x01
 348:	20 83       	st	Z, r18
 34a:	33 97       	sbiw	r30, 0x03	; 3
 34c:	40 83       	st	Z, r20
 34e:	a1 5f       	subi	r26, 0xF1	; 241
 350:	be 4f       	sbci	r27, 0xFE	; 254
 352:	11 96       	adiw	r26, 0x01	; 1
 354:	1c 92       	st	X, r1
 356:	1e 92       	st	-X, r1
 358:	1d 97       	sbiw	r26, 0x0d	; 13
 35a:	21 e0       	ldi	r18, 0x01	; 1
 35c:	2c 93       	st	X, r18
 35e:	20 81       	ld	r18, Z
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	39 96       	adiw	r30, 0x09	; 9
 364:	11 82       	std	Z+1, r1	; 0x01
 366:	10 82       	st	Z, r1
 368:	f9 01       	movw	r30, r18
 36a:	ee 0f       	add	r30, r30
 36c:	ff 1f       	adc	r31, r31
 36e:	ee 0f       	add	r30, r30
 370:	ff 1f       	adc	r31, r31
 372:	ef 5e       	subi	r30, 0xEF	; 239
 374:	fd 4f       	sbci	r31, 0xFD	; 253
 376:	40 81       	ld	r20, Z
 378:	51 81       	ldd	r21, Z+1	; 0x01
 37a:	45 2b       	or	r20, r21
 37c:	61 f4       	brne	.+24     	; 0x396 <Kernel_Create_Task_At+0xa6>
 37e:	22 0f       	add	r18, r18
 380:	33 1f       	adc	r19, r19
 382:	22 0f       	add	r18, r18
 384:	33 1f       	adc	r19, r19
 386:	f9 01       	movw	r30, r18
 388:	ef 5e       	subi	r30, 0xEF	; 239
 38a:	fd 4f       	sbci	r31, 0xFD	; 253
 38c:	91 83       	std	Z+1, r25	; 0x01
 38e:	80 83       	st	Z, r24
 390:	93 83       	std	Z+3, r25	; 0x03
 392:	82 83       	std	Z+2, r24	; 0x02
 394:	10 c0       	rjmp	.+32     	; 0x3b6 <Kernel_Create_Task_At+0xc6>
 396:	22 0f       	add	r18, r18
 398:	33 1f       	adc	r19, r19
 39a:	22 0f       	add	r18, r18
 39c:	33 1f       	adc	r19, r19
 39e:	f9 01       	movw	r30, r18
 3a0:	ef 5e       	subi	r30, 0xEF	; 239
 3a2:	fd 4f       	sbci	r31, 0xFD	; 253
 3a4:	a2 81       	ldd	r26, Z+2	; 0x02
 3a6:	b3 81       	ldd	r27, Z+3	; 0x03
 3a8:	af 5e       	subi	r26, 0xEF	; 239
 3aa:	be 4f       	sbci	r27, 0xFE	; 254
 3ac:	11 96       	adiw	r26, 0x01	; 1
 3ae:	9c 93       	st	X, r25
 3b0:	8e 93       	st	-X, r24
 3b2:	93 83       	std	Z+3, r25	; 0x03
 3b4:	82 83       	std	Z+2, r24	; 0x02
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	08 95       	ret

000003c0 <Kernel_Create_Task>:
 3c0:	20 91 05 02 	lds	r18, 0x0205
 3c4:	30 91 06 02 	lds	r19, 0x0206
 3c8:	28 30       	cpi	r18, 0x08	; 8
 3ca:	31 05       	cpc	r19, r1
 3cc:	f9 f0       	breq	.+62     	; 0x40c <Kernel_Create_Task+0x4c>
 3ce:	a0 91 0d 02 	lds	r26, 0x020D
 3d2:	b0 91 0e 02 	lds	r27, 0x020E
 3d6:	10 97       	sbiw	r26, 0x00	; 0
 3d8:	59 f0       	breq	.+22     	; 0x3f0 <Kernel_Create_Task+0x30>
 3da:	fd 01       	movw	r30, r26
 3dc:	ef 5e       	subi	r30, 0xEF	; 239
 3de:	fe 4f       	sbci	r31, 0xFE	; 254
 3e0:	20 81       	ld	r18, Z
 3e2:	31 81       	ldd	r19, Z+1	; 0x01
 3e4:	30 93 0e 02 	sts	0x020E, r19
 3e8:	20 93 0d 02 	sts	0x020D, r18
 3ec:	11 82       	std	Z+1, r1	; 0x01
 3ee:	10 82       	st	Z, r1
 3f0:	9a 01       	movw	r18, r20
 3f2:	46 2f       	mov	r20, r22
 3f4:	bc 01       	movw	r22, r24
 3f6:	e0 91 05 02 	lds	r30, 0x0205
 3fa:	f0 91 06 02 	lds	r31, 0x0206
 3fe:	31 96       	adiw	r30, 0x01	; 1
 400:	f0 93 06 02 	sts	0x0206, r31
 404:	e0 93 05 02 	sts	0x0205, r30
 408:	cd 01       	movw	r24, r26
 40a:	72 cf       	rjmp	.-284    	; 0x2f0 <Kernel_Create_Task_At>
 40c:	08 95       	ret

0000040e <check_rqueue>:
 40e:	a0 91 0b 02 	lds	r26, 0x020B
 412:	b0 91 0c 02 	lds	r27, 0x020C
 416:	fd 01       	movw	r30, r26
 418:	e8 5f       	subi	r30, 0xF8	; 248
 41a:	fe 4f       	sbci	r31, 0xFE	; 254
 41c:	80 81       	ld	r24, Z
 41e:	88 23       	and	r24, r24
 420:	f1 f0       	breq	.+60     	; 0x45e <check_rqueue+0x50>
 422:	80 91 11 02 	lds	r24, 0x0211
 426:	90 91 12 02 	lds	r25, 0x0212
 42a:	89 2b       	or	r24, r25
 42c:	d9 f4       	brne	.+54     	; 0x464 <check_rqueue+0x56>
 42e:	45 e1       	ldi	r20, 0x15	; 21
 430:	52 e0       	ldi	r21, 0x02	; 2
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	df 01       	movw	r26, r30
 438:	08 c0       	rjmp	.+16     	; 0x44a <check_rqueue+0x3c>
 43a:	4c 5f       	subi	r20, 0xFC	; 252
 43c:	5f 4f       	sbci	r21, 0xFF	; 255
 43e:	fa 01       	movw	r30, r20
 440:	34 97       	sbiw	r30, 0x04	; 4
 442:	80 81       	ld	r24, Z
 444:	91 81       	ldd	r25, Z+1	; 0x01
 446:	89 2b       	or	r24, r25
 448:	81 f4       	brne	.+32     	; 0x46a <check_rqueue+0x5c>
 44a:	2f 5f       	subi	r18, 0xFF	; 255
 44c:	3f 4f       	sbci	r19, 0xFF	; 255
 44e:	8c 91       	ld	r24, X
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	28 17       	cp	r18, r24
 454:	39 07       	cpc	r19, r25
 456:	8c f3       	brlt	.-30     	; 0x43a <check_rqueue+0x2c>
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	08 95       	ret
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	08 95       	ret
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	08 95       	ret
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	08 95       	ret

00000470 <set_timer>:
 470:	10 92 80 00 	sts	0x0080, r1
 474:	e1 e8       	ldi	r30, 0x81	; 129
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	10 82       	st	Z, r1
 47a:	80 81       	ld	r24, Z
 47c:	88 60       	ori	r24, 0x08	; 8
 47e:	80 83       	st	Z, r24
 480:	80 81       	ld	r24, Z
 482:	82 60       	ori	r24, 0x02	; 2
 484:	80 83       	st	Z, r24
 486:	80 e2       	ldi	r24, 0x20	; 32
 488:	9e e4       	ldi	r25, 0x4E	; 78
 48a:	90 93 89 00 	sts	0x0089, r25
 48e:	80 93 88 00 	sts	0x0088, r24
 492:	ef e6       	ldi	r30, 0x6F	; 111
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	82 60       	ori	r24, 0x02	; 2
 49a:	80 83       	st	Z, r24
 49c:	08 95       	ret

0000049e <OS_Init>:
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	81 b9       	out	0x01, r24	; 1
 4a2:	09 9a       	sbi	0x01, 1	; 1
 4a4:	10 98       	cbi	0x02, 0	; 2
 4a6:	11 98       	cbi	0x02, 1	; 2
 4a8:	e3 df       	rcall	.-58     	; 0x470 <set_timer>
 4aa:	10 92 06 02 	sts	0x0206, r1
 4ae:	10 92 05 02 	sts	0x0205, r1
 4b2:	10 92 08 02 	sts	0x0208, r1
 4b6:	10 92 07 02 	sts	0x0207, r1
 4ba:	10 92 0a 02 	sts	0x020A, r1
 4be:	10 92 09 02 	sts	0x0209, r1
 4c2:	ad e3       	ldi	r26, 0x3D	; 61
 4c4:	b2 e0       	ldi	r27, 0x02	; 2
 4c6:	20 e0       	ldi	r18, 0x00	; 0
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	43 e1       	ldi	r20, 0x13	; 19
 4cc:	51 e0       	ldi	r21, 0x01	; 1
 4ce:	fd 01       	movw	r30, r26
 4d0:	ca 01       	movw	r24, r20
 4d2:	11 92       	st	Z+, r1
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	e9 f7       	brne	.-6      	; 0x4d2 <OS_Init+0x34>
 4d8:	24 9f       	mul	r18, r20
 4da:	c0 01       	movw	r24, r0
 4dc:	25 9f       	mul	r18, r21
 4de:	90 0d       	add	r25, r0
 4e0:	34 9f       	mul	r19, r20
 4e2:	90 0d       	add	r25, r0
 4e4:	11 24       	eor	r1, r1
 4e6:	83 5c       	subi	r24, 0xC3	; 195
 4e8:	9d 4f       	sbci	r25, 0xFD	; 253
 4ea:	fc 01       	movw	r30, r24
 4ec:	ee 5f       	subi	r30, 0xFE	; 254
 4ee:	fe 4f       	sbci	r31, 0xFE	; 254
 4f0:	10 82       	st	Z, r1
 4f2:	ad 5e       	subi	r26, 0xED	; 237
 4f4:	be 4f       	sbci	r27, 0xFE	; 254
 4f6:	3f 96       	adiw	r30, 0x0f	; 15
 4f8:	b1 83       	std	Z+1, r27	; 0x01
 4fa:	a0 83       	st	Z, r26
 4fc:	2f 5f       	subi	r18, 0xFF	; 255
 4fe:	3f 4f       	sbci	r19, 0xFF	; 255
 500:	27 30       	cpi	r18, 0x07	; 7
 502:	31 05       	cpc	r19, r1
 504:	21 f7       	brne	.-56     	; 0x4ce <OS_Init+0x30>
 506:	10 92 c4 0a 	sts	0x0AC4, r1
 50a:	10 92 d4 0a 	sts	0x0AD4, r1
 50e:	10 92 d3 0a 	sts	0x0AD3, r1
 512:	ed e0       	ldi	r30, 0x0D	; 13
 514:	f2 e0       	ldi	r31, 0x02	; 2
 516:	8d e3       	ldi	r24, 0x3D	; 61
 518:	92 e0       	ldi	r25, 0x02	; 2
 51a:	91 83       	std	Z+1, r25	; 0x01
 51c:	80 83       	st	Z, r24
 51e:	82 ec       	ldi	r24, 0xC2	; 194
 520:	99 e0       	ldi	r25, 0x09	; 9
 522:	93 83       	std	Z+3, r25	; 0x03
 524:	82 83       	std	Z+2, r24	; 0x02
 526:	08 95       	ret

00000528 <OS_Start>:
 528:	df 92       	push	r13
 52a:	ef 92       	push	r14
 52c:	ff 92       	push	r15
 52e:	0f 93       	push	r16
 530:	1f 93       	push	r17
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	80 91 07 02 	lds	r24, 0x0207
 53a:	90 91 08 02 	lds	r25, 0x0208
 53e:	89 2b       	or	r24, r25
 540:	09 f0       	breq	.+2      	; 0x544 <OS_Start+0x1c>
 542:	c5 c0       	rjmp	.+394    	; 0x6ce <OS_Start+0x1a6>
 544:	80 91 05 02 	lds	r24, 0x0205
 548:	90 91 06 02 	lds	r25, 0x0206
 54c:	89 2b       	or	r24, r25
 54e:	09 f4       	brne	.+2      	; 0x552 <OS_Start+0x2a>
 550:	be c0       	rjmp	.+380    	; 0x6ce <OS_Start+0x1a6>
 552:	f8 94       	cli
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	90 93 08 02 	sts	0x0208, r25
 55c:	80 93 07 02 	sts	0x0207, r24
 560:	82 de       	rcall	.-764    	; 0x266 <Dispatch>
 562:	dd 24       	eor	r13, r13
 564:	d3 94       	inc	r13
 566:	0f 2e       	mov	r0, r31
 568:	fd e0       	ldi	r31, 0x0D	; 13
 56a:	ef 2e       	mov	r14, r31
 56c:	f2 e0       	ldi	r31, 0x02	; 2
 56e:	ff 2e       	mov	r15, r31
 570:	f0 2d       	mov	r31, r0
 572:	00 e0       	ldi	r16, 0x00	; 0
 574:	12 e0       	ldi	r17, 0x02	; 2
 576:	e0 91 0b 02 	lds	r30, 0x020B
 57a:	f0 91 0c 02 	lds	r31, 0x020C
 57e:	80 81       	ld	r24, Z
 580:	91 81       	ldd	r25, Z+1	; 0x01
 582:	90 93 d6 0a 	sts	0x0AD6, r25
 586:	80 93 d5 0a 	sts	0x0AD5, r24
 58a:	bf dd       	rcall	.-1154   	; 0x10a <CSwitch>
 58c:	c0 91 0b 02 	lds	r28, 0x020B
 590:	d0 91 0c 02 	lds	r29, 0x020C
 594:	80 91 d5 0a 	lds	r24, 0x0AD5
 598:	90 91 d6 0a 	lds	r25, 0x0AD6
 59c:	99 83       	std	Y+1, r25	; 0x01
 59e:	88 83       	st	Y, r24
 5a0:	fe 01       	movw	r30, r28
 5a2:	eb 5f       	subi	r30, 0xFB	; 251
 5a4:	fe 4f       	sbci	r31, 0xFE	; 254
 5a6:	80 81       	ld	r24, Z
 5a8:	82 30       	cpi	r24, 0x02	; 2
 5aa:	d1 f1       	breq	.+116    	; 0x620 <OS_Start+0xf8>
 5ac:	18 f4       	brcc	.+6      	; 0x5b4 <OS_Start+0x8c>
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	39 f0       	breq	.+14     	; 0x5c0 <OS_Start+0x98>
 5b2:	e1 cf       	rjmp	.-62     	; 0x576 <OS_Start+0x4e>
 5b4:	85 30       	cpi	r24, 0x05	; 5
 5b6:	c9 f1       	breq	.+114    	; 0x62a <OS_Start+0x102>
 5b8:	87 30       	cpi	r24, 0x07	; 7
 5ba:	09 f4       	brne	.+2      	; 0x5be <OS_Start+0x96>
 5bc:	69 c0       	rjmp	.+210    	; 0x690 <OS_Start+0x168>
 5be:	db cf       	rjmp	.-74     	; 0x576 <OS_Start+0x4e>
 5c0:	d8 01       	movw	r26, r16
 5c2:	12 96       	adiw	r26, 0x02	; 2
 5c4:	4d 91       	ld	r20, X+
 5c6:	5c 91       	ld	r21, X
 5c8:	13 97       	sbiw	r26, 0x03	; 3
 5ca:	14 96       	adiw	r26, 0x04	; 4
 5cc:	6c 91       	ld	r22, X
 5ce:	14 97       	sbiw	r26, 0x04	; 4
 5d0:	8d 91       	ld	r24, X+
 5d2:	9c 91       	ld	r25, X
 5d4:	f5 de       	rcall	.-534    	; 0x3c0 <Kernel_Create_Task>
 5d6:	1b df       	rcall	.-458    	; 0x40e <check_rqueue>
 5d8:	89 2b       	or	r24, r25
 5da:	69 f2       	breq	.-102    	; 0x576 <OS_Start+0x4e>
 5dc:	fe 01       	movw	r30, r28
 5de:	ee 5f       	subi	r30, 0xFE	; 254
 5e0:	fe 4f       	sbci	r31, 0xFE	; 254
 5e2:	d0 82       	st	Z, r13
 5e4:	de 01       	movw	r26, r28
 5e6:	a8 5f       	subi	r26, 0xF8	; 248
 5e8:	be 4f       	sbci	r27, 0xFE	; 254
 5ea:	ec 91       	ld	r30, X
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	ee 0f       	add	r30, r30
 5f0:	ff 1f       	adc	r31, r31
 5f2:	ee 0f       	add	r30, r30
 5f4:	ff 1f       	adc	r31, r31
 5f6:	ef 5e       	subi	r30, 0xEF	; 239
 5f8:	fd 4f       	sbci	r31, 0xFD	; 253
 5fa:	80 81       	ld	r24, Z
 5fc:	91 81       	ldd	r25, Z+1	; 0x01
 5fe:	fe 01       	movw	r30, r28
 600:	ef 5e       	subi	r30, 0xEF	; 239
 602:	fe 4f       	sbci	r31, 0xFE	; 254
 604:	91 83       	std	Z+1, r25	; 0x01
 606:	80 83       	st	Z, r24
 608:	ec 91       	ld	r30, X
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	ee 0f       	add	r30, r30
 60e:	ff 1f       	adc	r31, r31
 610:	ee 0f       	add	r30, r30
 612:	ff 1f       	adc	r31, r31
 614:	ef 5e       	subi	r30, 0xEF	; 239
 616:	fd 4f       	sbci	r31, 0xFD	; 253
 618:	d1 83       	std	Z+1, r29	; 0x01
 61a:	c0 83       	st	Z, r28
 61c:	24 de       	rcall	.-952    	; 0x266 <Dispatch>
 61e:	ab cf       	rjmp	.-170    	; 0x576 <OS_Start+0x4e>
 620:	ce 5f       	subi	r28, 0xFE	; 254
 622:	de 4f       	sbci	r29, 0xFE	; 254
 624:	d8 82       	st	Y, r13
 626:	1f de       	rcall	.-962    	; 0x266 <Dispatch>
 628:	a6 cf       	rjmp	.-180    	; 0x576 <OS_Start+0x4e>
 62a:	fe 01       	movw	r30, r28
 62c:	ee 5f       	subi	r30, 0xFE	; 254
 62e:	fe 4f       	sbci	r31, 0xFE	; 254
 630:	d0 82       	st	Z, r13
 632:	36 96       	adiw	r30, 0x06	; 6
 634:	80 81       	ld	r24, Z
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	39 96       	adiw	r30, 0x09	; 9
 63a:	11 82       	std	Z+1, r1	; 0x01
 63c:	10 82       	st	Z, r1
 63e:	fc 01       	movw	r30, r24
 640:	ee 0f       	add	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	ee 0f       	add	r30, r30
 646:	ff 1f       	adc	r31, r31
 648:	ef 5e       	subi	r30, 0xEF	; 239
 64a:	fd 4f       	sbci	r31, 0xFD	; 253
 64c:	20 81       	ld	r18, Z
 64e:	31 81       	ldd	r19, Z+1	; 0x01
 650:	23 2b       	or	r18, r19
 652:	61 f4       	brne	.+24     	; 0x66c <OS_Start+0x144>
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	fc 01       	movw	r30, r24
 65e:	ef 5e       	subi	r30, 0xEF	; 239
 660:	fd 4f       	sbci	r31, 0xFD	; 253
 662:	d1 83       	std	Z+1, r29	; 0x01
 664:	c0 83       	st	Z, r28
 666:	d3 83       	std	Z+3, r29	; 0x03
 668:	c2 83       	std	Z+2, r28	; 0x02
 66a:	10 c0       	rjmp	.+32     	; 0x68c <OS_Start+0x164>
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	fc 01       	movw	r30, r24
 676:	ef 5e       	subi	r30, 0xEF	; 239
 678:	fd 4f       	sbci	r31, 0xFD	; 253
 67a:	a2 81       	ldd	r26, Z+2	; 0x02
 67c:	b3 81       	ldd	r27, Z+3	; 0x03
 67e:	af 5e       	subi	r26, 0xEF	; 239
 680:	be 4f       	sbci	r27, 0xFE	; 254
 682:	11 96       	adiw	r26, 0x01	; 1
 684:	dc 93       	st	X, r29
 686:	ce 93       	st	-X, r28
 688:	d3 83       	std	Z+3, r29	; 0x03
 68a:	c2 83       	std	Z+2, r28	; 0x02
 68c:	ec dd       	rcall	.-1064   	; 0x266 <Dispatch>
 68e:	73 cf       	rjmp	.-282    	; 0x576 <OS_Start+0x4e>
 690:	fe 01       	movw	r30, r28
 692:	ee 5f       	subi	r30, 0xFE	; 254
 694:	fe 4f       	sbci	r31, 0xFE	; 254
 696:	10 82       	st	Z, r1
 698:	3f 96       	adiw	r30, 0x0f	; 15
 69a:	11 82       	std	Z+1, r1	; 0x01
 69c:	10 82       	st	Z, r1
 69e:	f7 01       	movw	r30, r14
 6a0:	80 81       	ld	r24, Z
 6a2:	91 81       	ldd	r25, Z+1	; 0x01
 6a4:	89 2b       	or	r24, r25
 6a6:	29 f4       	brne	.+10     	; 0x6b2 <OS_Start+0x18a>
 6a8:	d1 83       	std	Z+1, r29	; 0x01
 6aa:	c0 83       	st	Z, r28
 6ac:	d3 83       	std	Z+3, r29	; 0x03
 6ae:	c2 83       	std	Z+2, r28	; 0x02
 6b0:	0c c0       	rjmp	.+24     	; 0x6ca <OS_Start+0x1a2>
 6b2:	d7 01       	movw	r26, r14
 6b4:	02 80       	ldd	r0, Z+2	; 0x02
 6b6:	f3 81       	ldd	r31, Z+3	; 0x03
 6b8:	e0 2d       	mov	r30, r0
 6ba:	ef 5e       	subi	r30, 0xEF	; 239
 6bc:	fe 4f       	sbci	r31, 0xFE	; 254
 6be:	d1 83       	std	Z+1, r29	; 0x01
 6c0:	c0 83       	st	Z, r28
 6c2:	13 96       	adiw	r26, 0x03	; 3
 6c4:	dc 93       	st	X, r29
 6c6:	ce 93       	st	-X, r28
 6c8:	12 97       	sbiw	r26, 0x02	; 2
 6ca:	cd dd       	rcall	.-1126   	; 0x266 <Dispatch>
 6cc:	54 cf       	rjmp	.-344    	; 0x576 <OS_Start+0x4e>
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	1f 91       	pop	r17
 6d4:	0f 91       	pop	r16
 6d6:	ff 90       	pop	r15
 6d8:	ef 90       	pop	r14
 6da:	df 90       	pop	r13
 6dc:	08 95       	ret

000006de <Task_Create>:
 6de:	20 91 07 02 	lds	r18, 0x0207
 6e2:	30 91 08 02 	lds	r19, 0x0208
 6e6:	23 2b       	or	r18, r19
 6e8:	d1 f0       	breq	.+52     	; 0x71e <Task_Create+0x40>
 6ea:	f8 94       	cli
 6ec:	e0 e0       	ldi	r30, 0x00	; 0
 6ee:	f2 e0       	ldi	r31, 0x02	; 2
 6f0:	91 83       	std	Z+1, r25	; 0x01
 6f2:	80 83       	st	Z, r24
 6f4:	53 83       	std	Z+3, r21	; 0x03
 6f6:	42 83       	std	Z+2, r20	; 0x02
 6f8:	64 83       	std	Z+4, r22	; 0x04
 6fa:	e0 91 0b 02 	lds	r30, 0x020B
 6fe:	f0 91 0c 02 	lds	r31, 0x020C
 702:	eb 5f       	subi	r30, 0xFB	; 251
 704:	fe 4f       	sbci	r31, 0xFE	; 254
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	80 83       	st	Z, r24
 70a:	56 dd       	rcall	.-1364   	; 0x1b8 <Enter_Kernel>
 70c:	e0 91 0b 02 	lds	r30, 0x020B
 710:	f0 91 0c 02 	lds	r31, 0x020C
 714:	e7 5f       	subi	r30, 0xF7	; 247
 716:	fe 4f       	sbci	r31, 0xFE	; 254
 718:	80 81       	ld	r24, Z
 71a:	91 81       	ldd	r25, Z+1	; 0x01
 71c:	08 95       	ret
 71e:	50 de       	rcall	.-864    	; 0x3c0 <Kernel_Create_Task>
 720:	e0 91 0b 02 	lds	r30, 0x020B
 724:	f0 91 0c 02 	lds	r31, 0x020C
 728:	e7 5f       	subi	r30, 0xF7	; 247
 72a:	fe 4f       	sbci	r31, 0xFE	; 254
 72c:	80 81       	ld	r24, Z
 72e:	91 81       	ldd	r25, Z+1	; 0x01
 730:	08 95       	ret

00000732 <Ping>:
 732:	10 98       	cbi	0x02, 0	; 2
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	9d e7       	ldi	r25, 0x7D	; 125
 738:	01 97       	sbiw	r24, 0x01	; 1
 73a:	f1 f7       	brne	.-4      	; 0x738 <Ping+0x6>
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	9d e7       	ldi	r25, 0x7D	; 125
 740:	01 97       	sbiw	r24, 0x01	; 1
 742:	f1 f7       	brne	.-4      	; 0x740 <Ping+0xe>
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	9d e7       	ldi	r25, 0x7D	; 125
 748:	01 97       	sbiw	r24, 0x01	; 1
 74a:	f1 f7       	brne	.-4      	; 0x748 <Ping+0x16>
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	9d e7       	ldi	r25, 0x7D	; 125
 750:	01 97       	sbiw	r24, 0x01	; 1
 752:	f1 f7       	brne	.-4      	; 0x750 <Ping+0x1e>
 754:	40 e0       	ldi	r20, 0x00	; 0
 756:	50 e0       	ldi	r21, 0x00	; 0
 758:	60 e0       	ldi	r22, 0x00	; 0
 75a:	87 e0       	ldi	r24, 0x07	; 7
 75c:	94 e0       	ldi	r25, 0x04	; 4
 75e:	bf df       	rcall	.-130    	; 0x6de <Task_Create>
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	2d e7       	ldi	r18, 0x7D	; 125
 764:	83 2f       	mov	r24, r19
 766:	92 2f       	mov	r25, r18
 768:	01 97       	sbiw	r24, 0x01	; 1
 76a:	f1 f7       	brne	.-4      	; 0x768 <Ping+0x36>
 76c:	83 2f       	mov	r24, r19
 76e:	92 2f       	mov	r25, r18
 770:	01 97       	sbiw	r24, 0x01	; 1
 772:	f1 f7       	brne	.-4      	; 0x770 <Ping+0x3e>
 774:	83 2f       	mov	r24, r19
 776:	92 2f       	mov	r25, r18
 778:	01 97       	sbiw	r24, 0x01	; 1
 77a:	f1 f7       	brne	.-4      	; 0x778 <Ping+0x46>
 77c:	83 2f       	mov	r24, r19
 77e:	92 2f       	mov	r25, r18
 780:	01 97       	sbiw	r24, 0x01	; 1
 782:	f1 f7       	brne	.-4      	; 0x780 <Ping+0x4e>
 784:	83 2f       	mov	r24, r19
 786:	92 2f       	mov	r25, r18
 788:	01 97       	sbiw	r24, 0x01	; 1
 78a:	f1 f7       	brne	.-4      	; 0x788 <Ping+0x56>
 78c:	83 2f       	mov	r24, r19
 78e:	92 2f       	mov	r25, r18
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	f1 f7       	brne	.-4      	; 0x790 <Ping+0x5e>
 794:	83 2f       	mov	r24, r19
 796:	92 2f       	mov	r25, r18
 798:	01 97       	sbiw	r24, 0x01	; 1
 79a:	f1 f7       	brne	.-4      	; 0x798 <Ping+0x66>
 79c:	83 2f       	mov	r24, r19
 79e:	92 2f       	mov	r25, r18
 7a0:	01 97       	sbiw	r24, 0x01	; 1
 7a2:	f1 f7       	brne	.-4      	; 0x7a0 <Ping+0x6e>
 7a4:	df cf       	rjmp	.-66     	; 0x764 <Ping+0x32>

000007a6 <Pong>:
 7a6:	10 98       	cbi	0x02, 0	; 2
 7a8:	40 e0       	ldi	r20, 0x00	; 0
 7aa:	50 e0       	ldi	r21, 0x00	; 0
 7ac:	61 e0       	ldi	r22, 0x01	; 1
 7ae:	89 e9       	ldi	r24, 0x99	; 153
 7b0:	93 e0       	ldi	r25, 0x03	; 3
 7b2:	95 df       	rcall	.-214    	; 0x6de <Task_Create>
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	2d e7       	ldi	r18, 0x7D	; 125
 7b8:	10 98       	cbi	0x02, 0	; 2
 7ba:	83 2f       	mov	r24, r19
 7bc:	92 2f       	mov	r25, r18
 7be:	01 97       	sbiw	r24, 0x01	; 1
 7c0:	f1 f7       	brne	.-4      	; 0x7be <Pong+0x18>
 7c2:	83 2f       	mov	r24, r19
 7c4:	92 2f       	mov	r25, r18
 7c6:	01 97       	sbiw	r24, 0x01	; 1
 7c8:	f1 f7       	brne	.-4      	; 0x7c6 <Pong+0x20>
 7ca:	83 2f       	mov	r24, r19
 7cc:	92 2f       	mov	r25, r18
 7ce:	01 97       	sbiw	r24, 0x01	; 1
 7d0:	f1 f7       	brne	.-4      	; 0x7ce <Pong+0x28>
 7d2:	83 2f       	mov	r24, r19
 7d4:	92 2f       	mov	r25, r18
 7d6:	01 97       	sbiw	r24, 0x01	; 1
 7d8:	f1 f7       	brne	.-4      	; 0x7d6 <Pong+0x30>
 7da:	ee cf       	rjmp	.-36     	; 0x7b8 <Pong+0x12>

000007dc <a_main>:
 7dc:	40 e0       	ldi	r20, 0x00	; 0
 7de:	50 e0       	ldi	r21, 0x00	; 0
 7e0:	65 e0       	ldi	r22, 0x05	; 5
 7e2:	83 ed       	ldi	r24, 0xD3	; 211
 7e4:	93 e0       	ldi	r25, 0x03	; 3
 7e6:	7b df       	rcall	.-266    	; 0x6de <Task_Create>
 7e8:	72 cd       	rjmp	.-1308   	; 0x2ce <Task_Terminate>
 7ea:	08 95       	ret

000007ec <Task_Yield>:
 7ec:	80 91 07 02 	lds	r24, 0x0207
 7f0:	90 91 08 02 	lds	r25, 0x0208
 7f4:	89 2b       	or	r24, r25
 7f6:	51 f0       	breq	.+20     	; 0x80c <Task_Yield+0x20>
 7f8:	f8 94       	cli
 7fa:	e0 91 0b 02 	lds	r30, 0x020B
 7fe:	f0 91 0c 02 	lds	r31, 0x020C
 802:	eb 5f       	subi	r30, 0xFB	; 251
 804:	fe 4f       	sbci	r31, 0xFE	; 254
 806:	85 e0       	ldi	r24, 0x05	; 5
 808:	80 83       	st	Z, r24
 80a:	d6 cc       	rjmp	.-1620   	; 0x1b8 <Enter_Kernel>
 80c:	08 95       	ret

0000080e <Pong2>:
 80e:	10 9a       	sbi	0x02, 0	; 2
 810:	d0 e0       	ldi	r29, 0x00	; 0
 812:	cd e7       	ldi	r28, 0x7D	; 125
 814:	10 9a       	sbi	0x02, 0	; 2
 816:	8d 2f       	mov	r24, r29
 818:	9c 2f       	mov	r25, r28
 81a:	01 97       	sbiw	r24, 0x01	; 1
 81c:	f1 f7       	brne	.-4      	; 0x81a <Pong2+0xc>
 81e:	8d 2f       	mov	r24, r29
 820:	9c 2f       	mov	r25, r28
 822:	01 97       	sbiw	r24, 0x01	; 1
 824:	f1 f7       	brne	.-4      	; 0x822 <Pong2+0x14>
 826:	8d 2f       	mov	r24, r29
 828:	9c 2f       	mov	r25, r28
 82a:	01 97       	sbiw	r24, 0x01	; 1
 82c:	f1 f7       	brne	.-4      	; 0x82a <Pong2+0x1c>
 82e:	8d 2f       	mov	r24, r29
 830:	9c 2f       	mov	r25, r28
 832:	01 97       	sbiw	r24, 0x01	; 1
 834:	f1 f7       	brne	.-4      	; 0x832 <Pong2+0x24>
 836:	10 98       	cbi	0x02, 0	; 2
 838:	8d 2f       	mov	r24, r29
 83a:	9c 2f       	mov	r25, r28
 83c:	01 97       	sbiw	r24, 0x01	; 1
 83e:	f1 f7       	brne	.-4      	; 0x83c <Pong2+0x2e>
 840:	8d 2f       	mov	r24, r29
 842:	9c 2f       	mov	r25, r28
 844:	01 97       	sbiw	r24, 0x01	; 1
 846:	f1 f7       	brne	.-4      	; 0x844 <Pong2+0x36>
 848:	8d 2f       	mov	r24, r29
 84a:	9c 2f       	mov	r25, r28
 84c:	01 97       	sbiw	r24, 0x01	; 1
 84e:	f1 f7       	brne	.-4      	; 0x84c <Pong2+0x3e>
 850:	8d 2f       	mov	r24, r29
 852:	9c 2f       	mov	r25, r28
 854:	01 97       	sbiw	r24, 0x01	; 1
 856:	f1 f7       	brne	.-4      	; 0x854 <Pong2+0x46>
 858:	c9 df       	rcall	.-110    	; 0x7ec <Task_Yield>
 85a:	dc cf       	rjmp	.-72     	; 0x814 <Pong2+0x6>

0000085c <__vector_17>:
	 Task_Create(Pong,5,0);
	 Task_Terminate();
 }

ISR(TIMER1_COMPA_vect)
{
 85c:	1f 92       	push	r1
 85e:	0f 92       	push	r0
 860:	0f b6       	in	r0, 0x3f	; 63
 862:	0f 92       	push	r0
 864:	11 24       	eor	r1, r1
	if (preempt==1) {
		
		Task_Yield();
	}*/
	
}
 866:	0f 90       	pop	r0
 868:	0f be       	out	0x3f, r0	; 63
 86a:	0f 90       	pop	r0
 86c:	1f 90       	pop	r1
 86e:	18 95       	reti

00000870 <main>:

int main() 
{
   OS_Init();
 870:	16 de       	rcall	.-980    	; 0x49e <OS_Init>
   Task_Create( a_main , 0, 0 );
 872:	40 e0       	ldi	r20, 0x00	; 0
 874:	50 e0       	ldi	r21, 0x00	; 0
 876:	60 e0       	ldi	r22, 0x00	; 0
 878:	8e ee       	ldi	r24, 0xEE	; 238
 87a:	93 e0       	ldi	r25, 0x03	; 3
 87c:	30 df       	rcall	.-416    	; 0x6de <Task_Create>
   OS_Start();
 87e:	54 de       	rcall	.-856    	; 0x528 <OS_Start>
}
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	08 95       	ret

00000886 <_exit>:
 886:	f8 94       	cli

00000888 <__stop_program>:
 888:	ff cf       	rjmp	.-2      	; 0x888 <__stop_program>
